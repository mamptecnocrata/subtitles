1
00:00:00,000 --> 00:00:08,999
Gather all the elements to learn Elixir with our guidance.  Functional programs you will code,

2
00:00:09,000 --> 00:00:25,999
turning the knowledge into gold.  Become a master mixer as you stir it all up with Elixir.

3
00:00:26,000 --> 00:00:33,999
You're watching Mixing It Up With Elixir.  I'm Carlos Sosa and in this level we'll learn about tuples.

4
00:00:34,000 --> 00:00:39,999
A tuple is a data structure used for working with ordered collections of elements, typically used

5
00:00:40,000 --> 00:00:44,999
as return values from functions.  We use curly braces to represent them.

6
00:00:45,000 --> 00:00:51,999
This is an example of a valid tuple with three elements, first one is an atom, functional.

7
00:00:52,000 --> 00:01:01,999
Second is a string, elixir, and third is an integer, 2012.  Tuples can hold many elements for many different types,

8
00:01:02,000 --> 00:01:06,999
but we typically work with two element tuples where the first element is an atom, like these two.

9
00:01:07,000 --> 00:01:15,999
Here we have a tuple with the ok atom as the first element and a string, some content, as the second element.

10
00:01:16,000 --> 00:01:22,999
And then with a tuple with the error atom as the first element and another atom as the second element,

11
00:01:23,000 --> 00:01:29,999
enoent, representing an error for unknown file, something we'll typically run into multiple times when writing

12
00:01:30,000 --> 00:01:33,999
Elixir programs.

13
00:01:34,000 --> 00:01:37,999
One way to read elements from tuples is using pattern matching.

14
00:01:38,000 --> 00:01:43,999
In this example we have a tuple with the atom ok and the string some content on the right.

15
00:01:44,000 --> 00:01:50,999
Then on the left we have another tuple, but with two variables, status and content.

16
00:01:51,000 --> 00:01:58,999
Using the match operator or the equal sign, we can pattern match the ok atom with the status variable

17
00:01:59,000 --> 00:02:05,999
in the string, some content, with the variable content.  A similar match happens in the second example,

18
00:02:06,000 --> 00:02:11,999
first we successfully matched the two error atoms on both sides of the match operator.

19
00:02:12,000 --> 00:02:19,999
Then we matched the variable, message, with a string some error occurred.

20
00:02:20,000 --> 00:02:24,999
Now that we're familiar with the structure of tuples and how to read values from them, let's look at a

21
00:02:25,000 --> 00:02:30,999
more practical example using tuples and functions.  In this example we'll use the File.read function

22
00:02:31,000 --> 00:02:39,999
from Elixir's standard library.  This function reads the content of a given file from the local file system.

23
00:02:40,000 --> 00:02:47,999
What we get back as a return value is a tuple with two elements, an atom representing the status of the operation

24
00:02:48,000 --> 00:02:53,999
and either the content of the file or the error type that prevented the operation from taking place.

25
00:02:54,000 --> 00:03:01,999
So when we call it with a valid file, we get back a tuple with the ok atom and the content as the second argument.

26
00:03:02,000 --> 00:03:09,999
If we try pattern matching the same ok atom on a call to File.read with a file that does not exist, then

27
00:03:10,000 --> 00:03:16,999
we'll run into a MatchError like this.  For a correct match to occur here, we would need to use an error atom,

28
00:03:17,000 --> 00:03:22,999
like this.  But in reality we won't know whether a file exists until we run our program.

29
00:03:23,000 --> 00:03:28,999
So let's see how we can make this operation a bit more dynamic.

30
00:03:29,000 --> 00:03:35,999
Tuples can be used as function arguments and pattern matched against values passed in during function calls.

31
00:03:36,000 --> 00:03:36,999
Let's look at this example.

32
00:03:37,000 --> 00:03:42,999
Here we have a module account and a parse_file function with two clauses.

33
00:03:43,000 --> 00:03:49,999
The first clause expects a tuple with the first element being the ok atom.

34
00:03:50,000 --> 00:03:55,999
This matches the result of a successful file read operation and the contents of the file are assigned

35
00:03:56,000 --> 00:04:02,999
to the variable content.  The second clause expects a tuple with the first element being the error atom.

36
00:04:03,000 --> 00:04:12,999
This one matches an unsuccessful file read operation and the error type is assigned to the variable error.

37
00:04:13,000 --> 00:04:19,999
Now let's run this code and see what happens.  We'll call File.read, giving it an existing file,

38
00:04:20,000 --> 00:04:27,999
transactions.csv.  We'll pipe the result of this function call to our newly created Account.parse file function.

39
00:04:28,000 --> 00:04:33,999
Remember how the pipe operator works?  In this case the return value from the call to File.read will become

40
00:04:34,000 --> 00:04:42,999
the first and only argument to Account.parse file.  The result tuple matches the first clause with the ok atom

41
00:04:43,000 --> 00:04:50,999
and we see a list of transactions printed to the console.  Now when we run this code, giving File.read

42
00:04:51,000 --> 00:04:58,999
a file path that does not exist, the return value will be a tuple with the error atom as its first element.

43
00:04:59,000 --> 00:05:05,999
This matches the second clause of the parse_file function and we see the message Error parsing file printed

44
00:05:06,000 --> 00:05:12,999
to the console.  Notice, however, that above the message we also see a warning saying that the error variable

45
00:05:13,000 --> 00:05:18,999
is not being used.  Now warnings will not stop our programs from running, but it's best that we tackle them

46
00:05:19,000 --> 00:05:26,999
as soon as possible to prevent future issues from happening.

47
00:05:27,000 --> 00:05:32,999
To remove this warning we can use the underscore character.  This character is used to explicitly ignore

48
00:05:33,000 --> 00:05:39,999
unused values and avoid compiler warnings.  Now our program simply prints the message Error parsing file

49
00:05:40,000 --> 00:05:47,999
and we have no compiler warnings.

50
00:05:48,000 --> 01:00:00,000
And that's it for this first section.  Now it's you turn to practice some tuples in the challenges.
