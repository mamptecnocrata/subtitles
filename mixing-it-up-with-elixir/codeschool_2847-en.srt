1
00:00:00,000 --> 00:00:08,999
Gather all the elements to learn Elixir with our guidance.  Functional programs you will code,

2
00:00:09,000 --> 00:00:25,999
turning the knowledge into gold.  Become a master mixer as you stir it all up with Elixir.

3
00:00:26,000 --> 00:00:29,999
You're watching Mixing It Up With Elixir.  I'm Carlos Sosa and in this section we'll learn how to use

4
00:00:30,000 --> 00:00:37,999
the mix tool to run tasks and keep our elixir projects organized.

5
00:00:38,000 --> 00:00:44,999
Keeping a well organized project and adopting a standard for project organization can help in many ways.

6
00:00:45,000 --> 00:00:51,999
Here are three major benefits.  First, it makes it easier for us developers to navigate project files.

7
00:00:52,000 --> 00:00:57,999
We can find existing files easier and spend little time figuring out where to place newly created files.

8
00:00:58,000 --> 00:01:03,999
It facilitates collaboration from other developers on the team by allowing conversations to revolve around

9
00:01:04,000 --> 00:01:10,999
the core logic of the application rather than on naming conventions, directory structure, and what not.

10
00:01:11,000 --> 00:01:17,999
And having a standard structure across different Elixir projects facilitates onboarding new members to the team.

11
00:01:18,000 --> 00:01:25,999
Being already familiar with the structure of the project, new members can start being productive in little time.

12
00:01:26,000 --> 00:01:33,999
Elixir ships with a tool called Mix, a build tool which provides tasks for compiling, running, testing Elixir

13
00:01:34,000 --> 00:01:41,999
projects, managing third party dependencies and more.  To create a new Elixir project using Mix, we run

14
00:01:42,000 --> 00:01:46,999
mix new from the command line followed by the name of the project.

15
00:01:47,000 --> 00:01:51,999
Mix will create a new directory with an initial set of files and subdirectories, just enough to get started

16
00:01:52,000 --> 00:02:02,999
with a well structured Elixir project.  Now let's go ahead and implement a simple function on our newly created project.

17
00:02:03,000 --> 00:02:06,999
We'll define a new function called current_balance, part of the Budget module.

18
00:02:07,000 --> 00:02:13,999
This module was created for us by the mix new command.  The name of the module and the file name where it lives,

19
00:02:14,000 --> 00:02:17,999
under the lib folder, were inferred by the argument given to the mix new command.

20
00:02:18,000 --> 00:02:27,999
The current_balance function takes two arguments, initial and spending, and returns the subtraction of spending from initial.

21
00:02:28,000 --> 00:02:31,999
To run this function from the command line we can use the mix run command.

22
00:02:32,000 --> 00:02:39,999
The -e option tells mix run to evaluate a given code in the context of the application.

23
00:02:40,000 --> 00:02:47,999
We run this command, passing it the call to Budget.current_balance with two arguments, 100 and 20, and then

24
00:02:48,000 --> 00:02:53,999
piping the result to IO.puts.  We see the result printed to the console, 80.

25
00:02:54,000 --> 00:02:58,999
Notice that before the actual result, there's a message saying compiling 1 file.

26
00:02:59,000 --> 00:03:06,999
Now this compilation from Elixir's source code to bytecode is also part of the mix run command.

27
00:03:07,000 --> 00:03:12,999
Here's what this command does.  First it compiles the application generating bytecode.

28
00:03:13,000 --> 00:03:17,999
Next it loads the generated bytecode into the Erlang Virtual Machine.

29
00:03:18,000 --> 00:03:26,999
Then it detects the -e option and evaluates the argument given to it an Elixir code.

30
00:03:27,000 --> 00:03:31,999
Now the files that we've worked with so far have all been .exs.

31
00:03:32,000 --> 00:03:35,999
So what is up with this .ex type file?

32
00:03:36,000 --> 00:03:43,999
Both .ex and .exs file extensions are treated the same way, the difference is intention.

33
00:03:44,000 --> 00:03:49,999
.ex files generate production artifacts in the form of beam files.

34
00:03:50,000 --> 00:03:54,999
Examples include core logic modules found under the lib subdirectory.

35
00:03:55,000 --> 00:04:06,999
.exs files do not generate production artifacts and are used for scripting, like in configuration files and test files.

36
00:04:07,000 --> 00:04:13,999
Mix new and mix run are just the tip of the iceberg.  There are many other tasks available right out of the box.

37
00:04:14,000 --> 00:04:21,999
To see the list of all available tasks we can use the mix help command.

38
00:04:22,000 --> 01:00:00,000
That's it for this first section.  Now it's your turn to mix things up in the challenges.
