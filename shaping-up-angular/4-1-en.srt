1
00:00:00,196 --> 00:00:01,820
[SINGING] The
Flatlanders need to store

2
00:00:01,820 --> 00:00:04,790
to sell their gems and more -
and they need it really quick.

3
00:00:04,790 --> 00:00:06,510
Angular will do the trick.

4
00:00:06,510 --> 00:00:09,460
Directives set the
stage in your HTML page.

5
00:00:09,460 --> 00:00:12,310
Controllers give your wrap
the behavior that it lacks.

6
00:00:12,310 --> 00:00:14,525
Write expressions so that
you can add your data

7
00:00:14,525 --> 00:00:16,800
to the view. And modules
make connections

8
00:00:16,800 --> 00:00:18,320
with dependency injections.

9
00:00:18,320 --> 00:00:19,780
You're a scripting
connoisseur when

10
00:00:19,780 --> 00:00:22,870
shaping up with Angular JS.

11
00:00:28,126 --> 00:00:29,750
You're watching
Shaping Up With AngularJS

12
00:00:29,750 --> 00:00:31,290
and this is level
four where we're

13
00:00:31,290 --> 00:00:34,270
going to be talking about
using ng-include and creating

14
00:00:34,270 --> 00:00:37,630
our own custom directives.

15
00:00:37,630 --> 00:00:39,520
Jumping back into
our existing code,

16
00:00:39,520 --> 00:00:42,960
we have this snippet of
HTML where we print out

17
00:00:42,960 --> 00:00:46,470
the product name and
the product price.

18
00:00:46,470 --> 00:00:48,670
If there were multiple
places in our application--

19
00:00:48,670 --> 00:00:50,800
and let's assume
there are-- where

20
00:00:50,800 --> 00:00:54,030
we reuse this identical
piece of code,

21
00:00:54,030 --> 00:00:58,820
we may want to eliminate that
duplication by pulling it out

22
00:00:58,820 --> 00:01:00,510
into an HTML snippet.

23
00:01:00,510 --> 00:01:03,479
To do this first we'll pull out
that duplicate code into a new

24
00:01:03,479 --> 00:01:05,145
file that we'll name
product-title.html.

25
00:01:08,460 --> 00:01:11,250
Then inside of our
index.html we'll

26
00:01:11,250 --> 00:01:14,770
use the ng-include
directive, specifying

27
00:01:14,770 --> 00:01:17,052
the name of the file
we want to include.

28
00:01:17,052 --> 00:01:18,510
You'll notice here
that we're using

29
00:01:18,510 --> 00:01:21,120
double quotes and single quotes.

30
00:01:21,120 --> 00:01:23,790
That's because ng-include
is expecting a variable

31
00:01:23,790 --> 00:01:25,470
with the name of the file.

32
00:01:25,470 --> 00:01:28,380
If we want to pass a name
directly as a string,

33
00:01:28,380 --> 00:01:30,770
we've got to use
the single quotes

34
00:01:30,770 --> 00:01:33,010
inside of the double quotes.

35
00:01:33,010 --> 00:01:36,430
Once this file's included, you'll
see the generated HTML look

36
00:01:36,430 --> 00:01:37,400
something like this.

37
00:01:40,222 --> 00:01:42,180
So if we jump into our
browser, we can see here

38
00:01:42,180 --> 00:01:45,950
that nothing's changed, but the
way that our page is loading

39
00:01:45,950 --> 00:01:48,040
is slightly different.

40
00:01:48,040 --> 00:01:51,820
When our browser does a web
request it can only pull down

41
00:01:51,820 --> 00:01:55,560
one HTML file, that's
going to be the index.

42
00:01:55,560 --> 00:01:57,726
It's going to pull
that down and it's

43
00:01:57,726 --> 00:01:59,230
going to load everything up.

44
00:01:59,230 --> 00:02:01,900
And then when it gets
to that ng-include

45
00:02:01,900 --> 00:02:05,860
it gives it the name of
a file or even a URL.

46
00:02:05,860 --> 00:02:08,560
And it's actually going to
be doing an AJAX request back

47
00:02:08,560 --> 00:02:12,190
to the server to pull down
the contents of that file

48
00:02:12,190 --> 00:02:13,995
and load it into the page.

49
00:02:16,910 --> 00:02:18,800
Using ng-include
works but there's

50
00:02:18,800 --> 00:02:21,840
a preferable way when we
want to include a template.

51
00:02:21,840 --> 00:02:24,670
And that's by using
a custom directive.

52
00:02:24,670 --> 00:02:26,819
It might look
something like this.

53
00:02:26,819 --> 00:02:29,360
There's a little more code we
have to write behind the scenes

54
00:02:29,360 --> 00:02:31,170
to make it work,
but this is what

55
00:02:31,170 --> 00:02:34,590
it would look like
inside your index.html.

56
00:02:34,590 --> 00:02:37,120
Why should you write
a directive instead?

57
00:02:37,120 --> 00:02:41,170
Well, directives are part of
the secret sauce of AngularJS

58
00:02:41,170 --> 00:02:43,690
because they allow
you to write HTML

59
00:02:43,690 --> 00:02:47,270
that expresses behavior
of your application.

60
00:02:47,270 --> 00:02:50,755
Typically, HTML only tells
you about the structure.

61
00:02:50,755 --> 00:02:53,510
It doesn't tell you what
your application does.

62
00:02:53,510 --> 00:02:56,280
But if you look at a
typical AngularJS application,

63
00:02:56,280 --> 00:02:58,920
like this one, even
though you've never

64
00:02:58,920 --> 00:03:01,880
seen this application
before or even played

65
00:03:01,880 --> 00:03:04,350
with it on your browser,
I bet you can still

66
00:03:04,350 --> 00:03:06,440
understand what it does.

67
00:03:12,190 --> 00:03:14,610
So expressiveness
is the real power

68
00:03:14,610 --> 00:03:16,329
of writing custom directives.

69
00:03:16,329 --> 00:03:17,870
And there are several
different types

70
00:03:17,870 --> 00:03:19,870
of directives you can use.

71
00:03:19,870 --> 00:03:22,580
First, there's template-expanding directives.

72
00:03:22,580 --> 00:03:24,250
Those are the simplest ones.

73
00:03:24,250 --> 00:03:26,700
We define a custom
tag or attribute

74
00:03:26,700 --> 00:03:29,100
which expands and
shows a template,

75
00:03:29,100 --> 00:03:30,860
like an ng-include would.

76
00:03:30,860 --> 00:03:32,960
These can also include
controller logic.

77
00:03:32,960 --> 00:03:36,560
Directives can also be used
for expressing complex UIs,

78
00:03:36,560 --> 00:03:39,370
calling events,
registering event handlers,

79
00:03:39,370 --> 00:03:41,322
and reusing common components.

80
00:03:41,322 --> 00:03:43,030
But for this course,
we're going to stick

81
00:03:43,030 --> 00:03:47,260
to the first most basic way
to use a custom directive.

82
00:03:47,260 --> 00:03:50,080
To make this product title
custom directive work,

83
00:03:50,080 --> 00:03:54,450
we need to define this directive
from inside our app.js.

84
00:03:54,450 --> 00:03:57,830
We'll write app.directive
specify "productTitle"

85
00:03:57,830 --> 00:04:00,970
and the second argument is going
to be an anonymous function, which

86
00:04:00,970 --> 00:04:05,100
returns a directive
definition object.

87
00:04:05,100 --> 00:04:06,830
This is basically
a configuration

88
00:04:06,830 --> 00:04:10,460
defining how your
directive is going to work.

89
00:04:10,460 --> 00:04:14,525
You might also have noticed
here that the dash in the HTML

90
00:04:14,525 --> 00:04:20,310
of the directive will translate
to camelCase in JavaScript when

91
00:04:20,310 --> 00:04:22,170
we define the directive.

92
00:04:22,170 --> 00:04:24,010
We'll want to declare
two configuration

93
00:04:24,010 --> 00:04:25,200
options for this directive.

94
00:04:25,200 --> 00:04:28,470
The first is
restrict 'E'.  This is

95
00:04:28,470 --> 00:04:31,560
where we specify the
type of directive.

96
00:04:31,560 --> 00:04:34,650
In this case E
stands for element,

97
00:04:34,650 --> 00:04:37,990
since we're declaring
a new HTML element.

98
00:04:37,990 --> 00:04:40,390
Then we'll specify
the URL of a template

99
00:04:40,390 --> 00:04:43,400
we want this directive
to load into the page.

100
00:04:43,400 --> 00:04:47,230
In this case, just
"product-title.html" Then,

101
00:04:47,230 --> 00:04:50,600
when we use this directive,
it'll simply render out

102
00:04:50,600 --> 00:04:52,310
the template into
our index.html.

103
00:04:55,420 --> 00:04:57,850
Now if we jump into the web
page, it should look the same.

104
00:04:57,850 --> 00:05:01,030
Which it does, but this time
it's using the directive

105
00:05:01,030 --> 00:05:04,740
and our HTML is more expressive.

106
00:05:04,740 --> 00:05:08,310
Directives in AngularJS can either
be elements like you see here.

107
00:05:08,310 --> 00:05:10,920
And notice, we're not
using a self-closing tag.

108
00:05:10,920 --> 00:05:12,960
You might be
wondering about that.

109
00:05:12,960 --> 00:05:15,230
We don't want to use
a self-closing tag

110
00:05:15,230 --> 00:05:18,920
because some browsers don't
like self-closing tags when

111
00:05:18,920 --> 00:05:20,720
using custom elements.

112
00:05:20,720 --> 00:05:22,610
So that's why we're
not using one.

113
00:05:22,610 --> 00:05:25,460
If we wanted to write this
directive as an attribute

114
00:05:25,460 --> 00:05:27,710
directive, it might
look like this.

115
00:05:27,710 --> 00:05:30,870
Where we specify
product-title as an attribute

116
00:05:30,870 --> 00:05:32,930
inside an h3 element.

117
00:05:32,930 --> 00:05:35,570
It's best practice to use an
element directive when you're

118
00:05:35,570 --> 00:05:40,400
doing things like UI widgets and
attribute style directives when

119
00:05:40,400 --> 00:05:44,920
you have things like mixins,
which add behaviors to HTML,

120
00:05:44,920 --> 00:05:48,600
like maybe a tool tip.

121
00:05:48,600 --> 00:05:51,830
If we wanted to use a
directive attribute instead,

122
00:05:51,830 --> 00:05:54,340
our definition would
look slightly different.

123
00:05:54,340 --> 00:05:57,730
We'd specify
restrict 'A' because

124
00:05:57,730 --> 00:06:00,521
in this case, A
stands for attribute.

125
00:06:00,521 --> 00:06:02,770
And then we could properly
use an attribute directive.

126
00:06:11,250 --> 00:06:14,256
When you pick up the source
for somebody's web application,

127
00:06:14,256 --> 00:06:15,630
do you think you
could understand

128
00:06:15,630 --> 00:06:20,240
the behavior of the application
just by reading the HTML?

129
00:06:20,240 --> 00:06:22,510
Typically not.

130
00:06:22,510 --> 00:06:26,810
This is why AngularJS
is so awesome.

131
00:06:26,810 --> 00:06:30,290
It allows you to
write expressive HTML

132
00:06:30,290 --> 00:06:32,550
through custom directives.

133
00:06:32,550 --> 00:06:34,970
So that people
can read your HTML

134
00:06:34,970 --> 00:06:38,540
and understand the behavior
and intent of your application.

135
00:06:42,520 --> 00:06:45,410
Time for you to write your
first custom directives.

136
00:06:45,410 --> 00:06:47,365
I hope you're excited.

137
00:06:47,365 --> 00:06:50,020
And I'll see you in
the next section.

