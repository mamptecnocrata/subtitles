1
00:00:00,000 --> 00:00:05,000
[Initial 27 seconds not captioned.  An update is planned!]

2
00:00:27,390 --> 00:00:29,020
[SINGING] The
Flatlanders need to store

3
00:00:29,020 --> 00:00:31,990
to sell their gems and more -
and they need it really quick.

4
00:00:31,990 --> 00:00:33,710
Angular will do the trick.

5
00:00:33,710 --> 00:00:36,660
Directives set the
stage in your HTML page.

6
00:00:36,660 --> 00:00:39,510
Controllers give your wrap
the behavior that it lacks.

7
00:00:39,510 --> 00:00:41,720
Write expressions so that
you can add your data

8
00:00:41,720 --> 00:00:44,000
to the view. And modules
make connections

9
00:00:44,000 --> 00:00:45,520
with dependency injections.

10
00:00:45,520 --> 00:00:46,980
You're a scripting
connoisseur when

11
00:00:46,980 --> 00:00:50,070
shaping up with Angular JS.

12
00:00:55,490 --> 00:00:57,470
Welcome to Shaping
Up With AngularJS.

13
00:00:57,470 --> 00:00:59,060
I'm Gregg Pollack,
and in Level One

14
00:00:59,060 --> 00:01:00,520
we'll be giving
you an introduction

15
00:01:00,520 --> 00:01:04,060
to what is AngularJS. We'll
show you the application we'll

16
00:01:04,060 --> 00:01:05,820
be building together
in this course,

17
00:01:05,820 --> 00:01:08,970
and then introducing you to the
core elements of any AngularJS

18
00:01:08,970 --> 00:01:10,440
application.

19
00:01:10,440 --> 00:01:12,290
In order to learn
AngularJS, it's important

20
00:01:12,290 --> 00:01:15,270
that you're very familiar
with HTML and CSS,

21
00:01:15,270 --> 00:01:17,090
as well as JavaScript.

22
00:01:17,090 --> 00:01:18,720
If you're not familiar
with JavaScript,

23
00:01:18,720 --> 00:01:21,400
Code School's got a great
course JavaScript Road

24
00:01:21,400 --> 00:01:23,790
Trip, which you
should go check out.

25
00:01:23,790 --> 00:01:26,710
It's also nice if you
know some testing tools.

26
00:01:26,710 --> 00:01:29,700
Behavior Driven Development,
Test-Driven Development,

27
00:01:29,700 --> 00:01:32,450
because AngularJS is
really easy to test.

28
00:01:32,450 --> 00:01:35,970
And you should be doing that
in a professional application.

29
00:01:35,970 --> 00:01:38,660
Not so important, you
don't need to know jQuery,

30
00:01:38,660 --> 00:01:42,260
Ruby on Rails, Python, PHP,
or any of those back end

31
00:01:42,260 --> 00:01:43,430
frameworks.

32
00:01:43,430 --> 00:01:45,240
AngularJS is just a
front end framework,

33
00:01:45,240 --> 00:01:48,420
so all you need to
know is JavaScript.

34
00:01:48,420 --> 00:01:50,770
You may want to use AngularJS
when you're using JavaScript

35
00:01:50,770 --> 00:01:53,800
to build any sort
of dynamic website.

36
00:01:53,800 --> 00:01:57,370
AngularJS is going to help you
organize your JavaScript code.

37
00:01:57,370 --> 00:02:00,100
It's going to help you
create responsive websites,

38
00:02:00,100 --> 00:02:03,650
meaning they're fast, they
respond quickly to user input.

39
00:02:03,650 --> 00:02:06,200
Also, if you're
familiar with jQuery,

40
00:02:06,200 --> 00:02:08,800
AngularJS plays really
well with jQuery.

41
00:02:08,800 --> 00:02:10,790
And it's also, as
I mentioned before,

42
00:02:10,790 --> 00:02:12,930
really easy to test,
which means you

43
00:02:12,930 --> 00:02:16,420
can create
maintainable software.

44
00:02:16,420 --> 00:02:18,310
Let's dive a little
deeper into this word

45
00:02:18,310 --> 00:02:20,920
"responsive" and see what I mean.

46
00:02:20,920 --> 00:02:22,670
So here's the Code
School website.

47
00:02:22,670 --> 00:02:26,920
And you'll see that when I click
on a link like, screencasts,

48
00:02:26,920 --> 00:02:31,350
the page goes blank for second,
and then reloads that page.

49
00:02:31,350 --> 00:02:32,940
And then I click
on something else,

50
00:02:32,940 --> 00:02:35,480
and it goes, and it processes,
and brings up something,

51
00:02:35,480 --> 00:02:37,200
and I get to see that page.

52
00:02:37,200 --> 00:02:41,800
This is a traditional page
refresh response cycle,

53
00:02:41,800 --> 00:02:46,260
but what's going on
behind the curtains?

54
00:02:46,260 --> 00:02:50,240
So here we have our
browser and our web server.

55
00:02:50,240 --> 00:02:52,940
And our browser's going
to initiate a request

56
00:02:52,940 --> 00:02:53,970
to our server.

57
00:02:53,970 --> 00:02:56,870
The server responds with the
web pages and assets, the HTML

58
00:02:56,870 --> 00:03:00,510
and JavaScript, and our browser
loads of the entire web page.

59
00:03:00,510 --> 00:03:02,270
But when the user
clicks on a link,

60
00:03:02,270 --> 00:03:04,450
initiates a new
request, and the server

61
00:03:04,450 --> 00:03:07,380
responds with a new
web page and assets,

62
00:03:07,380 --> 00:03:11,160
the browser to load up
the entire web page again.

63
00:03:11,160 --> 00:03:16,250
Obviously, laid out like this,
it's not quite efficient.

64
00:03:16,250 --> 00:03:18,540
So now here's an
example of a web page

65
00:03:18,540 --> 00:03:20,460
I would call responsive.

66
00:03:20,460 --> 00:03:23,410
This is our recent
Discover Drive course.

67
00:03:23,410 --> 00:03:27,380
You'll see when I
click around this page,

68
00:03:27,380 --> 00:03:32,780
the page refresh is
almost unnoticeable.

69
00:03:32,780 --> 00:03:36,150
The pages so responsive
and quick every time

70
00:03:36,150 --> 00:03:38,370
we click on a link.

71
00:03:38,370 --> 00:03:39,560
So what's going on here?

72
00:03:39,560 --> 00:03:43,710
Well, behind the curtains when
a request is first fired off,

73
00:03:43,710 --> 00:03:46,500
the server responds back with
all the web page and assets,

74
00:03:46,500 --> 00:03:48,000
as you might expect,
and the browser

75
00:03:48,000 --> 00:03:50,550
loads up the entire webpage.

76
00:03:50,550 --> 00:03:52,400
This time, when a
user clicks a link,

77
00:03:52,400 --> 00:03:54,650
something different
is going to happen.

78
00:03:54,650 --> 00:03:56,570
It's only going to
request the information

79
00:03:56,570 --> 00:03:59,410
it needs to update the page.

80
00:03:59,410 --> 00:04:02,500
In this case, just
some JSON data.

81
00:04:02,500 --> 00:04:04,370
Once our browser
has this data, it's

82
00:04:04,370 --> 00:04:06,700
going to load it into
the existing page,

83
00:04:06,700 --> 00:04:10,380
and update what we
see on our browser.

84
00:04:10,380 --> 00:04:12,040
An increasing number
of applications

85
00:04:12,040 --> 00:04:14,930
these days are building
their own APIs.

86
00:04:14,930 --> 00:04:17,680
They might do this to interface
with a mobile application,

87
00:04:17,680 --> 00:04:19,470
say on iOS.

88
00:04:19,470 --> 00:04:22,500
They might also build an API so
that other developers can build

89
00:04:22,500 --> 00:04:26,170
applications that communicate
with their application.

90
00:04:26,170 --> 00:04:29,700
They might also built APIs
to communicate with front-end

91
00:04:29,700 --> 00:04:33,120
applications, like
the application we're

92
00:04:33,120 --> 00:04:35,960
building in this
course using AngularJS.

93
00:04:35,960 --> 00:04:38,390
So in this course, we'll
be building a front-end

94
00:04:38,390 --> 00:04:41,670
application using AngularJS,
which will communicate

95
00:04:41,670 --> 00:04:43,470
with a back-end application.

96
00:04:43,470 --> 00:04:45,470
But we're not going to
be building that back-end

97
00:04:45,470 --> 00:04:49,090
application, we're just going
to focus on the front-end.

98
00:04:49,090 --> 00:04:52,510
A simple definition of AngularJS
is a client-side JavaScript

99
00:04:52,510 --> 00:04:56,690
framework for adding
interactivity to HTML.

100
00:04:56,690 --> 00:05:01,160
We need to figure out
how to tell our HTML when

101
00:05:01,160 --> 00:05:03,070
to trigger our JavaScript.

102
00:05:03,070 --> 00:05:05,650
So here we have some
HTML, how might we

103
00:05:05,650 --> 00:05:08,980
tell it to call this function,
which triggers an alert?

104
00:05:08,980 --> 00:05:13,420
In AngularJS we add behavior to
our HTML through directives.

105
00:05:13,420 --> 00:05:16,290
A directive as a marker
on an HTML tag that tells

106
00:05:16,290 --> 00:05:20,210
AngularJS to run or reference
some JavaScript code.

107
00:05:20,210 --> 00:05:24,060
So the answer here is to add
the attribute ng-controller

108
00:05:24,060 --> 00:05:27,880
to our body tag, setting
it equal to "StoreController"

109
00:05:27,880 --> 00:05:30,010
which is the name
of our function.

110
00:05:30,010 --> 00:05:34,200
And if we loaded this up,
we might get this alert.

111
00:05:34,200 --> 00:05:36,490
Obviously, this is a
really contrived example,

112
00:05:36,490 --> 00:05:39,650
and you would never actually
write this AngularJS code,

113
00:05:39,650 --> 00:05:41,190
but you get the gist of it.

114
00:05:41,190 --> 00:05:44,400
Directives, it's how
we bind the behavior.

115
00:05:44,400 --> 00:05:46,070
The application
we'll be building

116
00:05:46,070 --> 00:05:49,880
in the rest of this course
is our Flatlander's store.

117
00:05:49,880 --> 00:05:51,790
In it you can see we
have several thumbnails

118
00:05:51,790 --> 00:05:54,020
of different products.

119
00:05:54,020 --> 00:05:57,840
We can tab through different
information about each of them

120
00:05:57,840 --> 00:06:00,690
and we have reviews.

121
00:06:00,690 --> 00:06:02,510
You'll see a list of
reviews and we'll even

122
00:06:02,510 --> 00:06:06,950
be able to submit our own
review using this form here.

123
00:06:06,950 --> 00:06:09,370
The first step, if you want
to start playing with AngularJS,

124
00:06:09,370 --> 00:06:13,440
is to download the library
from the official website.

125
00:06:13,440 --> 00:06:15,950
In the application we'll
be building in this course,

126
00:06:15,950 --> 00:06:18,580
we're going to be using Twitter
Bootstrap, which you also

127
00:06:18,580 --> 00:06:23,560
might want to download, and
feel free to follow along.

128
00:06:23,560 --> 00:06:25,670
Let's start coding up our HTML.

129
00:06:25,670 --> 00:06:29,330
You can see here we've included
the CSS for Twitter Bootstrap

130
00:06:29,330 --> 00:06:31,420
and we've included the
AngularJS library, which

131
00:06:31,420 --> 00:06:34,500
we downloaded as well.

132
00:06:34,500 --> 00:06:36,540
The next component of
our AngularJS application

133
00:06:36,540 --> 00:06:39,810
that we need to learn
about is modules.

134
00:06:39,810 --> 00:06:42,010
Modules are where
we write pieces

135
00:06:42,010 --> 00:06:43,910
of our AngularJS application.

136
00:06:43,910 --> 00:06:46,710
It's how we keep our
code encapsulated.

137
00:06:46,710 --> 00:06:49,740
Because of this, it makes
our code more maintainable,

138
00:06:49,740 --> 00:06:53,020
more readable,
and more testable.

139
00:06:53,020 --> 00:06:56,060
Also, it's where we define
all of the dependencies

140
00:06:56,060 --> 00:06:57,600
for our application.

141
00:06:57,600 --> 00:07:00,820
Because we might run one
module and we can tell our code

142
00:07:00,820 --> 00:07:04,380
this module depends
on these two modules.

143
00:07:04,380 --> 00:07:07,030
So it shouldn't surprise you
that the very piece of code

144
00:07:07,030 --> 00:07:11,060
that you write in
AngularJS is a module line.

145
00:07:11,060 --> 00:07:14,720
So we're going to right var
app - that's our application -

146
00:07:14,720 --> 00:07:19,630
equals angular - that's the
AngularJS library - dot module -

147
00:07:19,630 --> 00:07:21,460
because we're
creating a new module.

148
00:07:21,460 --> 00:07:22,480
We give it a name -

149
00:07:22,480 --> 00:07:24,350
In this case, "store."

150
00:07:24,350 --> 00:07:29,560
And then, in that little arrays
syntax, we define dependencies.

151
00:07:29,560 --> 00:07:31,610
We don't have any
dependencies yet,

152
00:07:31,610 --> 00:07:35,130
but we still have to
send in an empty array.

153
00:07:35,130 --> 00:07:38,730
Because that's how we roll.

154
00:07:38,730 --> 00:07:43,170
This piece of code is going
to live inside an app.js file.

155
00:07:43,170 --> 00:07:46,540
So we're going to need to
include that in our HTML,

156
00:07:46,540 --> 00:07:48,210
as you can see right here.

157
00:07:48,210 --> 00:07:52,000
Then we'll need to add an
attribute to our HTML tag.

158
00:07:52,000 --> 00:07:53,210
In this case, ng-app equals "store."

159
00:07:55,900 --> 00:07:59,680
ng-app, remember, is
another directive.

160
00:07:59,680 --> 00:08:02,610
This directive creates
an AngularJS application

161
00:08:02,610 --> 00:08:06,650
by running this module
when the document loads.

162
00:08:06,650 --> 00:08:10,770
The module isn't doing anything
yet, but just by including it,

163
00:08:10,770 --> 00:08:14,720
it's going to treat the
HTML inside of this element

164
00:08:14,720 --> 00:08:16,720
as part of the AngularJS app.

165
00:08:16,720 --> 00:08:21,160
And this means we can
start writing expressions.

166
00:08:21,160 --> 00:08:25,920
Expressions are how we insert
dynamic values into our HTML.

167
00:08:25,920 --> 00:08:29,460
Here's some basic ones just
using numerical operations.

168
00:08:29,460 --> 00:08:34,750
So if we say "I am 4 + 6," that's
going to render out on the page

169
00:08:34,750 --> 00:08:36,590
as "I am 10."

170
00:08:36,590 --> 00:08:38,290
We can also do
string operations.

171
00:08:38,290 --> 00:08:40,380
Saying "hello" +
"you" and that's

172
00:08:40,380 --> 00:08:44,360
going to evaluate to "hello
you," as you might expect.

173
00:08:44,360 --> 00:08:46,190
We'll be using lots
of expressions inside

174
00:08:46,190 --> 00:08:48,800
of our AngularJS application,
but for more examples

175
00:08:48,800 --> 00:08:49,780
check out this URL.

176
00:08:52,790 --> 00:08:57,750
So if I move "hello you" into
our AngularJS application,

177
00:08:57,750 --> 00:09:00,820
and I load it up
locally in my browser,

178
00:09:00,820 --> 00:09:05,020
I'm going to get "hello you,"
just as you might expect.

179
00:09:05,020 --> 00:09:10,450
So we learned about directives,
modules, and expressions.

180
00:09:10,450 --> 00:09:12,350
Why don't you try
putting them all together

181
00:09:12,350 --> 00:09:15,870
in the challenges and I'll
see you in the next section.
