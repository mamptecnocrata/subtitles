1
00:00:02,050 --> 00:00:02,960
Welcome back.

2
00:00:02,960 --> 00:00:05,110
Let's learn about a
couple new directives.

3
00:00:05,110 --> 00:00:08,380
There's a bunch of them
and they're really useful.

4
00:00:08,380 --> 00:00:11,360
Here you can see we're
inside of our index.html

5
00:00:11,360 --> 00:00:13,980
and we have our gem data.

6
00:00:13,980 --> 00:00:18,880
Let's add a new key in value
to our gem called canPurchase.

7
00:00:18,880 --> 00:00:22,645
We'll set it to false because
we can't purchase this gem.

8
00:00:22,645 --> 00:00:24,840
Then inside of our
index.html there's

9
00:00:24,840 --> 00:00:27,840
a button there
called "Add to Cart."

10
00:00:27,840 --> 00:00:32,980
And we only want that to show
up when canPurchase is true.

11
00:00:32,980 --> 00:00:37,460
How might we use a directive
to create this behavior?

12
00:00:37,460 --> 00:00:40,680
So here we'll use
the ng-show directive

13
00:00:40,680 --> 00:00:43,390
and specify an expression.

14
00:00:43,390 --> 00:00:45,815
That expression is going to
be store.product.canPurchase.

15
00:00:49,410 --> 00:00:51,370
This directive is
telling our button

16
00:00:51,370 --> 00:00:57,860
to only show if the value
of its expression is true.

17
00:00:57,860 --> 00:00:59,650
In our case, it's false.

18
00:00:59,650 --> 00:01:04,177
So that button element
won't show up on the page.

19
00:01:04,177 --> 00:01:06,260
So here we are in our webpage
 and as you can see,

20
00:01:06,260 --> 00:01:08,880
there's no "Add to Cart" button.

21
00:01:08,880 --> 00:01:11,620
However, if we go
back into our code,

22
00:01:11,620 --> 00:01:17,470
change canPurchase to
true, and refresh the page,

23
00:01:17,470 --> 00:01:20,500
you'll see now it's there.

24
00:01:20,500 --> 00:01:22,160
What would happen,
though, if we didn't

25
00:01:22,160 --> 00:01:26,780
have a canPurchase property
on our current gem?

26
00:01:26,780 --> 00:01:29,530
Well, AngularJS is nice
enough to interpret

27
00:01:29,530 --> 00:01:32,530
that as a false-y value.

28
00:01:32,530 --> 00:01:34,610
So even without that property it's

29
00:01:34,610 --> 00:01:39,400
not going to show the
"Add to Cart" button.

30
00:01:39,400 --> 00:01:41,450
Let's add another
property to our gem.

31
00:01:41,450 --> 00:01:43,620
We'll call it "soldOut."

32
00:01:43,620 --> 00:01:45,600
And if  soldOut is
true, we don't want

33
00:01:45,600 --> 00:01:49,540
to show the product
on the page at all.

34
00:01:49,540 --> 00:01:52,470
So we're going to use the
directive ng-show again.

35
00:01:52,470 --> 00:01:54,885
We can say ng-show equals
not store.product.soldOut.

36
00:01:58,156 --> 00:01:59,530
Now there's another
way we can do

37
00:01:59,530 --> 00:02:01,920
this, which is a little
bit more readable by using

38
00:02:01,920 --> 00:02:05,050
the ng-hide directive.

39
00:02:05,050 --> 00:02:10,550
So we can use ng-hide
store.product.soldOut.

40
00:02:10,550 --> 00:02:14,740
So it's saying hide this
product when we're sold out.

41
00:02:14,740 --> 00:02:17,610
And the HTML is a
little more readable.

42
00:02:17,610 --> 00:02:19,590
What good is a store
without multiple products?

43
00:02:19,590 --> 00:02:21,090
We only got one.

44
00:02:21,090 --> 00:02:24,140
So let's jump back
into our app.js

45
00:02:24,140 --> 00:02:27,600
and change gem into gems.

46
00:02:27,600 --> 00:02:29,870
And you'll notice
here, now we have array

47
00:02:29,870 --> 00:02:31,670
with a little bracket.

48
00:02:31,670 --> 00:02:36,710
And now our products
are equal to gems.

49
00:02:36,710 --> 00:02:37,610
Cool.

50
00:02:37,610 --> 00:02:40,170
But how are we going to display
all these products inside

51
00:02:40,170 --> 00:02:42,980
of our index.html?

52
00:02:42,980 --> 00:02:45,010
Maybe a directive?

53
00:02:45,010 --> 00:02:48,460
If you think so,
maybe you're right.

54
00:02:48,460 --> 00:02:51,040
Let's check it out.

55
00:02:51,040 --> 00:02:54,340
So back in our index.html
we can print out

56
00:02:54,340 --> 00:02:56,160
each of these
products to the screen

57
00:02:56,160 --> 00:03:00,400
by accessing their array
index, as you see here.

58
00:03:00,400 --> 00:03:03,340
But this is not very
dynamic, just listing out

59
00:03:03,340 --> 00:03:07,320
each of the products using
their arrays indexes.

60
00:03:07,320 --> 00:03:10,630
So, let's use a
directive to iterate

61
00:03:10,630 --> 00:03:14,940
through each of the
items in the array.

62
00:03:14,940 --> 00:03:18,430
To do this we'll use
the ng-repeat directive.

63
00:03:18,430 --> 00:03:23,270
The ng-repeat directive takes
a special AngularJS expression.

64
00:03:23,270 --> 00:03:28,800
In this case, we're saying
product in store.products.

65
00:03:28,800 --> 00:03:32,280
store.products is the array
we want to iterate through.

66
00:03:32,280 --> 00:03:37,280
Inside of this element product
refers to the current product,

67
00:03:37,280 --> 00:03:40,020
and we can print out
all of its properties.

68
00:03:40,020 --> 00:03:43,570
And this will get repeated for
as many products as we have.

69
00:03:43,570 --> 00:03:45,560
So now if we jump
into our browser,

70
00:03:45,560 --> 00:03:48,080
we can see that it shows
us all of the products.

71
00:03:51,500 --> 00:03:55,250
In this level we learned about
four core AngularJS concepts.

72
00:03:55,250 --> 00:03:56,770
We learned about
directives, which

73
00:03:56,770 --> 00:04:00,940
are HTML annotations that
trigger JavaScript behaviors.

74
00:04:00,940 --> 00:04:02,590
We learned about
modules, which is

75
00:04:02,590 --> 00:04:05,110
where our application
components live.

76
00:04:05,110 --> 00:04:06,970
We learned about
controllers, which

77
00:04:06,970 --> 00:04:09,940
is where we add
application behavior.

78
00:04:09,940 --> 00:04:12,160
And lastly, we learned
about expressions,

79
00:04:12,160 --> 00:04:16,860
which is how we get values
displayed onto our page.

80
00:04:16,860 --> 00:04:20,140
With this understanding I turn
you over to the challenges

81
00:04:20,140 --> 00:04:22,610
and I'll see you
in the next level.

82
00:04:22,610 --> 00:04:25,600
You try your hands at writing
a control, like this.

83
00:04:25,600 --> 00:04:27,230
Angular rocks my socks.

84
00:04:27,230 --> 00:04:29,820
Yes, ship it, done!

