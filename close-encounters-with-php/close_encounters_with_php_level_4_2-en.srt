1
00:00:00,000 --> 00:00:06,301
Welcome back.  In this section, we're going to learn about prepackaged

2
00:00:06,302 --> 00:00:11,073
bits of code known as libraries.

3
00:00:11,074 --> 00:00:14,554
We have good validation so far, but it can be improved.

4
00:00:14,555 --> 00:00:17,164
Let's take a look at some things that we might want.

5
00:00:17,165 --> 00:00:21,541
So if one of our items is missing, we need to report that back to the user.

6
00:00:21,542 --> 00:00:24,583
Same thing if the date is not formatted correctly.

7
00:00:24,584 --> 00:00:28,087
Also, the email, if it's not valid, we want to report that it's

8
00:00:28,088 --> 00:00:32,229
invalid to the user as well.  We can accomplish this with a PHP

9
00:00:32,230 --> 00:00:36,535
library, or package.

10
00:00:36,536 --> 00:00:40,328
A package is a collection of code that's meant to serve one purpose,

11
00:00:40,329 --> 00:00:44,120
and you can use it anywhere in your code.  Packages are always open

12
00:00:44,121 --> 00:00:47,552
source, which means that lots of developers can contribute,

13
00:00:47,553 --> 00:00:50,067
and they can evolve the package very quickly.

14
00:00:50,068 --> 00:00:54,223
PHP uses a package manager tool called Composer.

15
00:00:54,224 --> 00:00:57,571
Composer is going to allow us to define all of the packages that we

16
00:00:57,572 --> 00:01:02,505
need per project and then use those anywhere inside of our code.

17
00:01:02,506 --> 00:01:06,021
Let's start by installing Composer.

18
00:01:06,022 --> 00:01:10,277
To install Composer, we're going to need to spend some time in our terminal.

19
00:01:10,278 --> 00:01:13,759
I'm going to be using Mac OS for these examples, but all the other

20
00:01:13,760 --> 00:01:17,119
installation options are available at the link below.

21
00:01:17,120 --> 00:01:22,335
We're going to be using the PHP CLI, or command line interface to PHP.

22
00:01:22,336 --> 00:01:27,890
The first argument after php is -r, which runs PHP commands in the

23
00:01:27,891 --> 00:01:33,074
terminal without the use of any PHP tags.  Our first command here will

24
00:01:33,075 --> 00:01:40,449
download the installer and name it composer-setup.php.

25
00:01:40,450 --> 00:01:43,163
The next command is going to validate that this is the correct

26
00:01:43,164 --> 00:01:47,049
installer by comparing it against a hash.  Then we're going to run

27
00:01:47,050 --> 00:01:52,056
composer-setup.php as a script.  Then, after the install,

28
00:01:52,057 --> 00:01:56,702
we're going to run a command to unlink it or then delete the file from our system.

29
00:01:56,703 --> 00:02:00,762
The last step after install is to move the composer.phar file,

30
00:02:00,763 --> 00:02:06,534
or PHP single application file, to our user/local/bin folder and

31
00:02:06,535 --> 00:02:10,847
rename it to just composer.

32
00:02:10,848 --> 00:02:15,008
Now that Composer is installed, we can run it as a command in the terminal.

33
00:02:15,009 --> 00:02:17,865
We're going to search for a package by running the composer search

34
00:02:17,866 --> 00:02:21,571
command followed by a query string of validation.

35
00:02:21,572 --> 00:02:24,038
You can see here that we have several results.

36
00:02:24,039 --> 00:02:27,981
The one we want is respect/validation, which is the most awesome

37
00:02:27,982 --> 00:02:33,339
validation engine ever created for PHP.

38
00:02:33,340 --> 00:02:36,040
Now that we know the name of the package we want, we use another

39
00:02:36,041 --> 00:02:43,186
command called require.  So just type composer require followed by respect/validation.

40
00:02:43,187 --> 00:02:46,805
The require command is going to add the package to our composer.json

41
00:02:46,806 --> 00:02:51,678
file and then install it.

42
00:02:51,679 --> 00:02:55,570
The composer.json file is going to define for us what's needed inside

43
00:02:55,571 --> 00:02:59,007
of the project.  All new packages added to the project will be

44
00:02:59,008 --> 00:03:03,093
installed under the vendor directory in the root of our project.

45
00:03:03,094 --> 00:03:06,303
The validation package will be in a respect folder.

46
00:03:06,304 --> 00:03:08,587
The folders are related to the package name.

47
00:03:08,588 --> 00:03:12,783
In this case, respect/validation will be under the respect folder and

48
00:03:12,784 --> 00:03:16,575
then the validation folder.

49
00:03:16,576 --> 00:03:20,162
Let's take a look at our composer.json file, which is defining what we

50
00:03:20,163 --> 00:03:24,915
want as a package inside of our project.  Right now we only have one

51
00:03:24,916 --> 00:03:28,228
requirement, which is the respect/validation package.

52
00:03:28,229 --> 00:03:31,688
The caret symbol in front of our version number is a wildcard in

53
00:03:31,689 --> 00:03:36,125
Composer to tell us that we're okay with the next significant release.

54
00:03:36,126 --> 00:03:41,857
So far we only want a minimum of version 1.1.

55
00:03:41,858 --> 00:03:44,877
However, these wildcards can be very powerful.

56
00:03:44,878 --> 00:03:48,015
In this case where we're saying we want the next significant version

57
00:03:48,016 --> 00:03:58,628
of the release, we're able to have any release up to but not including version 2.0.

58
00:03:58,629 --> 00:04:02,694
We need a way to get our Composer packages into our application.

59
00:04:02,695 --> 00:04:06,473
We can do this with autoloading.  Inside of our Vendor folder,

60
00:04:06,474 --> 00:04:10,518
you'll notice that we have another file called autoload.php.

61
00:04:10,519 --> 00:04:14,031
This file by itself is going to load all of our packages that are in

62
00:04:14,032 --> 00:04:17,727
the Vendor folder and make them available inside of our project.

63
00:04:17,728 --> 00:04:20,341
All the files that we're going to need for this project are in the

64
00:04:20,342 --> 00:04:23,780
Respect folder, in the Validation folder, and then all the way down in

65
00:04:23,781 --> 00:04:28,321
a library folder.  But using our autoload.php, we don't have to worry about it.

66
00:04:28,322 --> 00:04:32,501
It will take care of all of that for us.

67
00:04:32,502 --> 00:04:37,327
Let's take a closer look at the line where we've used the autoload file.

68
00:04:37,328 --> 00:04:40,909
We're going to use a require statement followed by the magic constant

69
00:04:40,910 --> 00:04:45,012
DIR, and then we're going to go back two directories to our vendor

70
00:04:45,013 --> 00:04:51,365
folder autoload.php file.

71
00:04:51,366 --> 00:04:56,031
This will be placed at the top of our app.php file on the first line

72
00:04:56,032 --> 00:05:00,947
after the opening php block.  We can now use packages anywhere below,

73
00:05:00,948 --> 00:05:06,267
including in our custom validation file.

74
00:05:06,268 --> 00:05:11,574
We now have access to all the packages provided by Composer through autoloading.

75
00:05:11,575 --> 00:05:16,956
However, we need a keyword that we haven't seen before called use.

76
00:05:16,957 --> 00:05:22,561
Use will allow us to access our new Validation\Validator class.

77
00:05:22,562 --> 00:05:27,612
By writing the code use Respect\Valication\Validator, we now have

78
00:05:27,613 --> 00:05:31,788
access to the Validator class that's provided by Composer.

79
00:05:31,789 --> 00:05:35,171
This is different from the include because we've already included all

80
00:05:35,172 --> 00:05:39,300
the files by using the autoloader provided by Composer.

81
00:05:39,301 --> 00:05:46,749
Here we want access to a single class inside the Respect\Validation library.

82
00:05:46,750 --> 00:05:50,654
Now that we have access to the Respect\Validation\Validator class,

83
00:05:50,655 --> 00:05:54,709
we'll use the new keyword to create a new object.

84
00:05:54,710 --> 00:06:00,909
Here we create a variable called $v and then set it equal to new Validator.

85
00:06:00,910 --> 00:06:08,665
New is a keyword that creates a new object based off of the Validator class.

86
00:06:08,666 --> 00:06:12,120
This is all completely new to us, so let's use a var_dump to see

87
00:06:12,121 --> 00:06:18,114
what's inside of this new $v object.

88
00:06:18,115 --> 00:06:22,857
So it turns out that our $v is a Validator object with a protected set

89
00:06:22,858 --> 00:06:28,406
of rules in an array.  So what can we do with this Validator object?

90
00:06:28,407 --> 00:06:32,063
We can run validation commands with the validator to test against

91
00:06:32,064 --> 00:06:36,713
custom sets of rules.  Each validator can have a unique name.

92
00:06:36,714 --> 00:06:40,622
It can also have a template that allows us to customize error strings.

93
00:06:40,623 --> 00:06:47,183
Now we can add some custom rules to our rules array on the Validator.

94
00:06:47,184 --> 00:06:50,379
Let's take a quick look back over what we've learned in this section

95
00:06:50,380 --> 00:06:53,882
on Composer and autoloading.  We know that Composer is a package

96
00:06:53,883 --> 00:06:58,177
manager built for PHP.  We've used the command line interface to

97
00:06:58,178 --> 00:07:01,857
search for packages and install them into our application.

98
00:07:01,858 --> 00:07:06,484
We've got access to the package through the use of the autoload.php file.

99
00:07:06,485 --> 00:07:10,043
We've learned about the use keyword to access a class through a

100
00:07:10,044 --> 00:07:14,626
Namespace/ClassName pattern.  And we also have created a new validator

101
00:07:14,627 --> 00:07:19,448
instance with the new keyword.

102
00:07:19,449 --> 00:07:25,135
Let's jump in and do some challenges on Composer and autoloading.

103
00:07:25,136 --> 00:07:27,531
Riffs some (Noises).

104
00:07:27,532 --> 00:07:31,059
To help provide a base.  To help provide, provide.

105
00:07:31,060 --> 00:07:34,933
We need a way.  We need we.  We need a way, we need a way, we need a

106
00:07:34,934 --> 01:00:00,000
way, we need a way.  We need a way to get to packages in the com project.
