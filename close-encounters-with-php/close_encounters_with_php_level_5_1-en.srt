1
00:00:00,000 --> 00:00:06,975
We've got our eyes on the sky searching for PHP life.

2
00:00:06,976 --> 00:00:11,896
We'll use POST requests to track extraterrestrial guests.

3
00:00:11,897 --> 00:00:18,200
Validation and security will lock things down in a hurry.

4
00:00:18,201 --> 00:00:30,332
We want to believe these Close Encounters with PHP.

5
00:00:30,333 --> 00:00:34,416
Welcome back.  Let's take a look at object-oriented validation using

6
00:00:34,417 --> 00:00:38,211
the Validator class.

7
00:00:38,212 --> 00:00:41,561
Let's take a look at our validation class a bit closer.

8
00:00:41,562 --> 00:00:45,856
In the last section, we dumped the Validator object in $v.

9
00:00:45,857 --> 00:00:52,085
We've created an object by using $v = new Validator.

10
00:00:52,086 --> 00:00:56,288
New is a keyword that takes the class Validator and creates an object

11
00:00:56,289 --> 00:01:01,627
based off of that class, or the Validator class.

12
00:01:01,628 --> 00:01:05,644
You might be wondering what is a class?  A class is a way for us to

13
00:01:05,645 --> 00:01:10,552
group our code together providing a blueprint for a single purpose.

14
00:01:10,553 --> 00:01:15,142
These classes contain functions, variables, and constants.

15
00:01:15,143 --> 00:01:19,350
Functions are now called methods, variables are called properties,

16
00:01:19,351 --> 00:01:25,491
but the use is the same.  An object is an instance or a copy of the class.

17
00:01:25,492 --> 00:01:30,076
We usually name objects just like we do variables, and classes can

18
00:01:30,077 --> 00:01:35,005
have public or private properties.  Public items can be used anywhere,

19
00:01:35,006 --> 00:01:39,796
whereas private items can only be used within the class.

20
00:01:39,797 --> 00:01:43,787
To create an object, we've used the new keyword, which creates a

21
00:01:43,788 --> 00:01:49,199
single instance of the Validator class.

22
00:01:49,200 --> 00:01:52,923
Now that we have a validator object using the Validator class,

23
00:01:52,924 --> 00:01:56,871
how can we use that in our code?  We want to replace the code inside

24
00:01:56,872 --> 00:02:03,953
of our validate_date function using the Validator.

25
00:02:03,954 --> 00:02:06,919
The first part of the conditional that we want to replace is to test

26
00:02:06,920 --> 00:02:11,254
whether or not the date is empty or not.  We'll do that by using the

27
00:02:11,255 --> 00:02:16,851
Validator class and then using a method on the Validator class called validate.

28
00:02:16,852 --> 00:02:22,006
There's a lot going on here, so let's take closer look.

29
00:02:22,007 --> 00:02:25,250
The first part of this is the Validator class, which is a class that

30
00:02:25,251 --> 00:02:28,300
we required using the use statement above.

31
00:02:28,301 --> 00:02:33,040
The two colon symbols allows us to access the class's methods and

32
00:02:33,041 --> 00:02:38,429
properties without creating a new object.  This is called a static call.

33
00:02:38,430 --> 00:02:41,878
NotEmpty is a method on the Validator class.

34
00:02:41,879 --> 00:02:46,945
The Validator calls this a rule.  Just after the notEmpty method call,

35
00:02:46,946 --> 00:02:51,397
we use another method called validate.  Validate tests our data,

36
00:02:51,398 --> 00:02:55,719
in this case date_string, against our rule, which is notEmpty.

37
00:02:55,720 --> 00:03:00,012
So here we're simply validating that date_string is notEmpty.

38
00:03:00,013 --> 00:03:04,875
This single line of code will return true if it validates or false if

39
00:03:04,876 --> 00:03:07,831
it does not.

40
00:03:07,832 --> 00:03:11,614
So now we validated that our date is not empty, but how do we know

41
00:03:11,615 --> 00:03:15,840
it's actually a date?  We can use another rule called date built into

42
00:03:15,841 --> 00:03:21,643
the Validator class, which will allow us to see if it's any number of date formats.

43
00:03:21,644 --> 00:03:24,322
All of these together would make for a very long conditional

44
00:03:24,323 --> 00:03:29,835
statement, so how can we improve this?

45
00:03:29,836 --> 00:03:33,797
Respect/Validation allows us to chain all of our rules together before

46
00:03:33,798 --> 00:03:38,232
we call the validate method.  We can do this using a hyphen and a

47
00:03:38,233 --> 00:03:43,592
greater than symbol.  Together, this little arrow symbol is called the object operator.

48
00:03:43,593 --> 00:03:47,773
So here you can see we've chained together notEmpty to date before we

49
00:03:47,774 --> 00:03:52,799
call the method validate.  This is great, but what else can we do?

50
00:03:52,800 --> 00:03:53,219
Well,

51
00:03:53,220 --> 00:03:57,607
we can take all of our rules such as notEmpty and date and chain them

52
00:03:57,608 --> 00:04:01,479
together and place them in a custom validator variable.

53
00:04:01,480 --> 00:04:05,375
That way we can just call the variable followed by the method validate

54
00:04:05,376 --> 00:04:09,213
and our data to use inside of a conditional statement.

55
00:04:09,214 --> 00:04:14,830
Let's see how this looks inside of our existing function.

56
00:04:14,831 --> 00:04:18,970
Inside of our validate_date function we create our validator,

57
00:04:18,971 --> 00:04:26,700
and then we use it inside of our conditional statement with the validate method.

58
00:04:26,701 --> 00:04:30,018
Another great feature of the validator date rule is that we can

59
00:04:30,019 --> 00:04:35,041
require a custom format from the user by placing it as an argument

60
00:04:35,042 --> 00:04:40,269
inside of our date rule.  We can use any format we want from the PHP

61
00:04:40,270 --> 00:04:43,810
date function, which we've gone over in a previous section.

62
00:04:43,811 --> 00:04:47,653
In this example, we're using the format of day followed by the two

63
00:04:47,654 --> 00:04:50,944
digit month followed by a four digit year.

64
00:04:50,945 --> 00:04:57,726
All dates entered into the form will have to match this format.

65
00:04:57,727 --> 00:05:01,824
As a final step, if it fails, we're going to return a message to the

66
00:05:01,825 --> 00:05:05,650
user requiring that it be in a specific format.

67
00:05:05,651 --> 00:05:10,485
So here we'll just use an else statement to do this.

68
00:05:10,486 --> 00:05:13,684
Let's take a look back of what we've gone over in this section in

69
00:05:13,685 --> 00:05:17,817
regards to the Validator class.  We've learned how to create an object

70
00:05:17,818 --> 00:05:21,963
using the new keyword.  We've also used our Validator class and some

71
00:05:21,964 --> 00:05:26,347
of its methods as rules.  Some of those rules, such as the notEmpty or

72
00:05:26,348 --> 00:05:31,647
date rule we've learned to use, as well as chaining rules with the object operator.

73
00:05:31,648 --> 00:05:35,223
We've learned how to store custom validators inside of a variable and

74
00:05:35,224 --> 00:05:41,190
then using those custom validators inside conditionals.

75
00:05:41,191 --> 01:00:00,000
Now it's time for you to do some challenges, and I'll see you soon.
