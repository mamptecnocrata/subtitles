1
00:00:00,000 --> 00:00:07,999
Turn up the volume and let's get deep as we all swim down into the sea.

2
00:00:08,000 --> 00:00:15,999
We'll imagine a whale and underwater creatures who will be there while we learn Docker's very best features.

3
00:00:16,000 --> 00:00:27,999
You'll learn a whole lot - this isn't a shocker.  Now contain your excitement as you Try Docker.

4
00:00:28,000 --> 00:00:33,999
Welcome back.  So far we've learned how to run containers from the command line and create images with Dockerfiles

5
00:00:34,000 --> 00:00:39,999
and in this last level we'll learn how to work with data in volumes.

6
00:00:40,000 --> 00:00:43,999
If the image you're building a container with doesn’t already contain your application's files, you'll need

7
00:00:44,000 --> 00:00:49,999
an extra step to get those files into your container.  There's a few different ways that you can do this,

8
00:00:50,000 --> 00:00:53,999
but we're going to show you two of them right now.  The first is by copying files into the container

9
00:00:54,000 --> 00:00:59,999
from the command line and like it sounds you'll just run a single command, it'll copy a file from your local

10
00:01:00,000 --> 00:01:05,999
file system into the running container.  The second way is by copying files as part of the instructions

11
00:01:06,000 --> 00:01:09,999
in a Dockerfile.  Doing this will make the files part of the image, so they'll be there every time you start

12
00:01:10,000 --> 00:01:14,999
a new container with that image.

13
00:01:15,000 --> 00:01:18,999
Now if you're already got the files then including them in the container from the start works fine, but

14
00:01:19,000 --> 00:01:22,999
what about files that aren’t created yet or files that are going to change after the container's already

15
00:01:23,000 --> 00:01:29,999
been started?  The problem with just copying files in is the containers won't persist data.

16
00:01:30,000 --> 00:01:33,999
As soon as you stop that container from running, all of the data inside of it is gone too and won't be there

17
00:01:34,000 --> 00:01:38,999
when you start it up again.  This is definitely a problem if you're writing code while you're developing,

18
00:01:39,000 --> 00:01:43,999
having it disappear every time the container stops.  But imagine another situation where you have a database

19
00:01:44,000 --> 00:01:47,999
in a container that resets its data each time the container is started again.

20
00:01:48,000 --> 00:01:51,999
That won't be very useful.  One solution is to create a data volume.

21
00:01:52,000 --> 00:01:56,999
Data volumes are a way to expose a file on your local machine to a container.

22
00:01:57,000 --> 00:01:59,999
That way whenever you stop the container, none of your data is lost.

23
00:02:00,000 --> 00:02:03,999
But you can still access that data from inside the container when you start it up again.

24
00:02:04,000 --> 00:02:08,999
This is a great option for local development when you want a container to have access to files that you're

25
00:02:09,000 --> 00:02:13,999
working in and that are actively changing.

26
00:02:14,000 --> 00:02:17,999
Good luck practicing copying files and creating data volumes in the challenges and I'll see you back here

27
00:02:18,000 --> 00:02:22,999
in the wrap up video where I'll talk about some next steps for learning Docker at Code School, Pluralsight

28
00:02:23,000 --> 00:02:26,999
and beyond.

29
00:02:27,000 --> 00:02:29,999
To get out of a lot of value.

30
00:02:30,000 --> 00:02:30,999
That coffee.

31
00:02:31,000 --> 00:02:31,999
I'm underwater man I can't breathe.

32
00:02:32,000 --> 00:02:33,999
Is that water or is that coffee?

33
00:02:34,000 --> 00:02:37,999
No I'm underwater.

34
00:02:38,000 --> 01:00:00,000
Docker is like coding underwater.
