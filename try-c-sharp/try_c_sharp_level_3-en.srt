1
00:00:00,000 --> 00:00:05,999
Hey, let’s give C# a try and keep it classy.

2
00:00:06,000 --> 00:00:10,999
Our variables and methods will make things very jazzy.

3
00:00:11,000 --> 00:00:15,999
Oh, we'll compile the code and make our apps real smart, as we orchestrate

4
00:00:16,000 --> 00:00:23,999
and riff on the smooth sounds of C#.

5
00:00:24,000 --> 00:00:25,999
Welcome to Try C#.  My name is Eric Fisher.

6
00:00:26,000 --> 00:00:30,999
In this level we're going to learn about conditions.

7
00:00:31,000 --> 00:00:33,999
So we have a problem, when users enter something that we can't parse,

8
00:00:34,000 --> 00:00:38,999
we get an error.  For example, when we ask how many people are in your band?

9
00:00:39,000 --> 00:00:43,999
And the user responds with duck, we will get the error Unhandled Exception:

10
00:00:44,000 --> 00:00:48,999
System.FormatException: Input string was not the correct format.

11
00:00:49,000 --> 00:00:52,999
This is because our app is expecting a number here, not a string.

12
00:00:53,000 --> 00:00:57,999
Now let's go back to code and see where this error is coming from.

13
00:00:58,000 --> 00:01:00,999
This is the parse method throwing an error because it cannot convert

14
00:01:01,000 --> 00:01:04,999
our string into an integer.  When calling int.parse and then providing

15
00:01:05,000 --> 00:01:08,999
something it cannot convert into an int, you'll get an error along the lines

16
00:01:09,000 --> 00:01:15,999
of input string was not in correct format.  To fix this issue we can use

17
00:01:16,000 --> 00:01:20,999
the TryParse method.  The TryParse method will return true or false

18
00:01:21,000 --> 00:01:24,999
if it was capable of converting the string into an integer.

19
00:01:25,000 --> 00:01:29,999
To accomplish this let's go ahead and move our number of members declaration

20
00:01:30,000 --> 00:01:34,999
to being in its own line by having int numberOfMembers = 0.

21
00:01:35,000 --> 00:01:39,999
Next we'll add the int.TryParse method call, the first parameter is the value

22
00:01:40,000 --> 00:01:45,999
we intend on converting, in this case our Console.ReadLine method,

23
00:01:46,000 --> 00:01:50,999
and then the second parameter is where we're going to actually output

24
00:01:51,000 --> 00:01:55,999
what we've converted.  So here we're going to use what's known as

25
00:01:56,000 --> 00:01:58,999
an output parameter.  They're not super common in C#, but you will end up

26
00:01:59,000 --> 00:02:02,999
using them here and there, for example, in our TryParse method,

27
00:02:03,000 --> 00:02:06,999
but what this allows us to do is as one of our parameters we can output

28
00:02:07,000 --> 00:02:11,999
values from our method to variables.  Number of variables will be set

29
00:02:12,000 --> 00:02:18,999
in the event our int.TryParse is successful in parsing the string.

30
00:02:19,000 --> 00:02:21,999
In this case we're going to want to change the behavior of our application

31
00:02:22,000 --> 00:02:24,999
depending on the success or fail of TryParse.

32
00:02:25,000 --> 00:02:29,999
We can accomplish this using conditions.  For example, we can use the if

33
00:02:30,000 --> 00:02:35,999
condition.  Anytime whatever is in the parenthesis of our if condition

34
00:02:36,000 --> 00:02:39,999
is true, we will run the code within that if block.

35
00:02:40,000 --> 00:02:42,999
If whatever is in the parenthesis is not true, we will not run whatever

36
00:02:43,000 --> 00:02:47,999
is in the if block.  Whatever comes after the if block will be run

37
00:02:48,000 --> 00:02:53,999
regardless of whether or not the if condition was true or false.

38
00:02:54,000 --> 00:02:58,999
Examples of the results of our if condition, in the event that ready is true,

39
00:02:59,000 --> 00:03:06,999
we will run the method DoIfTrue.  We will also run DoNoMatterWhat.

40
00:03:07,000 --> 00:03:14,999
In the event that ready is false, we will only do DoNoMatterWhat.

41
00:03:15,000 --> 00:03:18,999
Since our int.TryParse returns true or false, depending on whether or not

42
00:03:19,000 --> 00:03:23,999
it was successful in parsing the string into an integer, we can use it

43
00:03:24,000 --> 00:03:31,999
as our condition for our if block.  Realistically we're probably only

44
00:03:32,000 --> 00:03:34,999
going to want to be changing our behavior in the event that we actually

45
00:03:35,000 --> 00:03:40,999
fail to parse the input value.  So in this case, instead of looking for when

46
00:03:41,000 --> 00:03:45,999
we are successful in parsing, let's look for the times that we are not successful.

47
00:03:46,000 --> 00:03:50,999
We can do this by adding the not character, the exclamation mark, before

48
00:03:51,000 --> 00:03:57,999
our condition, which tells us we're looking for it to be not true.

49
00:03:58,000 --> 00:04:02,999
From here, in the event we are unable to parse our string into an integer,

50
00:04:03,000 --> 00:04:07,999
we should provide a message back to the user using Console.WriteLine

51
00:04:08,000 --> 00:04:14,999
input was not valid, and then we can use the Environment.Exit method call

52
00:04:15,000 --> 00:04:18,999
providing it a parameter of 0, which just means we were successful

53
00:04:19,000 --> 00:04:25,999
in completing the application, to stop the program where it's at.

54
00:04:26,000 --> 00:04:28,999
At this point our invalid input is handled.

55
00:04:29,000 --> 00:04:32,999
Now if the user were to enter something invalid, we would provide a

56
00:04:33,000 --> 00:04:36,999
simple user friendly error message.  So when the application is run,

57
00:04:37,000 --> 00:04:42,999
it would go what is the name of your band?  We could respond with Awesome Inc.

58
00:04:43,000 --> 00:04:45,999
How many people are in your band?  We could respond with duck, at which point

59
00:04:46,000 --> 00:04:53,999
the application would say input was not valid and the application would end.

60
00:04:54,000 --> 00:04:56,999
There are many cases in our applications where we want to compare two things.

61
00:04:57,000 --> 00:05:00,999
We might see if these two things are equal, if they are not equal to each other

62
00:05:01,000 --> 00:05:03,999
or they're less than and greater than each other.

63
00:05:04,000 --> 00:05:07,999
For example, do we have 1 band member?  We're going to check to see if we have

64
00:05:08,000 --> 00:05:13,999
exactly 1 band member using the equals equals to establish equality.

65
00:05:14,000 --> 00:05:20,999
Do we have more than 0 band members?  we can just use 1 greater than 0.

66
00:05:21,000 --> 00:05:25,999
Is our band not named "Awesome"?  We can just check exclamation mark equal

67
00:05:26,000 --> 00:05:29,999
"Awesome".

68
00:05:30,000 --> 00:05:32,999
The next thing we might want to use when changing the behavior of our

69
00:05:33,000 --> 00:05:36,999
application is the else condition.  The else condition will only execute

70
00:05:37,000 --> 00:05:42,999
code within the else block in the event the if condition before it is not

71
00:05:43,000 --> 00:05:48,999
true.  So if whatever is in our if block's parenthesis is false, we will

72
00:05:49,000 --> 00:05:54,999
then run the code in our else condition instead.

73
00:05:55,000 --> 00:05:57,999
We can take this a step farther by using else and if together to create

74
00:05:58,000 --> 00:06:01,999
series of conditions, that way we can check if something is true, in the event

75
00:06:02,000 --> 00:06:06,999
it is not, we can check to see if something else is true before proceeding

76
00:06:07,000 --> 00:06:13,999
to our else.  So if ready was true we would execute the DoIfTrue method call.

77
00:06:14,000 --> 00:06:18,999
However, if ready was false, but our name was Awesome, we would run

78
00:06:19,000 --> 00:06:25,999
our DoFalseAndAwesome method call.  In the event that we weren’t ready

79
00:06:26,000 --> 00:06:30,999
and our band was also not named Awesome, we would run our else code block

80
00:06:31,000 --> 00:06:38,999
resulting in the DoIfFalseAndNotAwesome method call.

81
00:06:39,000 --> 00:06:43,999
We can use the if, else if, and else conditions to declare the type of our band

82
00:06:44,000 --> 00:06:47,999
based on what was input.  So the first thing we'll do is check to make sure

83
00:06:48,000 --> 00:06:51,999
they had at least 1 band member, we can't have a band with less than 1 member.

84
00:06:52,000 --> 00:06:55,999
We can accomplish this by using the if condition, checking our

85
00:06:56,000 --> 00:07:01,999
numberOfMembers variable is less than 1.  Inside that if code block,

86
00:07:02,000 --> 00:07:06,999
we can do Console.WriteLine and then for its parameter have a string,

87
00:07:07,000 --> 00:07:12,999
you must have at least 1 member, and then do an Environment.Exit with the

88
00:07:13,000 --> 00:07:16,999
code 0.  That way we will end our application in the event they have put

89
00:07:17,000 --> 00:07:21,999
less than 1 band member.  In the event the if block is not executed,

90
00:07:22,000 --> 00:07:26,999
we can use else if to check if our number of members is equal to 1.

91
00:07:27,000 --> 00:07:31,999
If it is, we can write to the console the name of the band and then add

92
00:07:32,000 --> 00:07:37,999
the string is a solo.  In the event our number of members is not less than 1

93
00:07:38,000 --> 00:07:41,999
and is not equal to 1, we can check to see if the number of members is

94
00:07:42,000 --> 00:07:47,999
equal to 2 and if it is we can write to the console the name of the band

95
00:07:48,000 --> 00:07:51,999
followed by is a duo.  And in the event that none of the previous conditions

96
00:07:52,000 --> 00:07:55,999
were true, we can just use the else block to write out to the console

97
00:07:56,000 --> 00:08:02,999
the name of the band has the numberOfMembers variable members.

98
00:08:03,000 --> 00:08:05,999
You'll notice all of the code blocks that were only a single line of code

99
00:08:06,000 --> 00:08:09,999
do not have the curly braces around them.  Curly braces are optional

100
00:08:10,000 --> 00:08:15,999
in code blocks with only one line of code.

101
00:08:16,000 --> 00:08:19,999
Our application is now complete.  It is more robust and able to handle

102
00:08:20,000 --> 00:08:22,999
different information.  We've also added two new features.

103
00:08:23,000 --> 00:08:28,999
We now print the type of band - solo, duo, et cetera, based on the number

104
00:08:29,000 --> 00:08:37,999
of members.  We also can handle invalid user input.

105
00:08:38,000 --> 00:08:40,999
Before we you begin the challenges let's take a quick recap of conditions

106
00:08:41,000 --> 00:08:44,999
and expressions.  We can change the flow of our application using conditions

107
00:08:45,000 --> 00:08:50,999
and expressions.  The if statement only executes its block when the condition

108
00:08:51,000 --> 00:08:55,999
is true.  The else statement only executes its block when the if condition

109
00:08:56,000 --> 00:09:00,999
is false.  Some expressions to remember are these three, two equals

110
00:09:01,000 --> 00:09:07,999
characters means is equal to.  An exclamation mark and an equals character

111
00:09:08,000 --> 00:09:12,999
is not equal to.  An exclamation mark before a condition will only pass

112
00:09:13,000 --> 00:09:18,999
the condition in the event it is not true.

113
00:09:19,000 --> 00:09:21,999
That's the end of level 3.  Now it's your turn to use conditions and expressions

114
00:09:22,000 --> 00:09:26,999
in the challenges and I'll see you in the wrap up video.

115
00:09:27,000 --> 00:09:28,999
Variable, blah, blah.

116
00:09:29,000 --> 00:09:32,999
They have a problem.  Problem?

117
00:09:33,000 --> 00:09:36,999
Much better, blah.

118
00:09:37,000 --> 00:09:37,999
That made no sense grammatically.

119
00:09:38,000 --> 00:09:41,999
Oh crap.

120
00:09:42,000 --> 01:00:00,000
The plus..
