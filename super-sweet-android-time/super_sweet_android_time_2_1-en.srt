1
00:00:00,000 --> 00:00:04,245
Our Candy Coded store sells sweet treats galore.

2
00:00:04,246 --> 00:00:06,726
How do we get it on the map?

3
00:00:06,727 --> 00:00:10,746
Let's build a sugar-coated Android app!

4
00:00:10,747 --> 00:00:14,122
With tasty layouts and views,

5
00:00:14,123 --> 00:00:16,867
full of delicious candy hues,

6
00:00:16,868 --> 00:00:26,981
our users will be overjoyed by our super sweet apps powered with Android.

7
00:00:26,982 --> 00:00:31,800
Welcome back.  In level 2 we're going to use an HTTP request to get

8
00:00:31,801 --> 00:00:37,173
dynamic data into our app.

9
00:00:37,174 --> 00:00:41,841
It doesn't make sense to hard code our store's candy in our app.

10
00:00:41,842 --> 00:00:45,334
If the candy ever changes, the user would have to update their app

11
00:00:45,335 --> 00:00:50,504
to get the latest candy.  Instead, we want to fetch the latest candy

12
00:00:50,505 --> 00:00:55,576
data with an HTTP request from our server.

13
00:00:55,577 --> 00:01:00,101
Let's look at how to do this in our app.

14
00:01:00,102 --> 00:01:04,276
First we need to understand that by default, all components of the

15
00:01:04,277 --> 00:01:10,256
same app run in the same process and thread called the main thread.

16
00:01:10,257 --> 00:01:15,072
This thread runs commands sequentially.  For example, ours right now

17
00:01:15,073 --> 00:01:20,478
draws the layout to the screen, creates the ArrayList of candy names,

18
00:01:20,479 --> 00:01:25,741
creates the ArrayAdapter, populates the ListView, and finally creates

19
00:01:25,742 --> 00:01:30,465
the item click listener.  The only exception in this order of events

20
00:01:30,466 --> 00:01:34,888
is the callback method that gets triggered when a list item is clicked,

21
00:01:34,889 --> 00:01:39,296
and even then that still gets called on the main thread.

22
00:01:39,297 --> 00:01:43,611
In Android the main thread is primarily responsible for drawing to

23
00:01:43,612 --> 00:01:47,594
the screen and handling the user interaction, so it's also often

24
00:01:47,595 --> 00:01:55,218
called the UI thread.  The problem is if we also do time consuming

25
00:01:55,219 --> 00:02:00,099
operations like network access or database queries on that same

26
00:02:00,100 --> 00:02:07,028
thread, the whole UI would be blocked until those finish.

27
00:02:07,029 --> 00:02:11,392
Instead we can do network, access or database queries on a separate

28
00:02:11,393 --> 00:02:16,733
background thread that runs at the same time in the background.

29
00:02:16,734 --> 00:02:21,148
Then, once that background operation finishes, it returns the results

30
00:02:21,149 --> 00:02:29,369
to the UI thread.  This way the UI can continue running smoothly.

31
00:02:29,370 --> 00:02:33,036
There's actually a lot of boilerplate code that goes into creating an

32
00:02:33,037 --> 00:02:38,497
HTTP request in the background thread using the async task class,

33
00:02:38,498 --> 00:02:45,265
but we can use the external library AsyncHttpClient to do this for us.

34
00:02:45,266 --> 00:02:50,504
AsyncHttpClient is a class that will do the HTTP request in the

35
00:02:50,505 --> 00:02:54,243
background thread to get our current candy items.

36
00:02:54,244 --> 00:02:58,969
That will return a response that contains the current candy items

37
00:02:58,970 --> 00:03:03,478
to the UI thread.

38
00:03:03,479 --> 00:03:08,494
To use an external library like AsyncHttpClient, we need to add it

39
00:03:08,495 --> 00:03:16,020
as a dependency at the bottom of our app's build.gradle file.

40
00:03:16,021 --> 00:03:21,198
To make an HTTP request, we can create a new object and make a request

41
00:03:21,199 --> 00:03:25,970
with the get method.  Android Studio should automatically import the

42
00:03:25,971 --> 00:03:33,035
correct library, but if it doesn't, we need this import line.

43
00:03:33,036 --> 00:03:38,063
The get method takes in two parameters.  One is the URL of our

44
00:03:38,064 --> 00:03:42,954
request, and the other is a response handler object.

45
00:03:42,955 --> 00:03:49,099
The response handler we're using is the TextHttpResponseHandler,

46
00:03:49,100 --> 00:03:53,840
which needs to implement two callback methods, the onSuccess callback

47
00:03:53,841 --> 00:03:59,017
method and the onFailure callback method.

48
00:03:59,018 --> 00:04:03,395
Inside the onSuccess callback method, we'll just log the JSON response

49
00:04:03,396 --> 00:04:08,517
for now as a debug message with the Log.d method.

50
00:04:08,518 --> 00:04:11,751
This is just a first step to see that this is working before we

51
00:04:11,752 --> 00:04:16,573
actually build the code to display the candy.

52
00:04:16,574 --> 00:04:24,328
In the onFailure callback method, we'll log the error with the Log.e method.

53
00:04:24,329 --> 00:04:27,219
If we try to run our app now we'll get an error.

54
00:04:27,220 --> 00:04:31,547
That's because we haven't given our app permission to access the internet.

55
00:04:31,548 --> 00:04:36,165
We can do that in the AndroidManifest.xml file.

56
00:04:36,166 --> 00:04:40,044
Every app has this file and it provides essential information about

57
00:04:40,045 --> 00:04:45,852
your app like the icon image to use, the app name, and which activity

58
00:04:45,853 --> 00:04:52,017
to launch when the app starts.  We'll add the internet permission

59
00:04:52,018 --> 00:04:56,835
to the top of the manifest file with the uses-permission tag.

60
00:04:56,836 --> 00:05:00,587
This will ask the user if they want to allow the app to access the

61
00:05:00,588 --> 00:05:05,116
internet when they open the app.  Let's jump over to Android Studio

62
00:05:05,117 --> 00:05:09,285
to see those log messages in action.

63
00:05:09,286 --> 00:05:14,014
The log output in Android Studio can be viewed in the Android Monitor

64
00:05:14,015 --> 00:05:18,718
window under the logcat tab.  It's blank right now, but when we run

65
00:05:18,719 --> 00:05:22,966
our app we'll start to see the log update.

66
00:05:22,967 --> 00:05:28,267
We can look for our debug message with the tag AsyncHttpClient,

67
00:05:28,268 --> 00:05:34,101
and our message, response =.  Here it is, and we can see the response

68
00:05:34,102 --> 00:05:40,010
is a JSON string that represents each candy and its information like

69
00:05:40,011 --> 00:05:45,766
Tropical Wave, its image URL, price, and description, and the next

70
00:05:45,767 --> 00:05:51,522
candy, Berry Bouncer, and so on.  Next we'll parse this JSON response

71
00:05:51,523 --> 00:05:54,762
into something we can work with.

72
00:05:54,763 --> 00:05:58,182
That's it for section 1.  Now it's time for you to practice requests

73
00:05:58,183 --> 01:00:00,000
in the challenges.  Good luck.
