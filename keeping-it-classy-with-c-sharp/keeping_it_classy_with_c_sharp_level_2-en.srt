1
00:00:00,000 --> 00:00:04,999
Welcome back to Keeping it Classy with C#.

2
00:00:05,000 --> 00:00:10,999
My name is Eric Fisher.  In this level we are going to cover classes.

3
00:00:11,000 --> 00:00:14,999
For this level we're going to expand on the concept of band.

4
00:00:15,000 --> 00:00:19,999
We're going to create a Band class to store musicians for our band.

5
00:00:20,000 --> 00:00:22,999
Our band needs to be able to store the information about its musicians

6
00:00:23,000 --> 00:00:25,999
as well as announce them.  In order to do this, we're going to create a

7
00:00:26,000 --> 00:00:29,999
Band class that we can share methods between our Band class and our

8
00:00:30,000 --> 00:00:33,999
Program class.

9
00:00:34,000 --> 00:00:37,999
When we look at what makes up a band, a band has several properties.

10
00:00:38,000 --> 00:00:42,999
This includes the name of the band as well as the musicians within the band,

11
00:00:43,000 --> 00:00:46,999
but how exactly do we make this in code?

12
00:00:47,000 --> 00:00:50,999
The class defines the structure of our band, while an object is an actual

13
00:00:51,000 --> 00:00:55,999
instance of our band.  Think of a class like a blueprint and think of an object

14
00:00:56,000 --> 00:00:59,999
as an example of what that blueprint describes.

15
00:01:00,000 --> 00:01:04,999
So here in the left we have a Band class, here on the right we have an

16
00:01:05,000 --> 00:01:10,999
example of an instance of the Band class.

17
00:01:11,000 --> 00:01:14,999
To declare a class we use the class keyword followed by whatever name

18
00:01:15,000 --> 00:01:19,999
we would like to provide that class.  It's standard practice in C#

19
00:01:20,000 --> 00:01:23,999
to name our files whatever class they're going to contain.

20
00:01:24,000 --> 00:01:29,999
So in this example, Band.cs would contain our Band class.

21
00:01:30,000 --> 00:01:34,999
From here we can declare the variables that are going to make up our class.

22
00:01:35,000 --> 00:01:38,999
In this case we're going to have the string Name and the integer Musicians

23
00:01:39,000 --> 00:01:42,999
to represent the number of musicians we have in our band.

24
00:01:43,000 --> 00:01:46,999
One thing of note is these are what's known as instance variables,

25
00:01:47,000 --> 00:01:51,999
what that means is every instance of our Band class can have its own values.

26
00:01:52,000 --> 00:01:58,999
Okay, so where exactly does object come into play with a class?

27
00:01:59,000 --> 00:02:03,999
In this example we can see several instances of our Band class.

28
00:02:04,000 --> 00:02:08,999
Each of these has their own values.  For example, the first band has

29
00:02:09,000 --> 00:02:14,999
the name C Sharps with 4 musicians, the second band has the name The F Sharps

30
00:02:15,000 --> 00:02:21,999
with 2 musicians, and the third band has the name The VB Nets with 1 musician.

31
00:02:22,000 --> 00:02:26,999
Let's refactor our AnnounceBand method to put it inside of our Band class.

32
00:02:27,000 --> 00:02:30,999
This way we can take advantage of our name variable in our Band class

33
00:02:31,000 --> 00:02:36,999
instead of accepting an outside parameter for AnnounceBand.

34
00:02:37,000 --> 00:02:43,999
So first let's just go ahead and move AnnounceBand into our Band class.

35
00:02:44,000 --> 00:02:48,999
Next, when we look at the name AnnounceBand, it's kind of redundant having

36
00:02:49,000 --> 00:02:53,999
AnnounceBand inside of Band, so we're going to knock the Band off of that.

37
00:02:54,000 --> 00:02:58,999
We're also going to go ahead and just not use an input parameter, but

38
00:02:59,000 --> 00:03:02,999
instead use our string variable in our Band class.

39
00:03:03,000 --> 00:03:08,999
At this point we rename our method from AnnounceBand to just Announce.

40
00:03:09,000 --> 00:03:12,999
We completely remove the parameter in its entirety and we just change

41
00:03:13,000 --> 00:03:16,999
where we were using bandName in our Console.WriteLine to just using

42
00:03:17,000 --> 00:03:25,999
our Name variable.  Well what happens when we attempt to compile this code?

43
00:03:26,000 --> 00:03:28,999
When we attempt to compile this code, we're getting an error because

44
00:03:29,000 --> 00:03:33,999
Console is not part of our Band class.  So the error message we will see is

45
00:03:34,000 --> 00:03:39,999
The name 'Console' doesn’t exist in the current context.

46
00:03:40,000 --> 00:03:42,999
This brings us to the concept of namespaces which are used to organize

47
00:03:43,000 --> 00:03:46,999
our code in such a way that we can reuse our class names.

48
00:03:47,000 --> 00:03:51,999
For example, our Program and our Band class live inside what's known as

49
00:03:52,000 --> 00:03:54,999
the Global Namespace that is available in your application.

50
00:03:55,000 --> 00:04:02,999
Whereas Console.WriteLine lives in a separate namespace called System.

51
00:04:03,000 --> 00:04:05,999
Namespaces can be accessed using the following format.

52
00:04:06,000 --> 00:04:11,999
Firs the namespace itself, in this case System, followed by the class name,

53
00:04:12,000 --> 00:04:15,999
in this case Console, and then finally the method, in this case WriteLine.

54
00:04:16,000 --> 00:04:18,999
Rewriting that every time can get really annoying, is there a shorter way

55
00:04:19,000 --> 00:04:22,999
we can write this?

56
00:04:23,000 --> 00:04:26,999
The answer is yes.  You can reference a namespace throughout a file

57
00:04:27,000 --> 00:04:32,999
with a using directive.  At the top of our file we can add using space

58
00:04:33,000 --> 00:04:36,999
and the namespace we want to make available throughout that file.

59
00:04:37,000 --> 00:04:41,999
Now in order to call a method from an outside namespace, we only have to

60
00:04:42,000 --> 00:04:45,999
use the class and then the method name, in this example that would be

61
00:04:46,000 --> 00:04:51,999
Console.WriteLine.  We didn’t get an error doing this in the program.cs

62
00:04:52,000 --> 00:04:56,999
file because we already had a using directive for usingSystem in it.

63
00:04:57,000 --> 00:05:00,999
This allows us to use our Console class throughout a file and only

64
00:05:01,000 --> 00:05:08,999
reference System once.

65
00:05:09,000 --> 00:05:12,999
Adding a using directive for System resolves our error.

66
00:05:13,000 --> 00:05:16,999
This gives Band access to our System namespace, letting our compiler know

67
00:05:17,000 --> 00:05:24,999
where to find Console.  How do we create a Band object using our Band class?

68
00:05:25,000 --> 00:05:29,999
We can use the statement new Band to create a new instance of a Band object.

69
00:05:30,000 --> 00:05:33,999
We'll create a new variable of type Band, which we will set to a new

70
00:05:34,000 --> 00:05:38,999
instance of the Band class, then we'll set the Band's name variable using

71
00:05:39,000 --> 00:05:43,999
Console.ReadLine.

72
00:05:44,000 --> 00:05:47,999
When we attempt to compile this code though, we are going to get an error

73
00:05:48,000 --> 00:05:50,999
'Band' is inaccessible due to its protection level.

74
00:05:51,000 --> 00:05:56,999
What is a protection level and why can't we access Band here?

75
00:05:57,000 --> 00:06:01,999
Protection levels are set by what's known as access modifiers and they

76
00:06:02,000 --> 00:06:06,999
control where we can and cannot access our code throughout our application.

77
00:06:07,000 --> 00:06:09,999
There are many access modifiers, but we're only going to focus on public

78
00:06:10,000 --> 00:06:15,999
and private for the time being.  The Public Access Modifier makes our code

79
00:06:16,000 --> 00:06:18,999
effectively accessible anywhere we might want to get it.

80
00:06:19,000 --> 00:06:22,999
Versus the Private Access Modifier only allows us to access code

81
00:06:23,000 --> 00:06:27,999
within the same class.  Access modifiers default to private anytime

82
00:06:28,000 --> 00:06:31,999
one isn’t provided.

83
00:06:32,000 --> 00:06:34,999
By adding public in front of our class name, our method name, and our

84
00:06:35,000 --> 00:06:39,999
variable names, we make that code accessible anywhere throughout our application.

85
00:06:40,000 --> 00:06:42,999
Now we can finish calling announcement from our Program class.

86
00:06:43,000 --> 00:06:47,999
From here we'll put public in front of our class Band, as well as

87
00:06:48,000 --> 00:06:52,999
in front of our variables Name and Musicians and finally we'll put

88
00:06:53,000 --> 00:06:55,999
public in front of our Announce method.  Now we can finish calling our

89
00:06:56,000 --> 00:07:01,999
Announce method from our program class's Main method.

90
00:07:02,000 --> 00:07:06,999
Inside Main, we're going to call the Announce method on band, which will

91
00:07:07,000 --> 00:07:11,999
then use the name variable we just set to announce the band.

92
00:07:12,000 --> 00:07:16,999
When we execute this code we will see, what is the name of your band?

93
00:07:17,000 --> 00:07:19,999
The user will provide a name, in this case The C Sharps, and then our

94
00:07:20,000 --> 00:07:28,999
application will respond with Welcome, the name of the band, to the stage!

95
00:07:29,000 --> 00:07:31,999
Before we wrap up, a quick recap on classes.

96
00:07:32,000 --> 00:07:36,999
C# is an object-oriented programming language based around classes.

97
00:07:37,000 --> 00:07:41,999
Classes define what an object look like.  An object is an actual instance

98
00:07:42,000 --> 00:07:46,999
of a class.  The default access-modifier is private, restricting code

99
00:07:47,000 --> 00:07:51,999
to only be used within the same class.  To use something from a

100
00:07:52,000 --> 00:07:57,999
different namespace, you can use the full namespace.class.methodname

101
00:07:58,000 --> 00:08:01,999
or a using directive.

102
00:08:02,000 --> 00:08:05,999
This is the end of level 2.  Now it's your turn to create and reference classes

103
00:08:06,000 --> 01:00:00,000
in the challenges.  I'll see you in level 3.
