1
00:00:00,000 --> 00:00:05,999
Welcome back to Keeping it Classy with C#.  My name is Eric Fisher.

2
00:00:06,000 --> 00:00:09,999
In this level we're going to cover loops.

3
00:00:10,000 --> 00:00:12,999
Our bands now contain musicians, but we're going to need to use loops

4
00:00:13,000 --> 00:00:18,999
to utilize them.  In this level we'll create a loop to add musicians per band

5
00:00:19,000 --> 00:00:23,999
as well as create a loop to announce the musicians.

6
00:00:24,000 --> 00:00:26,999
So let's look at the flow of what we're actually looking at our application doing.

7
00:00:27,000 --> 00:00:29,999
We're going to start by getting the band name, then we're going to ask

8
00:00:30,000 --> 00:00:33,999
the user do they want to add a musician, announce the band, or quit

9
00:00:34,000 --> 00:00:38,999
the application?  If they choose to Add a musician or Announce the band,

10
00:00:39,000 --> 00:00:42,999
we'll perform that function and then we'll ask them again.

11
00:00:43,000 --> 00:00:44,999
Up until the point where they choose Quit, at which point we'll exit

12
00:00:45,000 --> 00:00:53,999
the application.  How do we implement repeating to ask until Quit is used?

13
00:00:54,000 --> 00:00:57,999
Before we create our loop, let's notify the user of what commands are available.

14
00:00:58,000 --> 00:01:00,999
As you can see here, we're going to add messages to the user, type Add

15
00:01:01,000 --> 00:01:04,999
to add a musician, type Announce to announce the band, type Quit to

16
00:01:05,000 --> 00:01:09,999
quit the application.  Now we can start implementing our loop.

17
00:01:10,000 --> 00:01:13,999
Here we'll use a while loop.  A while loop will continue to run until

18
00:01:14,000 --> 00:01:21,999
whatever condition is provided is false or we use the break keyword.

19
00:01:22,000 --> 00:01:26,999
In our Main method, we'll create a new variable, repeat, and we'll set that

20
00:01:27,000 --> 00:01:32,999
to true.  We'll use this as the condition for our while loop.

21
00:01:33,000 --> 00:01:37,999
This while loop will run forever until repeat is false or the break keyword

22
00:01:38,000 --> 00:01:43,999
is used.  So looking at the execution of this code, we'll check while,

23
00:01:44,000 --> 00:01:48,999
it'll see that repeat is true, it'll run it's code, then we'll check while,

24
00:01:49,000 --> 00:01:52,999
we'll see repeat is true, then we'll run its code, then we'll check while,

25
00:01:53,000 --> 00:01:56,999
then we'll hit see that repeat is true, as you can see we have a problem here.

26
00:01:57,000 --> 00:01:59,999
There is no way to break out of our while loop.

27
00:02:00,000 --> 00:02:03,999
Be careful using loops to make sure you always have a way to break out of them

28
00:02:04,000 --> 00:02:09,999
or you can get yourself stuck in a situation known as an infinite loop.

29
00:02:10,000 --> 00:02:13,999
Let's add conditions for handling our commands, add musician, announce

30
00:02:14,000 --> 00:02:18,999
the band, and quit the application.  Inside our while loop, first we'll

31
00:02:19,000 --> 00:02:22,999
ask the user do they want to Add, Announce, or Quit.

32
00:02:23,000 --> 00:02:26,999
We will then read the response and set it to the action variable.

33
00:02:27,000 --> 00:02:32,999
We will be checking to see if the action variable is Add, else is the

34
00:02:33,000 --> 00:02:37,999
action variable Announce, else is the action variable Quit, and in the

35
00:02:38,000 --> 00:02:41,999
event that whatever they have entered is not any of these three, we will

36
00:02:42,000 --> 00:02:47,999
simply respond with whatever they have typed is not a valid command.

37
00:02:48,000 --> 00:02:53,999
We'll use this to handle when input doesn’t match any of our commands.

38
00:02:54,000 --> 00:03:00,999
After our condition action equals Add, we will call the AddMusician method.

39
00:03:01,000 --> 00:03:03,999
After our condition that checks to see if action equals Announce,

40
00:03:04,000 --> 00:03:10,999
we will call our band's Announce method.

41
00:03:11,000 --> 00:03:14,999
When the user uses the Quit command, the break keyword will exit the loop

42
00:03:15,000 --> 00:03:18,999
immediately without running any additional code.

43
00:03:19,000 --> 00:03:21,999
What would this look like if we changed the while condition instead of

44
00:03:22,000 --> 00:03:26,999
using break?

45
00:03:27,000 --> 00:03:30,999
If instead of using the break we were to set repeat to false, the while loop

46
00:03:31,000 --> 00:03:34,999
would continue to run until it reached the end of its loop.

47
00:03:35,000 --> 00:03:37,999
It would check the condition to see that it's false and then exit the

48
00:03:38,000 --> 00:03:41,999
execution of the while loop.  With that done, we need to update our

49
00:03:42,000 --> 00:03:47,999
Announce method to be able to announce our musicians.

50
00:03:48,000 --> 00:03:50,999
In our Announce method we're going to use a foreach loop.

51
00:03:51,000 --> 00:03:55,999
A foreach loop will iterate through a group of objects one by one

52
00:03:56,000 --> 00:03:59,999
and run code against each of those objects.

53
00:04:00,000 --> 00:04:03,999
Our foreach loop will grab each object out of the Musicians one by one

54
00:04:04,000 --> 00:04:07,999
and set them to our Musician variable.  We will then call the Announce method

55
00:04:08,000 --> 00:04:11,999
on each one of those objects.  A foreach loop will run until it has

56
00:04:12,000 --> 00:04:15,999
either run against every single object in the group, has run into an

57
00:04:16,000 --> 00:04:22,999
unhandled exception, or hits a break keyword.

58
00:04:23,000 --> 00:04:25,999
Our application is now capable of doing everything we intended when we

59
00:04:26,000 --> 00:04:29,999
started out this course.  It is capable of getting a band name, collecting

60
00:04:30,000 --> 00:04:33,999
musician's information, announcing that band, and announcing the band's

61
00:04:34,000 --> 00:04:37,999
musicians.

62
00:04:38,000 --> 00:04:41,999
Our loops will allow users to repeat actions until they use the Quit command.

63
00:04:42,000 --> 00:04:45,999
In this example you'll see we ask Add, Announce, or Quit?

64
00:04:46,000 --> 00:04:49,999
The user can then use the Add command.  It'll ask them what the name

65
00:04:50,000 --> 00:04:53,999
of the musician to be added is, they'll provide that, what instrument

66
00:04:54,000 --> 00:04:56,999
does that musician play?  They'll provide the instrument, at which point

67
00:04:57,000 --> 00:05:00,999
it will then again ask Add, Announce, or Quit?

68
00:05:01,000 --> 00:05:05,999
And if they type Quit, the application will end.

69
00:05:06,000 --> 00:05:10,999
Loops allow us to repeat code logically without rewriting it again and again.

70
00:05:11,000 --> 00:05:15,999
Anytime a loop hits a break command, it will end what it's doing immediately.

71
00:05:16,000 --> 00:05:19,999
All loops escape immediately when a break keyword is used.

72
00:05:20,000 --> 00:05:22,999
Always make sure there is a way to escape the loop.

73
00:05:23,000 --> 00:05:25,999
Infinite loops can be really bad.  While loops will escape before running

74
00:05:26,000 --> 00:05:31,999
the first line in their block of code when their condition is false.

75
00:05:32,000 --> 00:05:35,999
Foreach loops will escape when they have run their code against every item

76
00:05:36,000 --> 00:05:38,999
in the collection.

77
00:05:39,000 --> 00:05:42,999
That's the end of this level, now it's your turn to use loops in the challenges.

78
00:05:43,000 --> 01:00:00,000
Have fun.
