1
00:00:00,000 --> 00:00:02,270
[CAR STARTING] [SINGING]
Put your pedal to the metal

2
00:00:02,270 --> 00:00:04,210
and burn up the road.

3
00:00:04,210 --> 00:00:07,644
Start the race and load
Angular 2 code.

4
00:00:07,644 --> 00:00:11,067
A class decorator can
help you in this moment.

5
00:00:11,067 --> 00:00:14,010
Tune your engine with the
template and component.

6
00:00:14,010 --> 00:00:15,950
Use data binding to

7
00:00:15,950 --> 00:00:17,405
drift through the turns.

8
00:00:17,405 --> 00:00:20,800
With import and export separate your concerns

9
00:00:20,800 --> 00:00:24,195
Inject a service
with your racing crew,

10
00:00:24,195 --> 00:00:28,158
while Accelerating
Through Angular 2.

11
00:00:30,960 --> 00:00:33,520
You're watching Accelerating
Through Angular 2.

12
00:00:33,520 --> 00:00:35,390
I'm Gregg Pollack
and this is level five,

13
00:00:35,390 --> 00:00:40,960
where we will be talking
about services and HTTP.

14
00:00:40,960 --> 00:00:44,550
Let's take a second look at how
we're importing our mock data.

15
00:00:44,550 --> 00:00:47,140
Now, we're loading our car parts
by importing our mock file.

16
00:00:47,140 --> 00:00:50,530
But this actually isn't the best
solution for working with data.

17
00:00:54,030 --> 00:00:56,335
This isn't the best because
we need to import mocks

18
00:00:56,335 --> 00:00:58,670
in every file that
needs this data,

19
00:00:58,670 --> 00:01:00,680
and if the way we access
this data changes,

20
00:01:00,680 --> 00:01:02,890
we'd have to change
it everywhere.

21
00:01:02,890 --> 00:01:08,070
Also it's not easy to switch
between real and mock data.

22
00:01:08,070 --> 00:01:10,200
And this sort of data
loading is actually

23
00:01:10,200 --> 00:01:14,990
best left to service classes.

24
00:01:14,990 --> 00:01:18,590
Services are used to organize
and share code across our app

25
00:01:18,590 --> 00:01:22,400
and they're usually where we
create our data access methods.

26
00:01:22,400 --> 00:01:24,340
So in car parts
component, we're going

27
00:01:24,340 --> 00:01:26,620
to ask our service for data.

28
00:01:26,620 --> 00:01:30,570
We'll create a service called
racing-data.service.ts.

29
00:01:30,570 --> 00:01:33,140
And that file will be
in charge of fetching

30
00:01:33,140 --> 00:01:35,380
the appropriate data,
which in this case

31
00:01:35,380 --> 00:01:37,350
will come from our mocks file.

32
00:01:37,350 --> 00:01:40,209
Let's start out by creating
the simplest service.

33
00:01:40,209 --> 00:01:41,750
And then we'll learn
something called

34
00:01:41,750 --> 00:01:44,520
dependency injection that will
make it even more powerful.

35
00:01:47,500 --> 00:01:49,850
So here's a new
racing data service.

36
00:01:49,850 --> 00:01:53,960
Inside there, we we'll import
our car parts from our mocks,

37
00:01:53,960 --> 00:01:56,260
we'll create the class
RacingDataService,

38
00:01:56,260 --> 00:01:59,110
and inside of it, it'll
have one method called

39
00:01:59,110 --> 00:02:02,600
getCarParts that will
simply return the car parts.

40
00:02:02,600 --> 00:02:05,200
Then to use this
service, we'll import it.

41
00:02:05,200 --> 00:02:08,110
And inside our ngOnInit,
we'll create a new variable

42
00:02:08,110 --> 00:02:11,480
called RacingDataService
that has a new instance

43
00:02:11,480 --> 00:02:13,250
of RacingDataService.

44
00:02:13,250 --> 00:02:16,140
And we'll set this.carParts
equal to the return

45
00:02:16,140 --> 00:02:18,360
value of getCarParts.

46
00:02:18,360 --> 00:02:21,000
So this is great, we've
decoupled our data layer.

47
00:02:21,000 --> 00:02:23,450
But there's still
some stuff that sucks

48
00:02:23,450 --> 00:02:25,480
about this implementation.

49
00:02:25,480 --> 00:02:27,390
Classes using this
service must know

50
00:02:27,390 --> 00:02:29,780
how to create a
RacingDataService

51
00:02:29,780 --> 00:02:33,080
and if that ever changes, we
have to change it everywhere.

52
00:02:33,080 --> 00:02:35,320
And we'll be creating
a new RacingDataService

53
00:02:35,320 --> 00:02:39,130
every time we need to
fetch car parts, which

54
00:02:39,130 --> 00:02:41,100
is going to use up more memory.

55
00:02:41,100 --> 00:02:44,200
And it'll be harder to
switch between a mock service

56
00:02:44,200 --> 00:02:48,300
and a real one later on.

57
00:02:48,300 --> 00:02:50,980
This is where dependency
injection comes in.

58
00:02:50,980 --> 00:02:53,050
When you run an
Angular application

59
00:02:53,050 --> 00:02:55,410
it creates a
dependency injector.

60
00:02:55,410 --> 00:02:57,590
An injector is in
charge of knowing

61
00:02:57,590 --> 00:02:59,300
how to create and send things.

62
00:02:59,300 --> 00:03:01,780
So here's an example
of how it works.

63
00:03:01,780 --> 00:03:05,140
If the car.parts.components
needs that RacingDataService,

64
00:03:05,140 --> 00:03:08,800
it's going to ask the
dependency injector, hey,

65
00:03:08,800 --> 00:03:10,950
could I have RacingDataService?

66
00:03:10,950 --> 00:03:13,270
The dependency injector
might say, oh yeah,

67
00:03:13,270 --> 00:03:14,450
I know how to do that.

68
00:03:14,450 --> 00:03:18,670
So it goes and creates
a new RacingDataService

69
00:03:18,670 --> 00:03:22,030
and delivers that to car parts.

70
00:03:22,030 --> 00:03:24,740
The injector knows
how to inject —

71
00:03:24,740 --> 00:03:29,530
which means create — and
send our dependencies

72
00:03:29,530 --> 00:03:33,850
or the classes
that we depend on.

73
00:03:33,850 --> 00:03:36,990
One benefit of this is that
if the injector already

74
00:03:36,990 --> 00:03:40,070
created a service, you can have
it resend the same service.

75
00:03:40,070 --> 00:03:43,110
So let's say we have
a car.cart.component

76
00:03:43,110 --> 00:03:45,940
and it also wants the
RacingDataService.

77
00:03:45,940 --> 00:03:48,020
It could ask the
dependency injector

78
00:03:48,020 --> 00:03:51,880
and the injector knows,
hey, I already created one,

79
00:03:51,880 --> 00:03:52,500
here it is.

80
00:03:55,310 --> 00:03:56,930
But how does a
dependency injector

81
00:03:56,930 --> 00:03:59,450
know what it can inject?

82
00:03:59,450 --> 00:04:03,960
Well, we have to tell it by
registering providers with it.

83
00:04:03,960 --> 00:04:06,190
So, here, our
dependency injector

84
00:04:06,190 --> 00:04:09,340
has three things it
can provide that it

85
00:04:09,340 --> 00:04:12,110
knows how to create and send.

86
00:04:12,110 --> 00:04:15,140
In order to make this work
with our RacingDataService,

87
00:04:15,140 --> 00:04:18,060
there's three steps
we need to follow.

88
00:04:18,060 --> 00:04:20,560
First, we need to add
the injectable decorator

89
00:04:20,560 --> 00:04:22,800
to RacingDataService.

90
00:04:22,800 --> 00:04:25,610
Then we need to let our
injector know about the service

91
00:04:25,610 --> 00:04:27,620
by naming it as a provider.

92
00:04:27,620 --> 00:04:29,460
And then third,
inject the dependency

93
00:04:29,460 --> 00:04:33,360
into our car.parts.component.

94
00:04:33,360 --> 00:04:35,530
Step one, we need
to turn our service

95
00:04:35,530 --> 00:04:37,120
into something that
can be safely used

96
00:04:37,120 --> 00:04:38,800
by our dependency injector.

97
00:04:38,800 --> 00:04:42,430
We do this by first importing
the injectable decorator

98
00:04:42,430 --> 00:04:43,560
from Angular.

99
00:04:43,560 --> 00:04:46,450
And then we simply
use it @ injectable —

100
00:04:46,450 --> 00:04:50,360
and don't forget
the parentheses.

101
00:04:50,360 --> 00:04:53,440
Next we need to let our
injector know about the service.

102
00:04:53,440 --> 00:04:55,630
So since we want all
of our sub components

103
00:04:55,630 --> 00:04:58,360
to have access to
RacingDataService,

104
00:04:58,360 --> 00:05:00,890
we need to register
it at the top level,

105
00:05:00,890 --> 00:05:04,030
in this case, our app module.

106
00:05:04,030 --> 00:05:05,680
So here, in our
main.ts, we're going

107
00:05:05,680 --> 00:05:09,140
to import our RacingDataService.

108
00:05:09,140 --> 00:05:11,600
And then we're going to add
a new piece of metadata,

109
00:05:11,600 --> 00:05:15,070
specifically
providers, and specify

110
00:05:15,070 --> 00:05:17,820
RacingDataService
inside of that array.

111
00:05:17,820 --> 00:05:20,180
So we could have multiple
providers if we wanted to.

112
00:05:24,900 --> 00:05:27,020
Next we need to
inject the dependency.

113
00:05:27,020 --> 00:05:31,090
So in our car.parts.component
we'll import RacingDataService.

114
00:05:31,090 --> 00:05:34,500
And then we're going to
declare a constructor

115
00:05:34,500 --> 00:05:35,820
for this component.

116
00:05:35,820 --> 00:05:41,050
It's going to have a private
RacingDataService of type

117
00:05:41,050 --> 00:05:42,860
RacingDataService.

118
00:05:42,860 --> 00:05:45,520
That private keyword
will cause TypeScript

119
00:05:45,520 --> 00:05:48,850
to automatically define a
component property based

120
00:05:48,850 --> 00:05:50,180
on that parameter.

121
00:05:50,180 --> 00:05:52,470
So under the hood, the
generated JavaScript

122
00:05:52,470 --> 00:05:56,490
looks something like this, where
it declares this.racingService

123
00:05:56,490 --> 00:05:58,510
equals RacingService.

124
00:05:58,510 --> 00:06:00,600
Setting the parameter
type is what

125
00:06:00,600 --> 00:06:04,290
identifies that the Racing
Data Service is what will be

126
00:06:04,290 --> 00:06:06,520
injected into this component.

127
00:06:10,620 --> 00:06:12,570
Now we just need
to use the service.

128
00:06:12,570 --> 00:06:15,260
So back inside our
ngOnInit, we can

129
00:06:15,260 --> 00:06:21,100
set this.carParts equal to
this.racingService.getCarParts.

130
00:06:21,100 --> 00:06:24,800
Now our app is more
scalable and testable.

131
00:06:24,800 --> 00:06:26,950
It's scalable because
our dependencies aren't

132
00:06:26,950 --> 00:06:29,480
strongly tied to our classes.

133
00:06:29,480 --> 00:06:32,210
And it's testable because
it'd be easy to mock services

134
00:06:32,210 --> 00:06:36,150
out when we want to
test the component.

135
00:06:36,150 --> 00:06:39,090
Now if we jump
back into our app,

136
00:06:39,090 --> 00:06:44,290
it still works but this
time it's using a service.

137
00:06:44,290 --> 00:06:47,540
And our code feels cleaner.

138
00:06:47,540 --> 00:06:49,300
So what did we
learn in this level?

139
00:06:49,300 --> 00:06:51,920
We learned that services are
used to organize and share code

140
00:06:51,920 --> 00:06:55,000
across our app, they're usually
where we create our data access

141
00:06:55,000 --> 00:06:55,940
methods.

142
00:06:55,940 --> 00:06:58,730
We use dependency injection
to create and send services

143
00:06:58,730 --> 00:07:00,460
to classes that need them.

144
00:07:00,460 --> 00:07:02,640
We give our dependency
injector providers,

145
00:07:02,640 --> 00:07:06,030
so it knows what classes it
can create and send to us.

146
00:07:06,030 --> 00:07:08,810
And we ask for dependencies
by specifying them

147
00:07:08,810 --> 00:07:11,110
in our class constructor.

148
00:07:11,110 --> 00:07:15,430
Dependency injection is not
an easy concept to grasp,

149
00:07:15,430 --> 00:07:17,890
but hopefully this
gives you a small basis

150
00:07:17,890 --> 00:07:21,870
to start from and maybe
practice in the challenges.

151
00:07:21,870 --> 00:07:23,980
I'll see you in
the next section.
