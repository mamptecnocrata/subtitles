1
00:00:00,000 --> 00:00:05,146
Before we get started I want to let you know about a name change by the team at Google.

2
00:00:05,146 --> 00:00:10,521
See the first version of Angular is now being known as AngularJS

3
00:00:10,521 --> 00:00:17,229
whereas versions of Angular which are 2.0 and above are now known as just Angular.

4
00:00:17,229 --> 00:00:21,604
So, we filmed this course before that name change took place

5
00:00:21,604 --> 00:00:26,812
so, when I say "Angular 2" for the rest of the course, just pretend I said "Angular".

6
00:00:26,812 --> 00:00:29,229
Alright, let's get into it

7
00:00:30,170 --> 00:00:33,920
[SINGING] Put your pedal to
the metal and burn up the road.

8
00:00:33,920 --> 00:00:36,720
Start the race and
load Angular 2 code.

9
00:00:36,720 --> 00:00:41,170
A class decorator can
help you in this moment

10
00:00:41,170 --> 00:00:43,670
tune your engine with the
template and component.

11
00:00:43,670 --> 00:00:47,130
Use data binding to
drift through the turns.

12
00:00:47,130 --> 00:00:50,630
With import and export
separate your concerns.

13
00:00:50,630 --> 00:00:55,090
Inject your service with your
racing crew while Accelerating

14
00:00:55,090 --> 00:01:00,170
Through Angular 2.

15
00:01:00,170 --> 00:01:02,630
You're watching Accelerating
Through Angular.

16
00:01:02,630 --> 00:01:04,840
I'm Greg Pollack, and
in our first section,

17
00:01:04,840 --> 00:01:09,300
we're going to be creating
our first component.

18
00:01:09,300 --> 00:01:10,840
In case you're not
familiar, Angular

19
00:01:10,840 --> 00:01:13,550
is a framework for
dynamic web applications.

20
00:01:13,550 --> 00:01:17,720
It's a way to organize your
HTML, CSS, and JavaScript

21
00:01:17,720 --> 00:01:21,590
so you can ship it over
into somebody's browser.

22
00:01:21,590 --> 00:01:24,220
So it's sent over
from your server,

23
00:01:24,220 --> 00:01:26,550
but you're still going to
need some sort of server

24
00:01:26,550 --> 00:01:27,510
application.

25
00:01:27,510 --> 00:01:31,510
That might be Rails
or Django or PHP,

26
00:01:31,510 --> 00:01:33,170
which loads not
just your Angular

27
00:01:33,170 --> 00:01:36,510
app, but any other data that
you need to load into it later.

28
00:01:36,510 --> 00:01:39,220
Angular was released in
2011, and it's mainly

29
00:01:39,220 --> 00:01:42,050
maintained by Google with
the help of the open source

30
00:01:42,050 --> 00:01:44,380
community.

31
00:01:44,380 --> 00:01:46,550
By the end of the course,
we'll be building together

32
00:01:46,550 --> 00:01:49,630
this Ultra Racing
app that shows us

33
00:01:49,630 --> 00:01:51,670
all of the car parts
we have in stock

34
00:01:51,670 --> 00:01:54,340
and allows us to select
how many we want.

35
00:01:57,420 --> 00:02:00,380
In the challenges, you're going
to be building the Ultra Racing

36
00:02:00,380 --> 00:02:04,420
Schedule, which allows you to
enter races and cancel races

37
00:02:04,420 --> 00:02:07,630
based on how much
money you have.

38
00:02:07,630 --> 00:02:09,590
Just to give you a quick
overview of what we're

39
00:02:09,590 --> 00:02:11,590
covering in this
course, in Level 1,

40
00:02:11,590 --> 00:02:13,170
we'll be creating
our first component.

41
00:02:13,170 --> 00:02:16,220
Level 2, structural
directives, pipes and methods.

42
00:02:16,220 --> 00:02:18,420
Level 3, we'll organize
our code and create

43
00:02:18,420 --> 00:02:20,470
a model and mock our data.

44
00:02:20,470 --> 00:02:24,590
Level 4, we'll do some really
fun data binding, and Level 5,

45
00:02:24,590 --> 00:02:26,590
we'll build our own
service, figure out

46
00:02:26,590 --> 00:02:28,590
dependency injection,
and then use

47
00:02:28,590 --> 00:02:32,800
HTTP to call over the internet
to fetch some data from an API.

48
00:02:32,800 --> 00:02:34,630
And of course,
between all of these,

49
00:02:34,630 --> 00:02:36,340
you'll be doing
challenges and building

50
00:02:36,340 --> 00:02:39,300
that app I just showed you.

51
00:02:39,300 --> 00:02:41,630
You don't need any prior
experience with Angular

52
00:02:41,630 --> 00:02:42,550
to take this course.

53
00:02:42,550 --> 00:02:45,920
However, you do need basic
JavaScript experience,

54
00:02:45,920 --> 00:02:48,300
and if you don't, go check
out our JavaScript road trip

55
00:02:48,300 --> 00:02:49,380
courses.

56
00:02:49,380 --> 00:02:52,800
You'll also need
basic HTML and CSS.

57
00:02:52,800 --> 00:02:54,470
We have courses for that.

58
00:02:54,470 --> 00:02:58,880
And optionally, I recommend
you take our ES2015 Shape

59
00:02:58,880 --> 00:03:00,920
of JavaScript to Come
course, because we're

60
00:03:00,920 --> 00:03:03,470
going to be using some cutting
edge features of JavaScript

61
00:03:03,470 --> 00:03:08,420
in this course with ES2015.

62
00:03:08,420 --> 00:03:11,090
So, what is the difference between
AngularJS and Angular?

63
00:03:11,090 --> 00:03:19,687
First Angular is speedier in a bunch of different ways
Secondly, with Angular we use Components

64
00:03:19,687 --> 00:03:25,021
as opposed to using controllers and scope.  It's a lot cleaner.

65
00:03:25,021 --> 00:03:28,562
Also, directives are simpler.  It's a lot easier to create them.

66
00:03:28,562 --> 00:03:32,479
There's also this great new intuitive data binding,

67
00:03:32,479 --> 00:03:36,396
which we'll get into in Level 4,
Services are now just a class

68
00:03:36,396 --> 00:03:39,229
and there's a bunch of other small improvements.

69
00:03:41,146 --> 00:03:44,170
I really want to show
you some Angular 2 code,

70
00:03:44,170 --> 00:03:46,760
but before we get there, we need
to decide what language we're

71
00:03:46,760 --> 00:03:48,590
going to be coding in.

72
00:03:48,590 --> 00:03:50,800
We could use plain
old JavaScript,

73
00:03:50,800 --> 00:03:55,130
but browsers aren't up to the
latest version of JavaScript.

74
00:03:55,130 --> 00:03:56,720
And there's a couple
of different ways

75
00:03:56,720 --> 00:03:59,130
we can get access to
these newest features.

76
00:03:59,130 --> 00:04:01,920
One is by using
Babel, which allows

77
00:04:01,920 --> 00:04:04,550
you to code in the newest
versions of JavaScript,

78
00:04:04,550 --> 00:04:05,970
and then it does
something called

79
00:04:05,970 --> 00:04:09,800
transpiling into JavaScript
that is compatible with all

80
00:04:09,800 --> 00:04:11,970
of our browsers.

81
00:04:11,970 --> 00:04:14,800
However, we could
also use TypeScript.

82
00:04:14,800 --> 00:04:17,670
TypeScript is a
superset of JavaScript,

83
00:04:17,670 --> 00:04:20,510
which means it has all those
new cutting edge features,

84
00:04:20,510 --> 00:04:23,590
plus a bunch of
additional features.

85
00:04:23,590 --> 00:04:26,840
TypeScript also
transpiles into JavaScript

86
00:04:26,840 --> 00:04:28,590
to be compatible with
all of our browsers.

87
00:04:31,260 --> 00:04:33,800
In this course, we'll be
programming TypeScript.

88
00:04:33,800 --> 00:04:34,470
Don't freak out.

89
00:04:34,470 --> 00:04:36,010
It's actually really cool.

90
00:04:36,010 --> 00:04:38,800
TypeScript is Microsoft's
extension of JavaScript,

91
00:04:38,800 --> 00:04:41,880
which allows use of all
ES2015 features and adds

92
00:04:41,880 --> 00:04:45,260
powerful type checking and
object oriented features.

93
00:04:45,260 --> 00:04:47,840
And in fact, the
Angular source code

94
00:04:47,840 --> 00:04:50,840
itself is programmed
in TypeScript.

95
00:04:50,840 --> 00:04:54,220
So in this course, instead
of seeing JavaScript files

96
00:04:54,220 --> 00:04:57,010
like main.js, you
see here, we'll

97
00:04:57,010 --> 00:05:01,720
be using TypeScript files,
which end in .ts.

98
00:05:01,720 --> 00:05:03,510
If you want to learn
more about TypeScript,

99
00:05:03,510 --> 00:05:08,840
definitely check out
TypeScriptLang.org.

100
00:05:08,840 --> 00:05:11,420
Since our browsers don't know
how to read TypeScript out

101
00:05:11,420 --> 00:05:15,470
of the box, we need to
translate it or transpile it

102
00:05:15,470 --> 00:05:19,130
into JavaScript, and there's
two ways we can do this.

103
00:05:19,130 --> 00:05:22,760
The first way is we can send
our TypeScript into the browser

104
00:05:22,760 --> 00:05:26,590
and leave it to the browser to
transpile it into JavaScript.

105
00:05:26,590 --> 00:05:28,090
The second way is
we can take care

106
00:05:28,090 --> 00:05:32,590
of transpiling to JavaScript
before we ship to the browser.

107
00:05:32,590 --> 00:05:36,420
This usually happens when
we build or deploy our code.

108
00:05:36,420 --> 00:05:39,420
So I just made a commit,
I build the code,

109
00:05:39,420 --> 00:05:41,970
it transpiles my
TypeScript into JavaScript,

110
00:05:41,970 --> 00:05:43,800
sends that up to the
server, which then

111
00:05:43,800 --> 00:05:45,840
gets served into the browser.

112
00:05:45,840 --> 00:05:48,260
This method is going to
load your website faster,

113
00:05:48,260 --> 00:05:51,760
so it will be what you
want to do in production.

114
00:05:51,760 --> 00:05:53,300
Time to start coding,
and we're going

115
00:05:53,300 --> 00:05:58,550
to start with our index.html
with just some basic HTML code.

116
00:05:58,550 --> 00:06:01,220
Now, inside the
header tag here is

117
00:06:01,220 --> 00:06:04,840
where you're going to load all
of your Angular libraries,

118
00:06:04,840 --> 00:06:07,670
but, I'm not going to
show you how to do it.

119
00:06:07,670 --> 00:06:09,590
There's actually a
few ways to do it.

120
00:06:09,590 --> 00:06:11,170
When you're ready
to start developing,

121
00:06:11,170 --> 00:06:14,130
we suggest you go over and
follow the 5 minute quick start

122
00:06:14,130 --> 00:06:16,590
guide on the official
Angular home page.

123
00:06:19,130 --> 00:06:22,260
Inside the body of our HTML,
we're going to put a body tag

124
00:06:22,260 --> 00:06:26,010
and use our first custom
element called my app.

125
00:06:26,010 --> 00:06:29,260
This is where our Angular
2 application will load,

126
00:06:29,260 --> 00:06:32,880
and it's worth noting that
this my app custom tag could

127
00:06:32,880 --> 00:06:36,260
be anything, even racing app.

128
00:06:36,260 --> 00:06:39,010
Until our app gets loaded in
the browser, if we load this up,

129
00:06:39,010 --> 00:06:41,010
we're just going
to see loading app.

130
00:06:45,420 --> 00:06:47,420
If you followed that
5 minute tutorial,

131
00:06:47,420 --> 00:06:51,340
you probably are using
SystemJS to load Angular.

132
00:06:51,340 --> 00:06:52,920
And inside this
script tag, you have

133
00:06:52,920 --> 00:06:54,720
something that looks like this.

134
00:06:54,720 --> 00:06:56,670
This bit of code
is going to look

135
00:06:56,670 --> 00:06:59,970
for a main.ts file, which
is where we're going

136
00:06:59,970 --> 00:07:02,090
to put our applications code.

137
00:07:02,090 --> 00:07:05,090
This bit of code also makes sure
that error messages are printed

138
00:07:05,090 --> 00:07:08,760
out to the browser console.

139
00:07:08,760 --> 00:07:11,300
Let's jump in and write
our first TypeScript file.

140
00:07:11,300 --> 00:07:13,800
It's going to be main.ts.

141
00:07:13,800 --> 00:07:17,760
Inside here, we're going to
import an Angular library.

142
00:07:17,760 --> 00:07:20,970
That import keyword
is an ES2015 feature

143
00:07:20,970 --> 00:07:25,590
used to import functions,
objects, or primitives.

144
00:07:25,590 --> 00:07:28,340
Here you can see we're
importing component.

145
00:07:28,340 --> 00:07:32,220
It's a function that will
allow us to create components,

146
00:07:32,220 --> 00:07:34,420
which are the basic
building blocks of Angular

147
00:07:34,420 --> 00:07:35,840
applications.

148
00:07:35,840 --> 00:07:40,720
A component controls a portion
of our screen or web page.

149
00:07:40,720 --> 00:07:42,130
So as you can
imagine, we're going

150
00:07:42,130 --> 00:07:44,630
to be creating a bunch of these.

151
00:07:44,630 --> 00:07:46,880
This symbol you see
here, whenever you

152
00:07:46,880 --> 00:07:49,420
see this symbol in this course.

153
00:07:49,420 --> 00:07:51,760
It means we're working
with a component.

154
00:07:55,670 --> 00:07:57,970
I mentioned that
component is a function.

155
00:07:57,970 --> 00:08:00,590
It's actually a
decorator function.

156
00:08:00,590 --> 00:08:02,970
A decorator function
adds additional behavior

157
00:08:02,970 --> 00:08:06,760
to our class from
outside our class.

158
00:08:06,760 --> 00:08:11,470
It's a bit of code we declare
immediately before the class.

159
00:08:11,470 --> 00:08:15,510
So here's our class
app component,

160
00:08:15,510 --> 00:08:18,170
and right before that
is where we're going

161
00:08:18,170 --> 00:08:20,840
to write our decorator code.

162
00:08:20,840 --> 00:08:23,840
And it's that decorator that
turns our plain old JavaScript

163
00:08:23,840 --> 00:08:26,420
class into a component.

164
00:08:26,420 --> 00:08:28,630
You'll notice here, we're
using our component symbol

165
00:08:28,630 --> 00:08:30,010
in two pieces.

166
00:08:30,010 --> 00:08:32,800
The bottom piece for our
class, and the top piece

167
00:08:32,800 --> 00:08:35,260
for our decorator.

168
00:08:35,260 --> 00:08:36,800
Let's code out our component.

169
00:08:36,800 --> 00:08:38,470
It looks something like this.

170
00:08:38,470 --> 00:08:40,840
We write add component.

171
00:08:40,840 --> 00:08:45,090
Inside there, there's an
object with selector, my app,

172
00:08:45,090 --> 00:08:47,840
template, and some HTML.

173
00:08:47,840 --> 00:08:50,720
The at component syntax is
used to apply our component

174
00:08:50,720 --> 00:08:52,510
decorator to our class.

175
00:08:52,510 --> 00:08:54,510
You might not have seen
this before because it's

176
00:08:54,510 --> 00:08:56,090
a TypeScript feature.

177
00:08:56,090 --> 00:08:57,880
Then, we specify the selector.

178
00:08:57,880 --> 00:09:00,510
This is the CSS selector
for the HTML element

179
00:09:00,510 --> 00:09:02,420
where we want the
component to load.

180
00:09:02,420 --> 00:09:04,630
And if we look back
on our index HTML,

181
00:09:04,630 --> 00:09:07,670
we can see this corresponds
to the custom tag we created.

182
00:09:07,670 --> 00:09:10,170
Then, the template
is where we put

183
00:09:10,170 --> 00:09:14,220
the content we want to
load inside our selector.

184
00:09:14,220 --> 00:09:16,340
The configuration lines
inside the decorator

185
00:09:16,340 --> 00:09:18,550
are sometimes referred
to as metadata.

186
00:09:22,260 --> 00:09:25,420
Next, we need to declare
our root Angular module.

187
00:09:25,420 --> 00:09:29,010
Modules are how we organize
our application in Angular.

188
00:09:29,010 --> 00:09:31,420
One app might have
multiple modules,

189
00:09:31,420 --> 00:09:35,090
but we need to declare
a root module, which

190
00:09:35,090 --> 00:09:37,760
we'll need to launch the app.

191
00:09:37,760 --> 00:09:39,590
So here you can
see in our main.ts,

192
00:09:39,590 --> 00:09:44,590
the first thing we need to do
is import the NgModule library.

193
00:09:44,590 --> 00:09:46,670
Then, we'll write @NgModule.

194
00:09:46,670 --> 00:09:49,510
This is a decorator
function, and like before, it

195
00:09:49,510 --> 00:09:51,050
takes some metadata.

196
00:09:51,050 --> 00:09:53,670
Here, we're going to send in
a list of all the components

197
00:09:53,670 --> 00:09:57,300
inside of this module,
all of the declarations

198
00:09:57,300 --> 00:09:59,170
inside that array.

199
00:09:59,170 --> 00:10:01,300
Then, we need to
declare a class,

200
00:10:01,300 --> 00:10:04,550
because every decorator
function decorates a class.

201
00:10:08,800 --> 00:10:10,510
Now, we need to include
some dependencies

202
00:10:10,510 --> 00:10:14,550
to render our application,
specifically, browser module.

203
00:10:14,550 --> 00:10:17,840
That's the module we need
to render Angular websites.

204
00:10:17,840 --> 00:10:20,720
And platform browser dynamic.

205
00:10:20,720 --> 00:10:24,090
This is an Angular library
which will render the website.

206
00:10:24,090 --> 00:10:28,220
This will allow us to bootstrap,
or launch the application.

207
00:10:31,010 --> 00:10:33,260
To use those dependencies,
we'll put them

208
00:10:33,260 --> 00:10:35,470
into the NgModule metadata.

209
00:10:35,470 --> 00:10:39,510
First, in the imports, we'll
load in browser module.

210
00:10:39,510 --> 00:10:40,970
This is the required
dependencies

211
00:10:40,970 --> 00:10:42,380
to launch your app
in the browser.

212
00:10:42,380 --> 00:10:46,050
Then we need to indicate the
root component, the component

213
00:10:46,050 --> 00:10:49,170
that should get loaded
first when the Angular

214
00:10:49,170 --> 00:10:51,920
application gets bootstrapped.

215
00:10:51,920 --> 00:10:54,670
Then, we need to use
the platform browser

216
00:10:54,670 --> 00:10:57,760
dynamic function and
bootstrap our app module.

217
00:11:02,010 --> 00:11:05,470
So now when our application gets
loaded, it gets bootstrapped,

218
00:11:05,470 --> 00:11:06,760
calls app module.

219
00:11:06,760 --> 00:11:10,170
App module realizes, oh,
it's that app component

220
00:11:10,170 --> 00:11:11,220
that should get loaded.

221
00:11:11,220 --> 00:11:13,720
It loads the app
component, which

222
00:11:13,720 --> 00:11:17,050
then goes looking for
the my app selector

223
00:11:17,050 --> 00:11:18,300
back in our index.html.

224
00:11:22,260 --> 00:11:24,720
Components are the building
blocks of our Angular

225
00:11:24,720 --> 00:11:28,970
application, and they nest
very well inside of each other.

226
00:11:28,970 --> 00:11:31,340
An app might look
something like this,

227
00:11:31,340 --> 00:11:33,670
where you have one big
component, and the header

228
00:11:33,670 --> 00:11:37,090
component, maybe a sidebar
component, and little list

229
00:11:37,090 --> 00:11:40,590
components, and each component
can have its own class file,

230
00:11:40,590 --> 00:11:44,920
HTML file, and CSS file.

231
00:11:44,920 --> 00:11:47,920
So we have our first component,
but it's not dynamic at all.

232
00:11:47,920 --> 00:11:50,920
Let's start thinking about
how to send data around.

233
00:11:50,920 --> 00:11:54,220
So if we have a property
inside of our component,

234
00:11:54,220 --> 00:11:56,220
let's create a title
property, which

235
00:11:56,220 --> 00:11:58,510
has the value Ultra Racing.

236
00:11:58,510 --> 00:12:02,300
Notice here, inside a TypeScript
class, we don't use the var

237
00:12:02,300 --> 00:12:06,470
or let key words to
declare class properties.

238
00:12:06,470 --> 00:12:09,970
Though, in TypeScript,
you still use var or let,

239
00:12:09,970 --> 00:12:11,920
but, you know, in methods.

240
00:12:11,920 --> 00:12:13,470
So the question
we're asking now is

241
00:12:13,470 --> 00:12:16,550
how do we put this
class property

242
00:12:16,550 --> 00:12:17,510
inside of our template?

243
00:12:20,170 --> 00:12:23,420
To print properties, we use
something called interpolation.

244
00:12:23,420 --> 00:12:24,670
See those curly braces?

245
00:12:24,670 --> 00:12:26,920
Inside there, we can
specify a component property

246
00:12:26,920 --> 00:12:28,550
we want to print to the screen.

247
00:12:28,550 --> 00:12:29,970
So now, if we load
up the browser,

248
00:12:29,970 --> 00:12:32,670
we can see that it
prints out Ultra Racing.

249
00:12:35,420 --> 00:12:37,420
But what if we have
an object that we

250
00:12:37,420 --> 00:12:38,590
want to print to the screen?

251
00:12:38,590 --> 00:12:41,130
Here, you can see
our car part object

252
00:12:41,130 --> 00:12:45,340
with different keys and values.

253
00:12:45,340 --> 00:12:49,800
To do this, we simply use more
interpolation and access car

254
00:12:49,800 --> 00:12:53,380
part.name, car part
description, car part in stock,

255
00:12:53,380 --> 00:12:54,760
like you see here.

256
00:12:54,760 --> 00:12:57,130
Now, you'll notice, our
single quotes disappear.

257
00:12:57,130 --> 00:13:02,010
This is because this time
we need to use back ticks.

258
00:13:02,010 --> 00:13:05,670
Using back ticks allows us to
have template strings, which

259
00:13:05,670 --> 00:13:07,590
allow us to be multi-line.

260
00:13:07,590 --> 00:13:12,090
This is another ES2015
feature enabled by TypeScript.

261
00:13:12,090 --> 00:13:14,090
So now, if we load
up our page, we

262
00:13:14,090 --> 00:13:18,300
can see it prints
out our object.

263
00:13:18,300 --> 00:13:20,800
Almost time to create your first
component, but first, let's

264
00:13:20,800 --> 00:13:22,380
review what we learned.

265
00:13:22,380 --> 00:13:25,800
Angular is a framework for
dynamic web applications.

266
00:13:25,800 --> 00:13:28,720
We're coding Angular using
TypeScript, a language that

267
00:13:28,720 --> 00:13:31,050
transpiles into JavaScript.

268
00:13:31,050 --> 00:13:34,880
NgModules group Angular code
into blocks of functionality.

269
00:13:34,880 --> 00:13:36,550
Components are the
basic building blocks

270
00:13:36,550 --> 00:13:38,630
of any Angular application.

271
00:13:38,630 --> 00:13:41,470
We use a custom
HTML tag or selector

272
00:13:41,470 --> 00:13:43,010
to show where we
want our component

273
00:13:43,010 --> 00:13:45,340
to load inside our HTML.

274
00:13:45,340 --> 00:13:48,050
Decorators are what turn
our plain TypeScript classes

275
00:13:48,050 --> 00:13:50,170
into components or
Angular modules.

276
00:13:53,550 --> 00:13:57,130
Now, it's time for you to
start coding some Angular.

277
00:13:57,130 --> 00:14:00,260
And I'll see you
in the next level.

278
00:14:00,260 --> 00:14:01,920
So what-- though so.

279
00:14:01,920 --> 00:14:04,340
It gets bigger every time.

280
00:14:04,340 --> 00:14:08,170
FYI, this has nothing
to do-- FY-- FY?

281
00:14:08,170 --> 00:14:10,720
This is how it gets done.

