1
00:00:00,000 --> 00:00:26,612
(Music)

2
00:00:26,613 --> 00:00:28,421
Hi everyone.  I'm Jon Friskics,

3
00:00:28,422 --> 00:00:30,444
and I'm Sarah Holderness,

4
00:00:30,445 --> 00:00:33,403
and in this Watch Us Build episode we're going to take the app that we

5
00:00:33,404 --> 00:00:36,670
built in the Try Django course Watch Us Build, which is that Team

6
00:00:36,671 --> 00:00:40,018
Directory app with Django, and we're going to expand upon that using

7
00:00:40,019 --> 00:00:43,476
some of the topics that Sarah taught in the Digging Into Django course.

8
00:00:43,477 --> 00:00:45,609
So what are we going to be building today?

9
00:00:45,610 --> 00:00:49,303
Yeah, exactly, so we're going to continue building that Team Directory

10
00:00:49,304 --> 00:00:54,832
app by adding some more features.  So if we take a look at our

11
00:00:54,833 --> 00:00:58,488
internal Team Directory app that was already built in Rails,

12
00:00:58,489 --> 00:01:03,301
so we've already had this for Code School, you can click on each user

13
00:01:03,302 --> 00:01:07,365
and see the detail page, so we're going to add a detail page.

14
00:01:07,366 --> 00:01:13,849
And then you can see here I can't edit this page, but I can edit my

15
00:01:13,850 --> 00:01:18,238
own, so we're going to add some authentication that checks for that,

16
00:01:18,239 --> 00:01:22,945
and then we're going to also add an edit form where we can edit our

17
00:01:22,946 --> 00:01:28,330
own profile and add some different responsibilities, bio,

18
00:01:28,331 --> 00:01:33,603
our birthday, and things like that.  And then the way we're going to

19
00:01:33,604 --> 00:01:42,885
do authentication is using social authentication, which if we go to an

20
00:01:42,886 --> 00:01:47,337
incognito window, I can show you what that looks like.

21
00:01:47,338 --> 00:01:51,278
So it prompts us to log in with our Google account, so we're going to

22
00:01:51,279 --> 00:01:56,964
use social authentication with Google so that it's going to check

23
00:01:56,965 --> 00:01:58,983
whether we're a Code School employee or not.

24
00:01:58,984 --> 00:02:02,947
Gotcha.  Very cool.  Awesome.  So let's get started.

25
00:02:02,948 --> 00:02:09,995
Okay.  So what we're going to do is start with the project we created last time.

26
00:02:09,996 --> 00:02:14,839
So we got to the point where we were displaying all the employees,

27
00:02:14,840 --> 00:02:18,129
so we're going to clone that down and start from there.

28
00:02:18,130 --> 00:02:19,063
Awesome.

29
00:02:19,064 --> 00:02:31,817
So I'm going to grab the repo link there and do git clone and pull that down.

30
00:02:31,818 --> 00:02:36,197
Cool.

31
00:02:36,198 --> 00:02:42,144
Okay, and so last time we created a virtual environment where we could

32
00:02:42,145 --> 00:02:47,143
install the packages we need, so I'm going to go ahead and do that as

33
00:02:47,144 --> 00:02:53,564
well, so virtualenv.  And this just allows you to install packages

34
00:02:53,565 --> 00:02:57,674
specific to a certain project so you can have different versions of

35
00:02:57,675 --> 00:03:00,376
Django for different projects and different packages.

36
00:03:00,377 --> 00:03:04,384
Cool.  And we didn't commit our virtualenv stuff to GitHub.

37
00:03:04,385 --> 00:03:06,914
We just are going to recreate it now whenever we pull that repo down.

38
00:03:06,915 --> 00:03:15,486
Right, uh-huh, yeah.  Okay, and so I did the command virtualenv -p

39
00:03:15,487 --> 00:03:22,954
python3 because I'm using Python 3, and we can see that created the venv directory.

40
00:03:22,955 --> 00:03:28,970
And I'm just going to activate that with source venv/bin/activate,

41
00:03:28,971 --> 00:03:34,134
and now you can see there's this venv in front of my terminal,

42
00:03:34,135 --> 00:03:41,877
so I know it's activated.  And then from there what we would normally

43
00:03:41,878 --> 00:03:46,503
do is install whatever we need for our project, but we have an

44
00:03:46,504 --> 00:03:50,900
existing project, and we already created that requirements.txt file.

45
00:03:50,901 --> 00:03:52,833
Oh yeah, I remember that.

46
00:03:52,834 --> 00:04:04,543
So if I look at that, so we can see we had Django, Gunicorn,

47
00:04:04,544 --> 00:04:08,975
which allowed us to run a server on Heroku because we deployed our app

48
00:04:08,976 --> 00:04:13,569
to Heroku last time, and the WhiteNoise was also needed for Heroku to

49
00:04:13,570 --> 00:04:15,026
collect our static files.

50
00:04:15,027 --> 00:04:15,880
Gotcha.

51
00:04:15,881 --> 00:04:19,046
So we're just going to install everything we had for that app.

52
00:04:19,047 --> 00:04:19,487
Okay.

53
00:04:19,488 --> 00:04:26,360
So we're going to do pip install -r, which says we're going to give it

54
00:04:26,361 --> 00:04:31,741
this file, and so it's installing Django, Gunicorn, and WhiteNoise.

55
00:04:31,742 --> 00:04:34,562
Nice, so it kind of like lists our dependencies, and rather than

56
00:04:34,563 --> 00:04:38,456
install them all by hand, we can just pull them out of that file and

57
00:04:38,457 --> 00:04:39,326
have them install from there.

58
00:04:39,327 --> 00:04:39,899
Uh-huh.

59
00:04:39,900 --> 00:04:40,707
Cool.

60
00:04:40,708 --> 00:04:46,450
And so that'll be helpful as well because we'll install Python Social

61
00:04:46,451 --> 00:04:50,344
Auth for the social authentication, and then we can add that to our

62
00:04:50,345 --> 00:04:54,228
requirements file if we wanted to play to Heroku, so that'll come in

63
00:04:54,229 --> 00:04:55,956
handy later too.

64
00:04:55,957 --> 00:04:57,524
Great, great.

65
00:04:57,525 --> 00:05:10,077
So to get started, we'll open this project.

66
00:05:10,078 --> 00:05:14,646
I actually want to open it from the level above.

67
00:05:14,647 --> 00:05:24,757
Sorry.  So I'll do atom . to open it from this directory, and then now

68
00:05:24,758 --> 00:05:29,407
I can see Directory, which is the outer project with my settings and

69
00:05:29,408 --> 00:05:32,936
URLs, and then my current app, which is www.

70
00:05:32,937 --> 00:05:34,146
Cool.

71
00:05:34,147 --> 00:05:40,978
And so we can see where we left off by running our server, so we'll do

72
00:05:40,979 --> 00:05:45,838
python manage.py runserver and see where we left off there.

73
00:05:45,839 --> 00:05:52,518
So it says this is running at localhost port 8000, so we'll go see

74
00:05:52,519 --> 00:05:58,141
what we have there.  Okay, we see it.  So yeah, so where we left off

75
00:05:58,142 --> 00:06:01,987
was we're displaying all of our employees that we loaded into the

76
00:06:01,988 --> 00:06:06,142
database, but we can't click on the detail page.

77
00:06:06,143 --> 00:06:10,863
So we can't click on individual employees, we can't edit them,

78
00:06:10,864 --> 00:06:12,822
so we're going to add that functionality now.

79
00:06:12,823 --> 00:06:13,874
Awesome.

80
00:06:13,875 --> 00:06:18,220
So we're going to start with adding a new detail page, and so the

81
00:06:18,221 --> 00:06:24,214
process for that is a URL, a view, and a template.

82
00:06:24,215 --> 00:06:25,549
Right, that sounds familiar.

83
00:06:25,550 --> 00:06:32,109
Yeah, so we'll need to do all of that.  And just to look at our

84
00:06:32,110 --> 00:06:39,323
example again, we'll see what link they use for their detail page.

85
00:06:39,324 --> 00:06:46,875
It's at /members and then the name of the user in this special format.

86
00:06:46,876 --> 00:06:57,095
And this is called a slug, so basically it makes a URL that will work,

87
00:06:57,096 --> 00:06:59,104
a working URL out of the name.

88
00:06:59,105 --> 00:06:59,619
Gotcha.

89
00:06:59,620 --> 00:07:04,244
So it replaces spaces with dashes and makes everything lowercase.

90
00:07:04,245 --> 00:07:06,525
Gotcha.  Just trying to find like a unique identifier somehow.

91
00:07:06,526 --> 00:07:11,650
Yeah.  And so I think that we should do that as well, so we'll kind of

92
00:07:11,651 --> 00:07:16,035
copy their model, and we'll create a slug-filled inner model that will

93
00:07:16,036 --> 00:07:17,117
store this slug.

94
00:07:17,118 --> 00:07:20,159
Nice, okay.

95
00:07:20,160 --> 00:07:24,762
But before we get there, let's create our URL that would match,

96
00:07:24,763 --> 00:07:36,565
members and then a slug.  So r and then a string, and we're going to

97
00:07:36,566 --> 00:07:44,357
do start of the regex and then members/.  And then we're going to

98
00:07:44,358 --> 00:07:49,420
capture the slug, so that's going to be in parentheses, and then we're

99
00:07:49,421 --> 00:07:56,836
going to want to match any characters, so a-z.

100
00:07:56,837 --> 00:08:02,741
Zero through 9 is also okay, and dash is okay.

101
00:08:02,742 --> 00:08:08,605
And then we put that all in square brackets, so that's going to be one expression.

102
00:08:08,606 --> 00:08:14,120
And then if we put the plus on there, that can be repeated multiple times.

103
00:08:14,121 --> 00:08:16,566
Right, it's like more than one letter is basically is what it's saying.

104
00:08:16,567 --> 00:08:20,026
Yeah, more than one letter, more than one dash, all that stuff.

105
00:08:20,027 --> 00:08:21,780
Yeah, cool.

106
00:08:21,781 --> 00:08:28,820
Yep.  And then if that's matched, we'll go to our detail view,

107
00:08:28,821 --> 00:08:33,308
so we'll create that in a second.  And we'll also get in the habit of

108
00:08:33,309 --> 00:08:39,676
naming our URLs, and that'll make it easier to link to them later,

109
00:08:39,677 --> 00:08:40,999
so we'll see that later.

110
00:08:41,000 --> 00:08:41,811
Okay.

111
00:08:41,812 --> 00:08:47,096
So we'll use the detail name, and then while we're at it, we'll add a

112
00:08:47,097 --> 00:08:59,957
name for our index URL.  Okay, so next up we would create our view.

113
00:08:59,958 --> 00:09:01,135
Okay.

114
00:09:01,136 --> 00:09:09,546
So in our views.py file we'll define detail, and it's going to take in

115
00:09:09,547 --> 00:09:15,487
a request and that slug we were talking about, so that's going to be,

116
00:09:15,488 --> 00:09:19,218
for instance, sarah-holderness, and that's going to tell us which

117
00:09:19,219 --> 00:09:20,703
employee we want to look up.

118
00:09:20,704 --> 00:09:23,666
Gotcha.  Yeah, yeah.

119
00:09:23,667 --> 00:09:28,120
So right now I'm just going to fill in pass right now and not fill

120
00:09:28,121 --> 00:09:31,346
this in yet until we've created that slug field, so I'll just come

121
00:09:31,347 --> 00:09:32,950
back to this in a second.

122
00:09:32,951 --> 00:09:34,719
Okay.

123
00:09:34,720 --> 00:09:41,134
And then in models.py we're going to add our slug field to our model.

124
00:09:41,135 --> 00:09:47,679
So we can do models.SlugField, and we'll just give it the same

125
00:09:47,680 --> 00:09:55,102
max_length as the name.  And what that's going to do is Django is

126
00:09:55,103 --> 00:09:58,975
going to help verify that that's actually a slug and in that format

127
00:09:58,976 --> 00:10:01,213
that is a viable URL.

128
00:10:01,214 --> 00:10:01,864
Nice.

129
00:10:01,865 --> 00:10:08,036
Yeah.  So now that we've added that, we need to do a couple things.

130
00:10:08,037 --> 00:10:18,634
We need to run migrations, and we'll do that now with python manage.py makemigrations.

131
00:10:18,635 --> 00:10:20,416
Because we've changed the database, we need to ---.

132
00:10:20,417 --> 00:10:25,202
Uh-huh.  And it says provide a one-off default now.

133
00:10:25,203 --> 00:10:31,069
So that's fine.  We'll just enter the number 1.

134
00:10:31,070 --> 00:10:35,737
And so that'll be the default for everyone, but we'll replace that in a second.

135
00:10:35,738 --> 00:10:37,425
Okay.

136
00:10:37,426 --> 00:10:44,365
So we've added the field slug to person is what is in our second

137
00:10:44,366 --> 00:10:50,624
migration file, and now we can run python manage.py migrate to

138
00:10:50,625 --> 00:10:52,779
actually apply that.

139
00:10:52,780 --> 00:10:53,635
Cool.

140
00:10:53,636 --> 00:11:04,021
Yeah.  So another thing is last time we used this fixture to load all

141
00:11:04,022 --> 00:11:09,603
of our data into the database, each employee's name and everything,

142
00:11:09,604 --> 00:11:15,919
and I went ahead and created another one for the slug field.

143
00:11:15,920 --> 00:11:16,472
Oh, nice.

144
00:11:16,473 --> 00:11:19,981
Yeah, because we don't want them all to have the same default value.

145
00:11:19,982 --> 00:11:20,641
Sure.

146
00:11:20,642 --> 00:11:24,922
Yeah, so we just want to start that out with some working slug fields.

147
00:11:24,923 --> 00:11:25,506
Cool.

148
00:11:25,507 --> 00:11:35,177
So let me go grab that.  (Working)

149
00:11:35,178 --> 00:11:41,896
Okay, so now that we have that field, we can run our loaddata command,

150
00:11:41,897 --> 00:11:46,180
and this is just if you have one of those fixtures.

151
00:11:46,181 --> 00:11:53,794
And it's all one word, loaddata, and then wherever that file is.

152
00:11:53,795 --> 00:11:58,167
And so it says installed 43 objects.  And so now if we go and look at

153
00:11:58,168 --> 00:12:00,770
our admin, it should have that slug field.

154
00:12:00,771 --> 00:12:05,643
Nice.  Can we check out that slug-added file and see what that looks like too?

155
00:12:05,644 --> 00:12:11,181
Yeah.  So basically, it's the exact same as the file we had before.

156
00:12:11,182 --> 00:12:13,948
We just added this slug field for each employee.

157
00:12:13,949 --> 00:12:14,818
Oh, nice.

158
00:12:14,819 --> 00:12:15,581
Yeah.

159
00:12:15,582 --> 00:12:17,796
Very cool.

160
00:12:17,797 --> 00:12:31,855
So now if we, since we're running our server, we can go into the admin.  (Working)

161
00:12:31,856 --> 00:12:35,146
Okay, so you have a slug field there.  And then if you wanted to edit

162
00:12:35,147 --> 00:12:46,183
it to something like ---, so it checks whether it's valid, and it says

163
00:12:46,184 --> 00:12:48,342
it has to be letters, numbers, or hyphens.

164
00:12:48,343 --> 00:12:52,634
Nice.  It's just like built-in validation into that slug field type.

165
00:12:52,635 --> 00:12:53,057
Yeah.

166
00:12:53,058 --> 00:12:54,666
Cool.

167
00:12:54,667 --> 00:13:00,701
And then we can even take that a step further and override the save

168
00:13:00,702 --> 00:13:07,151
method here and so that for each new employee that we want to create,

169
00:13:07,152 --> 00:13:10,939
once it saves to the database, it'll automatically create the slug

170
00:13:10,940 --> 00:13:12,136
field from their name.

171
00:13:12,137 --> 00:13:13,109
Oh, nice, yeah.

172
00:13:13,110 --> 00:13:16,442
Yeah, so that's really helpful to kind of automate things.

173
00:13:16,443 --> 00:13:17,020
Cool.

174
00:13:17,021 --> 00:13:30,062
So we're going to do def save, and this takes in *args and **kwargs.

175
00:13:30,063 --> 00:13:35,595
And what we're doing is we're overriding the default save value so it

176
00:13:35,596 --> 00:13:39,692
takes these arguments by default.  And what this is is this would be

177
00:13:39,693 --> 00:13:45,220
if you had an ordered list of these things in that order or if you had

178
00:13:45,221 --> 00:13:49,483
a dictionary where you specified name equals this, email equals this.

179
00:13:49,484 --> 00:13:50,951
So that's what that means.

180
00:13:50,952 --> 00:13:52,799
Gotcha.

181
00:13:52,800 --> 00:13:58,469
And here we're just going to --- or I think this also has to take in self.

182
00:13:58,470 --> 00:14:00,755
Oh yeah, probably because if we're going to check like the state of the model.

183
00:14:00,756 --> 00:14:10,018
Yeah, yeah.  Okay, so one check we can do is if not self.pk.

184
00:14:10,019 --> 00:14:13,732
So that's saying basically has this been already created?

185
00:14:13,733 --> 00:14:19,076
If it has a primary key, it has, so we don't want to override the save

186
00:14:19,077 --> 00:14:20,948
thing and create a slug.

187
00:14:20,949 --> 00:14:21,720
Gotcha.

188
00:14:21,721 --> 00:14:26,836
So we're just checking that.  Otherwise, we're going to set slug equal

189
00:14:26,837 --> 00:14:32,274
to, and here we're going to use a built-in Django function.

190
00:14:32,275 --> 00:14:41,371
So we're going to do from django.utils.text import slugify.

191
00:14:41,372 --> 00:14:50,960
Yeah.  So it's going to slugify our name.  And then once that's done,

192
00:14:50,961 --> 00:14:56,417
we'll call the super save method, which is super, takes in the model

193
00:14:56,418 --> 00:15:05,309
name, self, the *args, and the **kwargs again.

194
00:15:05,310 --> 00:15:12,398
Okay, so yeah, so we'll give that a try and see if that works.

195
00:15:12,399 --> 00:15:12,839
Okay.

196
00:15:12,840 --> 00:15:17,505
I'm not sure if we have to run a migration for that, so ---

197
00:15:17,506 --> 00:15:19,140
Because we changed the model.

198
00:15:19,141 --> 00:15:23,894
Right.  So let me just see what happens here.

199
00:15:23,895 --> 00:15:29,576
Oh, another thing that we'll need to do, and this will require a

200
00:15:29,577 --> 00:15:36,003
migration, is we want to allow blanks because basically we don't want

201
00:15:36,004 --> 00:15:39,441
anybody to fill in the slug.  We want to do it for them.

202
00:15:39,442 --> 00:15:44,257
So we want the blank to be True, so we will have to run a migration for that.

203
00:15:44,258 --> 00:15:45,212
Gotcha.

204
00:15:45,213 --> 00:15:58,790
So we'll just run a migration again and then apply that and run our server.

205
00:15:58,791 --> 00:16:05,692
Okay, so now if we go into Persons, and let's add a new person,

206
00:16:05,693 --> 00:16:14,259
so we will leave the Slug blank.

207
00:16:14,260 --> 00:16:15,189
Okay.

208
00:16:15,190 --> 00:16:25,179
So now if we --- oh, I thought I'd see it here, but oh.

209
00:16:25,180 --> 00:16:30,932
Oh, it looks like maybe our save method didn't work because it's not here.

210
00:16:30,933 --> 00:16:33,778
So let's see what happened there.

211
00:16:33,779 --> 00:16:36,966
Oh, so I think what's happening is in super ---

212
00:16:36,967 --> 00:16:37,947
We're not calling save.

213
00:16:37,948 --> 00:16:41,258
--- we're not calling save ever, right, so just probably call super on

214
00:16:41,259 --> 00:16:44,487
the first two and then like .save I guess with like parentheses.

215
00:16:44,488 --> 00:16:45,584
Yeah, exactly.

216
00:16:45,585 --> 00:16:50,895
Cool.  Yeah, that makes sense.

217
00:16:50,896 --> 00:16:55,680
Alright, so let's give that a try.  Oops!

218
00:16:55,681 --> 00:17:00,194
Oh, we turned the server off maybe.

219
00:17:00,195 --> 00:17:11,566
Alright.  Okay, so we'll go ahead and create new person.

220
00:17:11,567 --> 00:17:16,197
Okay, so we'll save it without a slug, and if we go back in,

221
00:17:16,198 --> 00:17:18,214
it generated a slug for us.

222
00:17:18,215 --> 00:17:20,853
Very cool.  Yeah, so we don't really have to worry about ever making

223
00:17:20,854 --> 00:17:23,030
one now because it's always going to be there.

224
00:17:23,031 --> 00:17:24,515
Uh-huh.  It's really helpful.

225
00:17:24,516 --> 00:17:25,405
Nice.

226
00:17:25,406 --> 00:17:28,915
And it makes it a little less error prone too because you're doing it

227
00:17:28,916 --> 00:17:31,540
for them, so it's not going to be some random name.

228
00:17:31,541 --> 00:17:33,469
It's actually going to be based on their name.

229
00:17:33,470 --> 00:17:35,748
Nice.

230
00:17:35,749 --> 00:17:44,476
So now that that's set up, we actually have a slug to work with in our detail view.

231
00:17:44,477 --> 00:17:49,844
So we can look for the person that matches that slug field, so we can

232
00:17:49,845 --> 00:17:56,591
say person is equal to People.  Or sorry.  Sorry.

233
00:17:56,592 --> 00:18:00,026
I forgot the name of the model.  Okay, person is equal to the Person

234
00:18:00,027 --> 00:18:10,781
model .objects.get, and we'll do slug=slug.

235
00:18:10,782 --> 00:18:14,699
And so that's saying we want the person slug field equal to this slug

236
00:18:14,700 --> 00:18:15,940
field we passed in.

237
00:18:15,941 --> 00:18:17,186
Oh, from the URL, right?

238
00:18:17,187 --> 00:18:17,710
Right.

239
00:18:17,711 --> 00:18:18,963
Cool.

240
00:18:18,964 --> 00:18:26,793
And then we will return render of the detail template that we still

241
00:18:26,794 --> 00:18:34,735
need to create.  So we'll pass the request detail.html and the person

242
00:18:34,736 --> 00:18:42,764
we just looked up.  And we have to pass a person in this dictionary.

243
00:18:42,765 --> 00:18:43,786
Sure.

244
00:18:43,787 --> 00:18:47,839
So now we can go ahead and create that detail template.

245
00:18:47,840 --> 00:18:57,671
So that goes in our templates directory folder, and we'll call it detail.html.

246
00:18:57,672 --> 00:19:05,868
And just to get some stuff in there, I'm going to copy from index.

247
00:19:05,869 --> 00:19:07,705
Yeah, it makes sense to not have to do all the boilerplate.

248
00:19:07,706 --> 00:19:10,626
Yeah, I don't have to do all the boilerplate.

249
00:19:10,627 --> 00:19:14,332
I'm just going to display these four things for now, the image, name,

250
00:19:14,333 --> 00:19:18,393
title, and email, and I'm going to take out the for loop.

251
00:19:18,394 --> 00:19:22,743
Right, because there's just one now that we're passing in, not multiple.

252
00:19:22,744 --> 00:19:27,456
And the nice thing is I used the variable name person, so this should

253
00:19:27,457 --> 00:19:28,223
still all work.

254
00:19:28,224 --> 00:19:29,487
Oh, great.

255
00:19:29,488 --> 00:19:32,991
So we're just going to display that for now.

256
00:19:32,992 --> 00:19:36,914
And remember our goal is to get to something like this, so we'll have

257
00:19:36,915 --> 00:19:40,323
to add some more fields, but right now we're just going to see if we

258
00:19:40,324 --> 00:19:43,303
can get this basic information displayed.

259
00:19:43,304 --> 00:19:45,508
Sure.

260
00:19:45,509 --> 00:19:52,846
So, yeah, so that should work.  So I'll go ahead and see if that's working.

261
00:19:52,847 --> 00:19:57,377
So we don't have a link set up, so I'll have to manually type in

262
00:19:57,378 --> 00:20:04,547
/members/adam-fortuna, and that will go here.

263
00:20:04,548 --> 00:20:06,221
So it seems like it's working.

264
00:20:06,222 --> 00:20:07,541
Definitely.

265
00:20:07,542 --> 00:20:12,501
Yeah, and so now we can just link there from the home page to make it

266
00:20:12,502 --> 00:20:24,420
easier for ourselves.  So we can make the whole image a link and do href=.

267
00:20:24,421 --> 00:20:30,735
Here is where we can use that URL naming that we talked about earlier.

268
00:20:30,736 --> 00:20:42,057
So we named this URL detail, so in here, sorry, in the index template,

269
00:20:42,058 --> 00:20:47,036
sorry, I'll close all the other ones just to make it better,

270
00:20:47,037 --> 00:20:52,494
we can use this url tag, the name of our template, and then any

271
00:20:52,495 --> 00:20:56,255
parameters it needs, and it needs the slug.

272
00:20:56,256 --> 00:20:58,431
Oh, right.

273
00:20:58,432 --> 00:21:01,495
So we can do person.slug.

274
00:21:01,496 --> 00:21:08,169
Right, because it's in there in that person object.

275
00:21:08,170 --> 00:21:12,576
Oh, actually I don't think I need the double brackets because we're

276
00:21:12,577 --> 00:21:14,581
already inside this tag.

277
00:21:14,582 --> 00:21:16,273
Gotcha, gotcha.

278
00:21:16,274 --> 00:21:21,211
Okay, so let's see if that's working on this page.

279
00:21:21,212 --> 00:21:28,951
Oops, I had forgot to close some stuff.  Okay, so I have the anchor tag.

280
00:21:28,952 --> 00:21:30,707
Does it close the anchor maybe?

281
00:21:30,708 --> 00:21:35,848
Yes.  Okay, so close that, and then the image will go inside,

282
00:21:35,849 --> 00:21:38,976
and then I can close the anchor tag.

283
00:21:38,977 --> 00:21:40,229
Yeah, that makes sense.

284
00:21:40,230 --> 00:21:44,863
Okay, and hopefully that doesn't ---.  Okay, so now we can click on

285
00:21:44,864 --> 00:21:49,194
the image, and it'll take us to the detail page for everybody hopefully.

286
00:21:49,195 --> 00:21:51,506
Yeah, yeah.  Awesome.

287
00:21:51,507 --> 00:21:58,588
Okay, so we have the detail, URL, view, and template set up right now.

288
00:21:58,589 --> 00:22:04,681
So the next thing we wanted to do was if we look at our example app

289
00:22:04,682 --> 00:22:09,075
that we're aiming for again is add some of these details.

290
00:22:09,076 --> 00:22:18,146
So we've got RESPONSIBILITIES, BIO, Twitter, GitHub, Website, and Birthday.

291
00:22:18,147 --> 00:22:20,167
Maybe that's what we'll start with there.

292
00:22:20,168 --> 00:22:23,611
Okay, yeah, sounds good.

293
00:22:23,612 --> 00:22:27,605
Okay, so ---

294
00:22:27,606 --> 00:22:29,907
So are these going to be --- we're just going to be able to kind of

295
00:22:29,908 --> 00:22:33,058
copy the same fields, maybe make them different data types and

296
00:22:33,059 --> 00:22:34,593
everything to get all that, right?

297
00:22:34,594 --> 00:22:35,117
Right.

298
00:22:35,118 --> 00:22:36,924
Just sort of change the names and stuff?

299
00:22:36,925 --> 00:22:42,986
Right.  So responsibilities will be a CharField, bio will be a

300
00:22:42,987 --> 00:22:47,648
CharField, same for Twitter, GitHub, and then the only thing that's

301
00:22:47,649 --> 00:22:51,771
probably different is we can make the birthday a date time field,

302
00:22:51,772 --> 00:22:58,345
and the phone number we could make a CharField, or we could actually

303
00:22:58,346 --> 00:23:03,285
do some phone number validation on that and use a regex validator.

304
00:23:03,286 --> 00:23:06,389
Cool.  So we'll fast forward as we're typing all this ---

305
00:23:06,390 --> 00:23:07,170
Yeah.

306
00:23:07,171 --> 00:23:20,600
--- starting now.  (Working)

307
00:23:20,601 --> 00:23:24,255
So now that we have all of these fields that we want to display in our

308
00:23:24,256 --> 00:23:27,490
detail page, we'll go ahead and edit our detail template.

309
00:23:27,491 --> 00:23:31,666
Cool, yeah.  Good idea to show them all in there.

310
00:23:31,667 --> 00:23:38,715
And we'll just add them as paragraphs for now.

311
00:23:38,716 --> 00:23:47,344
We probably won't cover too much CSS style in this Watch Us Build,

312
00:23:47,345 --> 00:23:52,848
and we'll just get the data on the page and add that at a future time.

313
00:23:52,849 --> 00:23:54,254
Yep.

314
00:23:54,255 --> 00:24:09,895
Okay, so we'll display the Twitter, GitHub, and then their birthday.

315
00:24:09,896 --> 00:24:14,829
Okay, so now that we've added those fields, we have to do a migration.

316
00:24:14,830 --> 00:24:16,514
Sure, yeah.  It's a lot of new data.

317
00:24:16,515 --> 00:24:23,449
Yeah, so python manage.py makemigrations.  And so it says all the

318
00:24:23,450 --> 00:24:31,361
fields we've added, which looks correct.  And to apply those to the

319
00:24:31,362 --> 00:24:39,766
database we run migrate, and then we can take a look at what that looks like.

320
00:24:39,767 --> 00:24:48,064
If we go to our Directory site and click on --- oops, let me refresh that.

321
00:24:48,065 --> 00:24:52,590
What did I do?  Oh, maybe ---

322
00:24:52,591 --> 00:24:55,064
Oh, was it because we didn't have any data in it so it just made like

323
00:24:55,065 --> 00:24:59,710
empty --- maybe?

324
00:24:59,711 --> 00:25:07,730
Let's look at our views.  So if we go to the detail view and we have person ---

325
00:25:07,731 --> 00:25:12,224
Right.  Is it just that like person.bio, person.twitter has no data

326
00:25:12,225 --> 00:25:15,070
yet because our fixture didn't have that data, right?

327
00:25:15,071 --> 00:25:16,478
Oh, right.  Yeah, sorry.

328
00:25:16,479 --> 00:25:19,645
So it is showing it.  It just doesn't look like anything.

329
00:25:19,646 --> 00:25:21,557
But the birthday was like auto-calculated or whatever.

330
00:25:21,558 --> 00:25:29,147
Yeah, sorry, so yeah.  So let's go ahead and add some fake stuff.

331
00:25:29,148 --> 00:25:40,945
So I have lots of responsibilities.  I do a lot of stuff with Python.

332
00:25:40,946 --> 00:25:58,612
Okay, sarahbtalk, sarahbees.  Okay, so I'll save that, and if we go back, okay.

333
00:25:58,613 --> 00:26:03,668
Alright, so yeah.  So we have our detail page working.

334
00:26:03,669 --> 00:26:07,680
So what we'd like to be able to add now is the ability for users to

335
00:26:07,681 --> 00:26:09,118
edit their own profile.

336
00:26:09,119 --> 00:26:11,222
Yeah, that's a good call because we're doing all this through the

337
00:26:11,223 --> 00:26:13,770
admin right now, but like eventually we don't want to like give

338
00:26:13,771 --> 00:26:15,680
everyone an admin login ---

339
00:26:15,681 --> 00:26:16,339
Right.

340
00:26:16,340 --> 00:26:18,361
--- so we need an edit page somewhere.

341
00:26:18,362 --> 00:26:25,651
And so if we look at that, if I go to the example app and go to my

342
00:26:25,652 --> 00:26:30,959
profile and press the Edit button, I see a form here.

343
00:26:30,960 --> 00:26:33,059
So that's what we want to create.

344
00:26:33,060 --> 00:26:35,239
Cool.

345
00:26:35,240 --> 00:26:41,182
So to do that, we can create a forms.py file.

346
00:26:41,183 --> 00:26:49,396
So that's in our www app forms.py, and from here we'll do from django

347
00:26:49,397 --> 00:26:54,795
import forms, and that's where we'll create our new form,

348
00:26:54,796 --> 00:27:02,897
which is going to be a model form so that it can directly get all the

349
00:27:02,898 --> 00:27:05,888
fields from our model and make things a little easier.

350
00:27:05,889 --> 00:27:08,451
Oh, right.  So we don't have to like manually create all the fields.

351
00:27:08,452 --> 00:27:11,008
We can just sort of run a command that says look at the model,

352
00:27:11,009 --> 00:27:13,722
find all this data, look at all the data types, and just try to build

353
00:27:13,723 --> 00:27:15,603
the appropriate inputs for us.  That'd be convenient.

354
00:27:15,604 --> 00:27:20,765
Yeah, and it does a lot of stuff for us like validation and saving to

355
00:27:20,766 --> 00:27:22,248
the model, so yeah.

356
00:27:22,249 --> 00:27:24,932
Nice.  Are we going to also have to import the model then if we do that?

357
00:27:24,933 --> 00:27:25,514
Yes.

358
00:27:25,515 --> 00:27:26,256
Cool.

359
00:27:26,257 --> 00:27:35,140
So from .models import Person.  Okay, so now we can go ahead and

360
00:27:35,141 --> 00:27:46,797
define class PersonForm.  That is a forms.ModelForm.

361
00:27:46,798 --> 00:27:54,476
And then here we'll say --- I'm kind of forgetting what goes in here,

362
00:27:54,477 --> 00:27:59,638
but I think what we have to start is say this is a Meta class so it's

363
00:27:59,639 --> 00:28:14,291
based off a model, and so we define our model as Person and then our fields.

364
00:28:14,292 --> 00:28:17,490
Right.  So this is going to be like all the different fields in our model, right?

365
00:28:17,491 --> 00:28:21,389
Right.  So basically we're going to want everything except for the

366
00:28:21,390 --> 00:28:24,289
slug because we don't want people to edit that.

367
00:28:24,290 --> 00:28:25,414
Gotcha.

368
00:28:25,415 --> 00:28:45,212
So I'm just going to copy that in and try and get rid of all this.  (Working)

369
00:28:45,213 --> 00:28:48,717
Alright, so now that we have all those fields entered, we can go ahead

370
00:28:48,718 --> 00:28:51,960
and create the edit page, so we'll want to go through creating the

371
00:28:51,961 --> 00:28:54,286
URL, view, and template again.

372
00:28:54,287 --> 00:28:54,650
Awesome.

373
00:28:54,651 --> 00:29:00,825
Yeah.  So the URL is basically going to be the exact same as the

374
00:29:00,826 --> 00:29:08,917
detail, but with edit on the end, so /edit here.

375
00:29:08,918 --> 00:29:13,376
And then we'll go to the edit view, and we'll name this edit.

376
00:29:13,377 --> 00:29:14,251
Cool.

377
00:29:14,252 --> 00:29:20,850
Yep.  And then we can go to views and create our edit view,

378
00:29:20,851 --> 00:29:24,880
and that is going to again take in a request and a slug so we know

379
00:29:24,881 --> 00:29:33,139
which person we're editing.  And then this is going to instantiate

380
00:29:33,140 --> 00:29:36,541
the person form that we just created and then pass that to the

381
00:29:36,542 --> 00:29:37,926
template for displaying.

382
00:29:37,927 --> 00:29:38,745
Okay.

383
00:29:38,746 --> 00:29:47,690
So we can do form = PersonForm, and I'm going to need to import that

384
00:29:47,691 --> 00:29:57,832
so it knows what I'm talking about.  And then I can display that in a

385
00:29:57,833 --> 00:30:07,949
template, so return render, pass the request and edit.html,

386
00:30:07,950 --> 00:30:20,065
and then we're going to pass the form.  Now in our template,

387
00:30:20,066 --> 00:30:25,010
so we're going to create an edit template, and this is going to be

388
00:30:25,011 --> 00:30:31,424
pretty simple just displaying the form.

389
00:30:31,425 --> 00:30:33,329
Okay.

390
00:30:33,330 --> 00:30:40,156
But now what we have is we have a couple of templates now that we're

391
00:30:40,157 --> 00:30:44,883
going to want to have the same like look and feel for, so we can use

392
00:30:44,884 --> 00:30:50,487
template inheritance here to kind of make all of our pages inherit

393
00:30:50,488 --> 00:30:55,536
from the same template and then have the same look without having to

394
00:30:55,537 --> 00:30:57,722
change it in each template.

395
00:30:57,723 --> 00:30:59,469
Gotcha.

396
00:30:59,470 --> 00:31:01,606
So it's kind of like a parent template.

397
00:31:01,607 --> 00:31:07,377
Yeah, yeah, yeah.  We'll call it on the comment base.html.

398
00:31:07,378 --> 00:31:09,989
I'm guessing probably the stuff that goes in there is like the head

399
00:31:09,990 --> 00:31:11,934
tag and that kind of stuff, right?

400
00:31:11,935 --> 00:31:12,478
Right.

401
00:31:12,479 --> 00:31:15,512
Cool.

402
00:31:15,513 --> 00:31:25,997
So we will go ahead and copy all this stuff up to main and put that in base.

403
00:31:25,998 --> 00:31:33,875
And then I'm just copying this from index.html.

404
00:31:33,876 --> 00:31:39,319
And then this is going to be where we tell it to put the content from

405
00:31:39,320 --> 00:31:45,016
our child templates, so we'll create something called a block here,

406
00:31:45,017 --> 00:32:00,328
and we can name it content.  And then we need to end our block.

407
00:32:00,329 --> 00:32:04,546
Okay, so that's going to be our base template, and then in index what

408
00:32:04,547 --> 00:32:11,801
we can do is delete all that stuff, but add our block tag, so we'll add one ---

409
00:32:11,802 --> 00:32:13,430
Gotcha.

410
00:32:13,431 --> 00:32:14,476
--- at the bottom.

411
00:32:14,477 --> 00:32:17,052
And it's going to try to match that up so when it loads base and it

412
00:32:17,053 --> 00:32:20,424
sees the block content it's going to like look at everything in index

413
00:32:20,425 --> 00:32:22,406
and kind of like put that inside of it, right?

414
00:32:22,407 --> 00:32:23,019
Right.

415
00:32:23,020 --> 00:32:23,841
Cool.

416
00:32:23,842 --> 00:32:29,020
And we're going to instead of loading static files, we don't need any

417
00:32:29,021 --> 00:32:34,064
static files in here anymore since the CSS is being loaded in the

418
00:32:34,065 --> 00:32:40,848
base.html file, we're just going to put extends base.html.

419
00:32:40,849 --> 00:32:41,864
Nice.

420
00:32:41,865 --> 00:32:47,388
I think that needs to be in quotes.  Okay, so let's just make sure

421
00:32:47,389 --> 00:32:53,578
that's working before we move on with the detail page and everything.

422
00:32:53,579 --> 00:33:03,032
Probably need to run my server or --- forms.py line 6 we have in here.

423
00:33:03,033 --> 00:33:10,794
So model is Person.  So it looks like I accidentally used a colon

424
00:33:10,795 --> 00:33:12,208
instead of equal here.

425
00:33:12,209 --> 00:33:13,395
Oh yeah, that makes sense.

426
00:33:13,396 --> 00:33:19,648
Yeah.  So that's in our forms.  Okay, so if we go back here,

427
00:33:19,649 --> 00:33:22,799
we can see no more errors.  The server is running.

428
00:33:22,800 --> 00:33:23,673
Cool.

429
00:33:23,674 --> 00:33:26,999
We can look at our home page, and it looks the same now that we've

430
00:33:27,000 --> 00:33:33,724
added that template inheritance.  So we can go ahead and add that to

431
00:33:33,725 --> 00:33:37,282
our detail and edit pages.

432
00:33:37,283 --> 00:33:38,057
Nice.

433
00:33:38,058 --> 00:33:51,210
Yeah.  So we'll just replace that here.  Need an endblock tag.

434
00:33:51,211 --> 00:33:59,043
Okay, so now when we go into our edit template, we'll start with the

435
00:33:59,044 --> 00:34:09,287
block content and extend from base.html.  Okay, so we're going to want

436
00:34:09,288 --> 00:34:22,961
a form, an HTML form with the action as the URL back to this edit page.

437
00:34:22,962 --> 00:34:23,405
Okay.

438
00:34:23,406 --> 00:34:28,213
So we'll just put action as dot so it just goes back to this page.

439
00:34:28,214 --> 00:34:33,087
And we could have a separate URL to handle this, but we're just going

440
00:34:33,088 --> 00:34:37,726
to handle it in the same view and check whether it was a post or not,

441
00:34:37,727 --> 00:34:39,337
and so that's what we'll do here.

442
00:34:39,338 --> 00:34:39,781
Cool.

443
00:34:39,782 --> 00:34:51,987
And so we'll add method equal to post.  Okay, so then also in here,

444
00:34:51,988 --> 00:34:57,064
since it is a post, we talked about this in the course, you need a STS  RF token.

445
00:34:57,065 --> 00:34:58,188
Oh, right.

446
00:34:58,189 --> 00:35:07,543
And so you use the Django tag csrf_token, and that's just something

447
00:35:07,544 --> 00:35:12,648
Django provides to prevent against cross-site request forgeries.

448
00:35:12,649 --> 00:35:15,958
So as long as you have that token, your app should know you're not

449
00:35:15,959 --> 00:35:18,160
coming from like a malicious site.

450
00:35:18,161 --> 00:35:22,170
Cool.  It's like inject, like a hidden input field or something with a

451
00:35:22,171 --> 00:35:24,558
token in it.  Cool.

452
00:35:24,559 --> 00:35:30,241
And then now we can display our form, so we'll do form.as_p.

453
00:35:30,242 --> 00:35:34,617
So that will display the form as a paragraph with each field on a separate line.

454
00:35:34,618 --> 00:35:35,740
Okay.

455
00:35:35,741 --> 00:35:56,161
And then we'll want a button there, so we can do input type.  (Typing)

456
00:35:56,162 --> 00:36:02,207
Okay, so we have all the basic building blocks for displaying the form right now.

457
00:36:02,208 --> 00:36:06,446
It's not going to process it, but at least we want to check that it's displaying correctly.

458
00:36:06,447 --> 00:36:07,757
Sure.

459
00:36:07,758 --> 00:36:13,574
So if we go back here, and then we can click on a person and then go

460
00:36:13,575 --> 00:36:19,930
to /edit, and that should display the form.

461
00:36:19,931 --> 00:36:27,420
So let me just check because that doesn't seem to be working here.

462
00:36:27,421 --> 00:36:31,476
So /edit goes to edit.

463
00:36:31,477 --> 00:36:35,093
Is it the extra slash on the end maybe?  Like do you need to put slash

464
00:36:35,094 --> 00:36:37,633
after edit on the URL?

465
00:36:37,634 --> 00:36:41,071
I think that's optional, so I don't think it should hurt anything that

466
00:36:41,072 --> 00:36:47,375
it's there, but we can take it out and see.

467
00:36:47,376 --> 00:36:53,192
What about is it because the second URL isn't terminated, the detail, views.detail?

468
00:36:53,193 --> 00:36:54,971
Oh yeah, that's exactly what it is.

469
00:36:54,972 --> 00:36:55,642
Cool.

470
00:36:55,643 --> 00:36:56,865
Yeah, good catch.

471
00:36:56,866 --> 00:36:59,705
Yeah, so what was happening was because it wasn't terminated with a

472
00:36:59,706 --> 00:37:04,055
dollar sign, it was saying like just look for any URL with that

473
00:37:04,056 --> 00:37:07,619
beginning, and then just like if you see anything with that beginning

474
00:37:07,620 --> 00:37:09,564
at all, then that means that's the one we're looking for.

475
00:37:09,565 --> 00:37:12,240
So even /edit would've continued on or whatever past that.

476
00:37:12,241 --> 00:37:17,194
Right, exactly.  So don't forget the dollar sign.

477
00:37:17,195 --> 00:37:19,819
So yeah, caret starts it, dollar sign ends it.

478
00:37:19,820 --> 00:37:21,735
So it looks like we have all those now.

479
00:37:21,736 --> 00:37:22,151
Cool.

480
00:37:22,152 --> 00:37:25,719
So if we go back over here, now we can see the form to edit,

481
00:37:25,720 --> 00:37:29,239
and we're on this user Adam Fortuna.

482
00:37:29,240 --> 00:37:30,267
Nice.

483
00:37:30,268 --> 00:37:36,644
Okay, so one thing we want to add is if we take a look back at our

484
00:37:36,645 --> 00:37:41,967
example app again, see how all my data is already there,

485
00:37:41,968 --> 00:37:44,476
all the existing data so I can add to it?

486
00:37:44,477 --> 00:37:44,759
Yeah.

487
00:37:44,760 --> 00:37:47,043
So we like that to show up instead of just blank.

488
00:37:47,044 --> 00:37:49,991
Okay, cool.

489
00:37:49,992 --> 00:37:56,089
So we can do that in our view, and then we'll also want to handle the submitted form.

490
00:37:56,090 --> 00:37:57,648
Okay.

491
00:37:57,649 --> 00:38:05,454
So to do that, we can set up where we'll handle processing the form,

492
00:38:05,455 --> 00:38:12,698
and what we'll do is we'll check if request is a post, and we can do

493
00:38:12,699 --> 00:38:22,860
that with request.method is equal to POST.

494
00:38:22,861 --> 00:38:32,917
And right now we'll just put pass, but this is where we'll process the form.

495
00:38:32,918 --> 00:38:33,752
Gotcha.

496
00:38:33,753 --> 00:38:39,991
And then otherwise we'll just display the form, which is what we did before.

497
00:38:39,992 --> 00:38:47,339
And then we'll also want the person to pass into the form that we're editing.

498
00:38:47,340 --> 00:38:48,128
Okay.

499
00:38:48,129 --> 00:38:53,034
So again, just like we looked up the person here by the slug field in

500
00:38:53,035 --> 00:38:57,737
the detail page, we'll do the exact same thing, and then we can pass

501
00:38:57,738 --> 00:38:59,505
that into the form.

502
00:38:59,506 --> 00:39:01,444
Okay.

503
00:39:01,445 --> 00:39:06,230
And then when we go and edit that, it should look good.

504
00:39:06,231 --> 00:39:09,080
Cool.

505
00:39:09,081 --> 00:39:13,123
I think there is something I'm forgetting though is this person needs

506
00:39:13,124 --> 00:39:20,927
to be in a dictionary format actually for that to work, so we need to

507
00:39:20,928 --> 00:39:32,883
do --- we're going to use this special function from forms.models,

508
00:39:32,884 --> 00:39:45,943
so from forms.models import model_to_dict.

509
00:39:45,944 --> 00:39:55,710
So we can do person_dict = model_to_dict, so that function on the

510
00:39:55,711 --> 00:39:57,638
person that we looked up.

511
00:39:57,639 --> 00:39:59,804
That's pretty neat.  So that's just going to take all the fields and

512
00:39:59,805 --> 00:40:04,526
stuff and map it to dictionaries probably with keys equal to the model

513
00:40:04,527 --> 00:40:05,473
field names, right?

514
00:40:05,474 --> 00:40:08,995
Right, yeah.  If we printed that out, that's exactly what it would be.

515
00:40:08,996 --> 00:40:09,415
Nice.

516
00:40:09,416 --> 00:40:13,638
And so that's what we need to add the initial data to our form.

517
00:40:13,639 --> 00:40:14,429
Cool.

518
00:40:14,430 --> 00:40:21,062
So if we go look at that, and let's check that our server is still running.

519
00:40:21,063 --> 00:40:23,271
Okay, no module named forms.

520
00:40:23,272 --> 00:40:25,304
Oh, just probably django.forms.

521
00:40:25,305 --> 00:40:36,655
Yeah.  From django.forms.  Okay.  Let's make sure our server is running.

522
00:40:36,656 --> 00:40:39,767
That's really neat.  I didn't know that Django and the server would do that.

523
00:40:39,768 --> 00:40:42,306
I've noticed that a couple of times where there was an error and you

524
00:40:42,307 --> 00:40:45,539
just made one change in the file, and then you didn't have to like

525
00:40:45,540 --> 00:40:47,108
quit the server and start it again.

526
00:40:47,109 --> 00:40:48,673
Yeah, it's really nice.  It auto updates.

527
00:40:48,674 --> 00:40:52,413
Just picks it up.  Yeah, that's really cool.

528
00:40:52,414 --> 00:41:00,848
So whoops.  I don't know if I need to or if I --- and then go here and then edit.

529
00:41:00,849 --> 00:41:01,847
Okay, NameError.

530
00:41:01,848 --> 00:41:03,304
POST is not defined.

531
00:41:03,305 --> 00:41:09,176
Oh, that is probably my bad.  Does need to be a string.

532
00:41:09,177 --> 00:41:10,783
Oh, yeah.

533
00:41:10,784 --> 00:41:12,361
Okay, yeah, so ---

534
00:41:12,362 --> 00:41:14,427
Cool.

535
00:41:14,428 --> 00:41:19,009
Okay, so then if we look at our form, it is populated with the initial

536
00:41:19,010 --> 00:41:20,920
data we had for Adam.

537
00:41:20,921 --> 00:41:23,010
Yeah, and that's the data from the database basically, right?

538
00:41:23,011 --> 00:41:23,545
Uh-huh.

539
00:41:23,546 --> 00:41:24,094
Cool.

540
00:41:24,095 --> 00:41:26,760
So we can submit this, but it's still not going to do anything yet.

541
00:41:26,761 --> 00:41:28,517
Right, it's just going to pass that method.

542
00:41:28,518 --> 00:41:30,879
Right, so we need to process the form.

543
00:41:30,880 --> 00:41:32,411
Okay.

544
00:41:32,412 --> 00:41:40,694
So as we saw in the course, we can create the form from the

545
00:41:40,695 --> 00:41:54,793
PersonForm, and what we're going to do is pass it data=request.POST,

546
00:41:54,794 --> 00:42:00,737
so all of the POST's data.  And then we're also going to pass it,

547
00:42:00,738 --> 00:42:05,655
we didn't do this in the course, instance=person, and that's that

548
00:42:05,656 --> 00:42:09,738
person we looked up by the slug field.  And the reason we want to do

549
00:42:09,739 --> 00:42:14,434
that is because when we do, which we're going to eventually do

550
00:42:14,435 --> 00:42:18,763
form.save, that would create a brand new person.

551
00:42:18,764 --> 00:42:22,063
So basically we're saying we want to update this existing person.

552
00:42:22,064 --> 00:42:23,920
Oh, interesting.  So that's how you do an update.

553
00:42:23,921 --> 00:42:24,520
Yeah.

554
00:42:24,521 --> 00:42:25,460
Very cool.

555
00:42:25,461 --> 00:42:33,101
So we're going to check if form.is_valid.  Then we're going to do

556
00:42:33,102 --> 00:42:39,629
form.save, and this is a function is_valid.

557
00:42:39,630 --> 00:42:45,973
And for save, you can set commit equal to True here,

558
00:42:45,974 --> 00:42:49,046
and that'll commit it straight to the database.

559
00:42:49,047 --> 00:42:52,990
If we had extra stuff we wanted to save on top of it, we would set

560
00:42:52,991 --> 00:42:56,333
that to false, but so that's good.

561
00:42:56,334 --> 00:42:56,882
Cool.

562
00:42:56,883 --> 00:43:03,844
And then once we edit, I guess we'll just redirect back to the detail page.

563
00:43:03,845 --> 00:43:04,411
Yeah, that makes sense.

564
00:43:04,412 --> 00:43:07,137
So then you can visualize what you just edited.

565
00:43:07,138 --> 00:43:09,601
Cool.

566
00:43:09,602 --> 00:43:25,281
So to do that, we can use the redirect shortcut function and do return redirect.

567
00:43:25,282 --> 00:43:32,109
And then this is where we can again use the URL name.

568
00:43:32,110 --> 00:43:37,947
And so what we can do is use this function called reverse,

569
00:43:37,948 --> 00:43:50,866
so that's from django.core.urlresolvers.  And so what this does is it

570
00:43:50,867 --> 00:43:58,608
will look up the URL for you based upon the name.

571
00:43:58,609 --> 00:44:05,848
So the detail is the name of the URL and then any arguments it needs,

572
00:44:05,849 --> 00:44:09,474
which here is going to be the slug because that's the argument the

573
00:44:09,475 --> 00:44:12,927
detail URL needs if we look back over here.

574
00:44:12,928 --> 00:44:14,458
Gotcha.

575
00:44:14,459 --> 00:44:16,661
So it's expecting this slug value.

576
00:44:16,662 --> 00:44:18,304
Gotcha.

577
00:44:18,305 --> 00:44:22,302
But the reason you want to do that is because you could just hard code

578
00:44:22,303 --> 00:44:29,593
a string in there.  We could just say go to this string/member/slug.

579
00:44:29,594 --> 00:44:33,914
But then if we update the URL here, it'll break.

580
00:44:33,915 --> 00:44:39,076
So it's a way to make it point to this one place where we define the URL.

581
00:44:39,077 --> 00:44:41,486
Cool.

582
00:44:41,487 --> 00:44:45,766
Okay, so that should process the form and save it to the database.

583
00:44:45,767 --> 00:44:47,003
Okay.

584
00:44:47,004 --> 00:45:00,846
So if we go back and refresh, okay, so Adam let's say supervises

585
00:45:00,847 --> 00:45:08,523
product planning or something as his responsibilities, and his bio is

586
00:45:08,524 --> 00:45:12,657
he loves Orlando.  And then we submit that.

587
00:45:12,658 --> 00:45:16,912
Okay, and so we can say supervises product planning and he loves Orlando.

588
00:45:16,913 --> 00:45:18,086
Very cool.

589
00:45:18,087 --> 00:45:22,317
So we have the edit form working now, so that's awesome.

590
00:45:22,318 --> 00:45:25,074
Yeah, that's awesome.  It was some work to get there, but now it's

591
00:45:25,075 --> 00:45:28,493
really cool to just kind of see how it all fits together because one

592
00:45:28,494 --> 00:45:31,409
of the things I noticed about this was that there was only one place

593
00:45:31,410 --> 00:45:34,975
where you even defined any of the fields, and that was in the person form, right?

594
00:45:34,976 --> 00:45:35,616
Right.

595
00:45:35,617 --> 00:45:38,262
And everything else, just because it was defined that way,

596
00:45:38,263 --> 00:45:41,359
you didn't have to constantly say set name equal to this,

597
00:45:41,360 --> 00:45:43,715
set responsibilities equal to this.  It's just sort of inferring all

598
00:45:43,716 --> 00:45:46,064
of that stuff as you go through the different views and templates.

599
00:45:46,065 --> 00:45:48,212
And we can just do form, not save, yeah.

600
00:45:48,213 --> 00:45:50,593
Yeah, very cool.

601
00:45:50,594 --> 00:45:53,856
Yeah, so we added a couple extra things that weren't in the course.

602
00:45:53,857 --> 00:46:00,335
We added initial data to the form, we updated a user instead of saving

603
00:46:00,336 --> 00:46:04,898
a new user by passing the instance, and then we've added this slug

604
00:46:04,899 --> 00:46:06,859
field that we haven't seen before.

605
00:46:06,860 --> 00:46:07,583
Yeah, neat.

606
00:46:07,584 --> 00:46:12,271
So a couple new things we've gone over.  And then the next new thing

607
00:46:12,272 --> 00:46:15,401
we want to do is social authentication.

608
00:46:15,402 --> 00:46:19,437
Nice, yeah, right because anybody can still just hit that /edit URL

609
00:46:19,438 --> 00:46:20,504
right now ---

610
00:46:20,505 --> 00:46:21,650
And edit anybody.

611
00:46:21,651 --> 00:46:23,684
--- edit anybody else's stuff, which is probably really fun,

612
00:46:23,685 --> 00:46:27,983
but maybe not good for the team morale.

613
00:46:27,984 --> 00:46:31,249
Yeah.  And then another reason you might want to have authentication

614
00:46:31,250 --> 00:46:34,853
is this could be your company's directory, and so you don't want

615
00:46:34,854 --> 00:46:39,711
everybody to see it, so we'll just have Code School people viewing our directory.

616
00:46:39,712 --> 00:46:43,019
Sure.  Cool.  So how do we do that?

617
00:46:43,020 --> 00:46:48,353
So basically we're going to use a Python package called Python Social

618
00:46:48,354 --> 00:46:53,864
Auth, and that takes care of a lot of the setup for dealing with

619
00:46:53,865 --> 00:46:59,643
Google, Facebook, Twitter, and passing the tokens and saving them to users.

620
00:46:59,644 --> 00:47:01,572
So it does a lot of the work for you.

621
00:47:01,573 --> 00:47:03,213
Nice.

622
00:47:03,214 --> 00:47:12,592
So to do that, we're going to do pip install python-social-auth.

623
00:47:12,593 --> 00:47:18,877
And it had some dependencies with it like requests, oauthlib, and some other things.

624
00:47:18,878 --> 00:47:24,490
So if we look at pip freeze again to see what we have installed ---

625
00:47:24,491 --> 00:47:25,127
There's a bunch in there now.

626
00:47:25,128 --> 00:47:29,169
Yeah.  What we had before was just Django, Gunicorn, and WhiteNoise,

627
00:47:29,170 --> 00:47:34,160
so everything else was a dependency of Python Social Auth.

628
00:47:34,161 --> 00:47:34,581
Cool.

629
00:47:34,582 --> 00:47:42,858
Yeah.  So now the first step to get that started using that is we have

630
00:47:42,859 --> 00:47:48,370
to add some settings, and one of those is telling Django that we've

631
00:47:48,371 --> 00:47:50,540
now installed this app.

632
00:47:50,541 --> 00:47:51,501
Okay.

633
00:47:51,502 --> 00:48:03,317
So we can add that to INSTALLED_APPS with social.apps.django_app.default.

634
00:48:03,318 --> 00:48:09,508
Okay, we're going to need to add some context processors to our

635
00:48:09,509 --> 00:48:16,045
template's variable, and that's just going to help to know which page

636
00:48:16,046 --> 00:48:22,166
we should be displaying.  So it kind of takes care of some default

637
00:48:22,167 --> 00:48:25,496
URLs and telling us what page we should be on.

638
00:48:25,497 --> 00:48:30,061
Cool.

639
00:48:30,062 --> 00:48:40,140
Social.apps.django_app.  (Typing)

640
00:48:40,141 --> 00:48:43,627
Okay, and then the next variable we're going to add I'm going to add

641
00:48:43,628 --> 00:48:47,943
towards the end.  I'm just kind of picking where I want to add these

642
00:48:47,944 --> 00:48:51,416
variables for social authentication.  I'm going to add right above the

643
00:48:51,417 --> 00:48:59,402
static files variables we have and just comment this as social authentication.

644
00:48:59,403 --> 00:49:04,739
And then we're going to override the variable called

645
00:49:04,740 --> 00:49:14,415
AUTHENTICATION_BACKENDS, and we're going to add Google to this.

646
00:49:14,416 --> 00:49:26,086
So that's going to be a list.  (Typing)

647
00:49:26,087 --> 00:49:30,879
Okay, so what we just added was Google OAuth2 as a social backend,

648
00:49:30,880 --> 00:49:35,748
and then we still have the default Django backend that's going to go with it.

649
00:49:35,749 --> 00:49:39,239
Cool.

650
00:49:39,240 --> 00:49:45,735
And then the next two variables we need are the social Google OAuth2

651
00:49:45,736 --> 00:49:50,723
key and secret.  And so what we need to do to get those is to log into

652
00:49:50,724 --> 00:49:53,321
the Google developer console.

653
00:49:53,322 --> 00:49:56,821
Okay, so Google gives us those two key and secret tokens, and then we

654
00:49:56,822 --> 00:49:58,459
can use that in our app.

655
00:49:58,460 --> 00:50:04,655
Exactly, and then they'll know what app we're coming from and all that.

656
00:50:04,656 --> 00:50:05,576
Cool.

657
00:50:05,577 --> 00:50:11,697
So we go to console.developers.google.com.

658
00:50:11,698 --> 00:50:15,763
And so I was already playing around with this, so I should already

659
00:50:15,764 --> 00:50:21,283
have a few here.  Yeah, so I'm going to go to Credentials,

660
00:50:21,284 --> 00:50:26,349
Create credentials, and then OAuth client ID.

661
00:50:26,350 --> 00:50:35,700
Web application, so I'll just say Team Directory, and then the URL here.

662
00:50:35,701 --> 00:50:51,289
So this right now is just our localhost, so 127.0.0.1 port 8000.

663
00:50:51,290 --> 00:51:02,804
And then for the Authorize redirect, oops, sorry, I'm having trouble

664
00:51:02,805 --> 00:51:13,114
copying and pasting.  Delete that.  Okay, and then /complete/google-

665
00:51:13,115 --> 00:51:19,018
oauth2, and that's where the Python Social Auth is going to take us

666
00:51:19,019 --> 00:51:20,103
after they log in.

667
00:51:20,104 --> 00:51:21,943
Okay.

668
00:51:21,944 --> 00:51:29,531
So we'll go ahead and create that, and it's going to give us our key

669
00:51:29,532 --> 00:51:35,103
and our secret.  So we can go and copy that into our app.

670
00:51:35,104 --> 00:51:37,661
And does the variable for that have to be a specific thing?

671
00:51:37,662 --> 00:51:48,358
Yeah, so SOCIAL_AUTH_GOOGLE_OAUTH2_KEY.  And so you can look all of

672
00:51:48,359 --> 00:51:55,986
these up in Python Social Auth's docs.  But yeah, so Twitter doesn't

673
00:51:55,987 --> 00:52:00,532
have this OAUTH2 extension, but since Google has different versions of

674
00:52:00,533 --> 00:52:01,984
things, you need that.

675
00:52:01,985 --> 00:52:03,637
Gotcha.

676
00:52:03,638 --> 00:52:08,691
Okay, so that's the key.  Then we're going to create a variable for

677
00:52:08,692 --> 00:52:22,130
the secret and get the secret.

678
00:52:22,131 --> 00:52:23,812
Cool.

679
00:52:23,813 --> 00:52:34,956
Okay, so we have that created.  So now when we go to the URL

680
00:52:34,957 --> 00:52:41,287
localhost/login/google-oauth2, it should make us log in, so we'll just

681
00:52:41,288 --> 00:52:42,628
give that a try.

682
00:52:42,629 --> 00:52:44,811
Cool.

683
00:52:44,812 --> 00:52:49,747
I think I'm forgetting one thing is we have to add some special URLs,

684
00:52:49,748 --> 00:52:54,042
and we could do that in our app since we only have one app or in our project.

685
00:52:54,043 --> 00:52:58,029
So I think I'll add it to our project just because then it's available

686
00:52:58,030 --> 00:53:06,819
to all apps.  And that's --- I forget what that is.

687
00:53:06,820 --> 00:53:19,315
Okay, so that is an empty string.  We're going to include.  (Typing)

688
00:53:19,316 --> 00:53:26,336
Okay, so this is just making all of the URLs available within our app.

689
00:53:26,337 --> 00:53:34,500
And then if we go to login/google-oauth2, it'll know what to present us with.

690
00:53:34,501 --> 00:53:35,018
Gotcha.

691
00:53:35,019 --> 00:53:38,013
So we don't have to handle anything.  We don't have to create a view

692
00:53:38,014 --> 00:53:41,928
or a template because that's already created within this package we installed.

693
00:53:41,929 --> 00:53:43,138
Nice.

694
00:53:43,139 --> 00:53:47,214
Yeah.  So that should work, so we'll give that a try.

695
00:53:47,215 --> 00:53:52,131
Make sure our server is still running.  Nope.

696
00:53:52,132 --> 00:53:58,911
Okay, so I'll run our server.  Oh, I forgot, so basically the package

697
00:53:58,912 --> 00:54:02,590
that we installed has some migrations that we have to apply because it

698
00:54:02,591 --> 00:54:05,534
creates its own models for the database.

699
00:54:05,535 --> 00:54:08,255
Gotcha.  Do we have to make migrations too, or does it just do that for us?

700
00:54:08,256 --> 00:54:13,140
No.  Yeah, so if we try to run that, it should tell us.

701
00:54:13,141 --> 00:54:16,969
There's nothing to do, but I'm ---.  Yeah, okay.

702
00:54:16,970 --> 00:54:24,195
So then we can migrate.  Okay, so you can see it applied a few that

703
00:54:24,196 --> 00:54:26,698
just came preinstalled with the package.

704
00:54:26,699 --> 00:54:27,457
Cool.

705
00:54:27,458 --> 00:54:31,303
So then we can run our server, and it looks good.

706
00:54:31,304 --> 00:54:41,177
So now we'll go to localhost/login/google-oauth2, and that's going to

707
00:54:41,178 --> 00:54:48,774
prompt us to log in, and I'll log in with my Code School email address.

708
00:54:48,775 --> 00:54:54,582
It says Django Project would like to have offline access.

709
00:54:54,583 --> 00:55:00,784
And we're going to allow that.  And whoops, what did I do?

710
00:55:00,785 --> 00:55:07,819
It looks like it's looking for accounts/profile.

711
00:55:07,820 --> 00:55:12,128
Okay, so I realize what this error is for is we forgot some redirect

712
00:55:12,129 --> 00:55:15,575
URLs that we have to define in settings, so it's trying to find

713
00:55:15,576 --> 00:55:17,073
something that we don't have.

714
00:55:17,074 --> 00:55:18,254
Cool.

715
00:55:18,255 --> 00:55:28,419
So if we go back to settings.py, and we can add this right before our

716
00:55:28,420 --> 00:55:43,621
key and secret.  (Typing)

717
00:55:43,622 --> 00:55:49,767
Okay, so now we have all of those URLs entered, so let's give that a try again.

718
00:55:49,768 --> 00:55:59,858
Make sure our server is running and try and log back in.

719
00:55:59,859 --> 00:56:02,526
Okay, and so that brings us back to our home page.

720
00:56:02,527 --> 00:56:03,476
Nice.

721
00:56:03,477 --> 00:56:12,033
And so what this has done is if we go and look at our models,

722
00:56:12,034 --> 00:56:15,337
you can see with our migrations there are some models that were added

723
00:56:15,338 --> 00:56:18,866
with the package, and we don't really need to worry about those.

724
00:56:18,867 --> 00:56:24,820
But by default it edits our user model.  Okay, so if we look at our

725
00:56:24,821 --> 00:56:31,387
users, we have that sholderness username that I just logged in with

726
00:56:31,388 --> 00:56:32,475
from Code School.

727
00:56:32,476 --> 00:56:34,054
Nice.

728
00:56:34,055 --> 00:56:41,151
So what is interesting is by default Python Social Auth just helps you

729
00:56:41,152 --> 00:56:47,618
with adding new users to this user model, and then what our example

730
00:56:47,619 --> 00:56:51,258
app does is actually check if those are Code School employees.

731
00:56:51,259 --> 00:56:56,687
So that's kind of something extra, but we can add that functionality.

732
00:56:56,688 --> 00:57:00,347
So yeah, so that's probably what we'll do next.

733
00:57:00,348 --> 00:57:02,636
Cool.

734
00:57:02,637 --> 00:57:12,802
So just so we know if we look up Python Social Auth and go to the

735
00:57:12,803 --> 00:57:18,152
third link down, which is python-social-auth.readthedocs, you can look

736
00:57:18,153 --> 00:57:25,422
at all of the docs here.  And there's something called the Pipeline,

737
00:57:25,423 --> 00:57:33,653
and what we can do is see that there are some --- by default,

738
00:57:33,654 --> 00:57:38,123
the Pipeline runs all of these functions in order.

739
00:57:38,124 --> 00:57:41,056
And what we're going to do is kind of interrupt with our own function,

740
00:57:41,057 --> 00:57:43,778
so it's nice you can add that into the pipeline.

741
00:57:43,779 --> 00:57:44,736
Yeah, definitely.

742
00:57:44,737 --> 00:57:48,435
So you could do like save a user's profile.

743
00:57:48,436 --> 00:57:53,037
You could send a verification email.  What we're going to do is just

744
00:57:53,038 --> 00:57:56,267
make sure this person has a Code School email address.

745
00:57:56,268 --> 00:57:58,087
Okay.

746
00:57:58,088 --> 00:58:06,541
So we're going to override this variable in settings, so in settings

747
00:58:06,542 --> 00:58:14,236
we're going to add that, and then we're going to put this in our view

748
00:58:14,237 --> 00:58:19,774
so we can do the app name.views, and we'll do verify_email.

749
00:58:19,775 --> 00:58:21,492
Okay.

750
00:58:21,493 --> 00:58:36,379
And then in our views we'll go ahead and add that function.  (Typing)

751
00:58:36,380 --> 00:58:43,770
So if we look at the example they had again, this takes in certain

752
00:58:43,771 --> 00:58:48,218
parameters, which are the backend, user, response, *args,

753
00:58:48,219 --> 00:58:51,298
and **kwargs, so we're going to need the same.

754
00:58:51,299 --> 00:58:53,216
Okay.

755
00:58:53,217 --> 00:59:13,503
We can check if the backend name is Google, and that's going to be google-oauth2.

756
00:59:13,504 --> 00:59:18,379
Okay, and then this is where we'll check the email.

757
00:59:18,380 --> 00:59:24,374
Okay, so we can do --- so basically we want to see if there's an

758
00:59:24,375 --> 00:59:30,465
existing person in our Person database that has an email that matches

759
00:59:30,466 --> 00:59:32,132
this person's email.

760
00:59:32,133 --> 00:59:32,747
Gotcha.

761
00:59:32,748 --> 00:59:38,404
So we'll look up existing_person will be the variable name,

762
00:59:38,405 --> 00:59:49,800
and that'll be Person.objects.get(email=, and this is where we need to

763
00:59:49,801 --> 01:00:03,831
look up the email in the response, so we can do kwargs.get('detail')).

764
01:00:03,832 --> 01:00:09,763
And I already printed this out.  If we look at the docs page again,

765
01:00:09,764 --> 01:00:13,106
we can see from Facebook kwargs looks like this.

766
01:00:13,107 --> 01:00:18,078
It's a dictionary.  We could, if this was Facebook, look up the email

767
01:00:18,079 --> 01:00:21,655
and just do get email, and that would give us the email.

768
01:00:21,656 --> 01:00:27,077
But in Google's data it has a details dictionary within this,

769
01:00:27,078 --> 01:00:35,120
and then we get the email, so we're going to do .get('detail').get('email')).

770
01:00:35,121 --> 01:00:41,162
And I printed that out to see that before, but we'll just skip that for now.

771
01:00:41,163 --> 01:00:46,777
So now if those emails are the same, we know that we have an existing

772
01:00:46,778 --> 01:00:49,687
person and we can allow this person to log in.

773
01:00:49,688 --> 01:00:51,064
Okay.

774
01:00:51,065 --> 01:01:00,700
So if not existing_person, then we'll show like an error message.

775
01:01:00,701 --> 01:01:14,666
So we will import HttpResponse and just show a text message for now.  (Typing)

776
01:01:14,667 --> 01:01:24,578
So from django.http we're g got get HttpResponse and return that here.

777
01:01:24,579 --> 01:01:35,408
You don't have access is what we'll say.  Okay, so that should be all

778
01:01:35,409 --> 01:01:40,234
we need to get that working, so we'll give that a try and see if it

779
01:01:40,235 --> 01:01:44,131
kicks me out if I try to log in with my other email address that's not

780
01:01:44,132 --> 01:01:45,812
a Code School email address.

781
01:01:45,813 --> 01:01:47,238
Okay.

782
01:01:47,239 --> 01:01:50,981
So we'll make sure it's working and running.

783
01:01:50,982 --> 01:01:59,770
I'll just open an incognito tab since I'm already logged in over there.

784
01:01:59,771 --> 01:02:11,371
Oh, another thing is we want the home page to actually go to that login page.

785
01:02:11,372 --> 01:02:13,559
Oh, right, we're just like manually typing it right now.

786
01:02:13,560 --> 01:02:14,006
Right.

787
01:02:14,007 --> 01:02:15,348
We kind of want that to show up.

788
01:02:15,349 --> 01:02:15,976
Right.

789
01:02:15,977 --> 01:02:16,453
Okay.

790
01:02:16,454 --> 01:02:23,334
So we can do that in our view.  So in our index view we can check if

791
01:02:23,335 --> 01:02:27,473
the user's authenticated and then show them the home page.

792
01:02:27,474 --> 01:02:31,201
But if they're not, we're going to bring them to this Google login page.

793
01:02:31,202 --> 01:02:32,517
Gotcha.

794
01:02:32,518 --> 01:02:44,589
So if request.user.is_authenticated, then we'll display the page as we

795
01:02:44,590 --> 01:02:55,748
were doing before; otherwise, we'll redirect, and we'll redirect to

796
01:02:55,749 --> 01:03:01,262
/login/google-oauth2.

797
01:03:01,263 --> 01:03:02,596
Do you have to return a redirect or just?

798
01:03:02,597 --> 01:03:03,001
Yes, return.

799
01:03:03,002 --> 01:03:04,281
Alright, cool.

800
01:03:04,282 --> 01:03:09,726
Thanks.  I always forget that.  And I'm not sure if we have to import

801
01:03:09,727 --> 01:03:16,017
this function is_autheticated.  I think it might be built in.

802
01:03:16,018 --> 01:03:20,389
It's a method on the request.user, so we probably don't.

803
01:03:20,390 --> 01:03:24,855
So I'll give that a try.  It seems like the server is still working.

804
01:03:24,856 --> 01:03:32,316
So again, I just want to open an incognito window since I'm already

805
01:03:32,317 --> 01:03:35,495
logged in, and I'm going to try to go to the home page now,

806
01:03:35,496 --> 01:03:39,860
which is at localhost port 8000.  And now it's going to ask me to log

807
01:03:39,861 --> 01:03:41,841
in, which is exactly what we wanted.

808
01:03:41,842 --> 01:03:42,630
Cool.

809
01:03:42,631 --> 01:03:49,818
So I'm going to use a non-Code School email address, and it should

810
01:03:49,819 --> 01:03:57,197
tell me that I don't have access.  (Typing)

811
01:03:57,198 --> 01:04:02,983
Okay, let's see what happened here.

812
01:04:02,984 --> 01:04:06,108
What was the error again?

813
01:04:06,109 --> 01:04:12,326
Usually I go to the last one to see what it was here.

814
01:04:12,327 --> 01:04:16,232
Oh, is it --- I don't think it's Person.objects.get.

815
01:04:16,233 --> 01:04:21,652
It's a filter, right?  It's not objects.filter?

816
01:04:21,653 --> 01:04:30,976
Oh, yeah.  Right, because if we use get and there isn't a person,

817
01:04:30,977 --> 01:04:34,642
it's going to give us an error, whereas filter, if it doesn't find

818
01:04:34,643 --> 01:04:39,809
anything, it'll give us an empty list, and then we can do if not existing_person.

819
01:04:39,810 --> 01:04:41,436
Gotcha.

820
01:04:41,437 --> 01:04:44,772
So yeah, so something to keep in mind with get is you have to know

821
01:04:44,773 --> 01:04:46,421
there's an existing person there.

822
01:04:46,422 --> 01:04:47,614
Gotcha.

823
01:04:47,615 --> 01:05:06,663
Okay, so let's try that again.  And we're going to go to localhost.  (Typing)

824
01:05:06,664 --> 01:05:10,487
Okay, so it should tell us we don't have access.

825
01:05:10,488 --> 01:05:13,990
Same error.

826
01:05:13,991 --> 01:05:17,620
Oh, kwargs.get.

827
01:05:17,621 --> 01:05:22,664
Oh, it's details also, not detail.  I don't know if that matters.

828
01:05:22,665 --> 01:05:24,532
Okay.

829
01:05:24,533 --> 01:05:34,041
Okay, let's try that again with details.  (Typing)

830
01:05:34,042 --> 01:05:35,959
Okay, so it said you don't have access.

831
01:05:35,960 --> 01:05:38,564
Cool, so that means it got into that verify email,

832
01:05:38,565 --> 01:05:41,437
it correctly identified that you're not in that response,

833
01:05:41,438 --> 01:05:42,901
and then gave you that message.

834
01:05:42,902 --> 01:05:43,689
Uh-huh.

835
01:05:43,690 --> 01:05:44,730
Cool.

836
01:05:44,731 --> 01:05:53,191
And so one last thing we want to do is we want to add the ability to

837
01:05:53,192 --> 01:06:00,205
check if you are the person editing to allow you to edit.

838
01:06:00,206 --> 01:06:07,697
So what we'll do is we'll add a link on the detail page for editing,

839
01:06:07,698 --> 01:06:19,664
so we'll just do a link or tag linking to the edit page, so we'll do

840
01:06:19,665 --> 01:06:43,167
url 'edit' and pass it person.slug, and that will display the URL to edit.  (Typing)

841
01:06:43,168 --> 01:06:47,685
But what we'll do around that is we'll check if the user's authenticated.

842
01:06:47,686 --> 01:06:58,339
So we can use a Django template tag and do user.is_authenticated.

843
01:06:58,340 --> 01:06:59,966
Do you have to do it like as a conditional, or is it just?

844
01:06:59,967 --> 01:07:00,959
Yeah.

845
01:07:00,960 --> 01:07:01,561
Okay, cool.

846
01:07:01,562 --> 01:07:07,649
So if user is authenticated, and then we have to end our if statement

847
01:07:07,650 --> 01:07:15,128
in the template.  So it'll only show that edit button that'll take you

848
01:07:15,129 --> 01:07:17,471
to the edit page if you're authenticated.

849
01:07:17,472 --> 01:07:18,598
Gotcha.

850
01:07:18,599 --> 01:07:24,343
So I can't remember if I'm authenticated or not here, so I'll just go

851
01:07:24,344 --> 01:07:28,336
to the home page.  Yeah, so I'm authenticated.

852
01:07:28,337 --> 01:07:38,057
If I try to go to Adam's page --- oh, if user is authenticated.

853
01:07:38,058 --> 01:07:39,550
Oh, right because you are authenticated.

854
01:07:39,551 --> 01:07:40,229
Right.

855
01:07:40,230 --> 01:07:43,909
But you want to check if you're Adam or if you're Sarah.

856
01:07:43,910 --> 01:07:46,569
So never mind.  That's actually not what we want to do.

857
01:07:46,570 --> 01:07:53,585
We can do if user.email == person.email.

858
01:07:53,586 --> 01:07:55,314
Gotcha, see if you're like the same user.

859
01:07:55,315 --> 01:07:58,974
Yeah, to check if I'm the same user.  Okay, let's try that again.

860
01:07:58,975 --> 01:08:06,162
So refresh that.  I tried to go to Adam's page, but there's no edit link.

861
01:08:06,163 --> 01:08:10,981
And then if I try to go to my page, there should be.

862
01:08:10,982 --> 01:08:12,945
Yes, and then I can edit.

863
01:08:12,946 --> 01:08:13,725
Nice.

864
01:08:13,726 --> 01:08:18,236
So cool.  So we added the Python Social Auth, which was kind of a lot

865
01:08:18,237 --> 01:08:21,245
of work, but I think it's really cool because that's what a lot of

866
01:08:21,246 --> 01:08:25,465
websites use, and it makes it a lot easier on your users because it

867
01:08:25,466 --> 01:08:28,715
just grabs your email address, username, and all that stuff.

868
01:08:28,716 --> 01:08:31,966
Yeah, and even though it was a lot of work to get set up right and

869
01:08:31,967 --> 01:08:35,121
test, like it still adds so many features that we didn't have to write

870
01:08:35,122 --> 01:08:38,381
ourselves too, right?  Like there's so much built-in functionality.

871
01:08:38,382 --> 01:08:41,028
And you can pretty much be sure like a lot of people are going to have

872
01:08:41,029 --> 01:08:44,500
a Google or Facebook login even if they don't make a login for your

873
01:08:44,501 --> 01:08:47,812
site, so it can be a way to get users that already have a way to log

874
01:08:47,813 --> 01:08:50,158
in into your product quicker.

875
01:08:50,159 --> 01:08:54,801
Right.  And then we added that extra step to check that their email is

876
01:08:54,802 --> 01:09:00,441
a Code School email and then the other step to make sure you are

877
01:09:00,442 --> 01:09:02,830
editing your own page.

878
01:09:02,831 --> 01:09:03,558
Nice.

879
01:09:03,559 --> 01:09:06,464
So I guess that's where we want to leave off ---

880
01:09:06,465 --> 01:09:07,664
Yeah.

881
01:09:07,665 --> 01:09:10,639
--- unless you want to, I don't know, do anything else.

882
01:09:10,640 --> 01:09:13,245
No, I think that's good.  I think we hit a lot of cool stuff in this

883
01:09:13,246 --> 01:09:17,021
screencast and definitely a lot of even like new things that we didn't

884
01:09:17,022 --> 01:09:20,724
necessarily show in this level of detail in the course, so it could be

885
01:09:20,725 --> 01:09:24,236
a great companion to go through this.  And if you haven't been trying

886
01:09:24,237 --> 01:09:27,280
along on your own as we're going through this stuff, it's probably a

887
01:09:27,281 --> 01:09:31,061
good time to jump in and try to do some of this stuff yourself and

888
01:09:31,062 --> 01:09:33,338
even deploy to Heroku at the end like we did in the first screencast.

889
01:09:33,339 --> 01:09:37,618
Yeah, that's what I was going to say is because we set it all up and

890
01:09:37,619 --> 01:09:42,003
cloned that repo, we could just go ahead and push this to Heroku

891
01:09:42,004 --> 01:09:42,977
really easily, so ---

892
01:09:42,978 --> 01:09:44,616
Yeah, yeah, awesome.

893
01:09:44,617 --> 01:09:45,677
--- you can try that as well.

894
01:09:45,678 --> 01:09:47,626
Yeah, so thanks for watching.

895
01:09:47,627 --> 01:09:48,915
Thanks, bye.

896
01:09:48,916 --> 01:09:49,806
Bye.

897
01:09:49,807 --> 01:00:00,000
(Music)
