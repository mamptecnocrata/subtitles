1
00:00:00,000 --> 00:00:08,440
Yeah, cruise down that strip and take in the neon lights baby,

2
00:00:08,441 --> 00:00:13,618
as we get well equipped to take our apps to new heights, yeah!

3
00:00:13,619 --> 00:00:18,811
We'll create records, take in the view — our route is surely scenic too.

4
00:00:18,812 --> 00:00:22,545
We'll use Elixir as we travel through On Fire With Phoenix,

5
00:00:22,546 --> 00:00:29,068
On Fire With Phoenix, On Fire With Phoenix, yeah!

6
00:00:29,069 --> 00:00:32,359
You're watching On Fire With Phoenix.  I'm Carlos Souza, and in this

7
00:00:32,360 --> 00:00:36,343
section we'll learn how to send data back to the client and how to

8
00:00:36,344 --> 00:00:40,438
render HTML pages.

9
00:00:40,439 --> 00:00:44,153
We've learned how to use Ecto to read data from the database.

10
00:00:44,154 --> 00:00:48,274
Now let's see how we can return data in a response so we can display

11
00:00:48,275 --> 00:00:53,357
the list of videos on a page.

12
00:00:53,358 --> 00:00:59,470
To do that, we'll need to write some code for the C of MVC, the controller part.

13
00:00:59,471 --> 00:01:05,358
The controller part of MVC in Phoenix includes controller modules and the router.

14
00:01:05,359 --> 00:01:09,399
We've seen how to code in the model part with schema modules.

15
00:01:09,400 --> 00:01:13,062
Now let's see what we need to do in the router and controllers in

16
00:01:13,063 --> 00:01:18,100
order to show data on a web page.

17
00:01:18,101 --> 00:01:22,895
First thing we need is to create a route.  A route is composed of four

18
00:01:22,896 --> 00:01:30,080
things, an HTTP method; URL path; a controller, or module,

19
00:01:30,081 --> 00:01:33,968
that's associated with the route; and an action, or function,

20
00:01:33,969 --> 00:01:37,912
from the module that should be called every time a client makes a

21
00:01:37,913 --> 00:01:44,208
request for that URL path.  This is what a route will look like,

22
00:01:44,209 --> 00:01:50,047
and the router file will add a new line inside the scope for forward slash.

23
00:01:50,048 --> 00:01:54,489
This means that the route we add will be applied for every request

24
00:01:54,490 --> 00:01:59,299
sent to the root path of our application.  We call the get function,

25
00:01:59,300 --> 00:02:04,301
meaning we want to route requests using the get HTTP verb,

26
00:02:04,302 --> 00:02:10,761
then add the /videos URL path.  We give it the module VideoController,

27
00:02:10,762 --> 00:02:15,754
the controller module.  And finally, the action name as an atom,

28
00:02:15,755 --> 00:02:22,049
which is the name of the function we expect to be called in our controller module.

29
00:02:22,050 --> 00:02:25,554
Now that the request is being properly routed, let's see how we can

30
00:02:25,555 --> 00:02:30,332
respond from the controller.  This is what our controller looks like.

31
00:02:30,333 --> 00:02:33,983
It's a submodule of the FireStarterWeb module.

32
00:02:33,984 --> 00:02:37,640
The simiplest way to respond with plain text from a controller is

33
00:02:37,641 --> 00:02:42,083
using the text function.  Let's see what that looks like.

34
00:02:42,084 --> 00:02:47,178
First, we define an index function, which takes two arguments.

35
00:02:47,179 --> 00:02:52,350
First one in the connection, which we'll need to use to form the response.

36
00:02:52,351 --> 00:02:56,544
The second argument to controller functions is composed of arguments

37
00:02:56,545 --> 00:03:01,584
sent on the request set by the router.  In this particular case,

38
00:03:01,585 --> 00:03:05,288
we don't need any of those arguments, so we'll use the underscore

39
00:03:05,289 --> 00:03:09,171
character to ignore them.

40
00:03:09,172 --> 00:03:13,242
From inside the index function, we call text.

41
00:03:13,243 --> 00:03:18,102
Text is made available to the index function via the call to use,

42
00:03:18,103 --> 00:03:21,891
commonly placed at the top of the controller module.

43
00:03:21,892 --> 00:03:27,269
The call to use FireStarterWeb, :controller brings to VideoController

44
00:03:27,270 --> 00:03:32,550
a couple of functions useful for rendering the response, including text.

45
00:03:32,551 --> 00:03:36,318
The first argument to text is the connection.

46
00:03:36,319 --> 00:03:41,362
From the connection, Phoenix can access request headers and other info

47
00:03:41,363 --> 00:03:45,115
needed to craft the proper response to the client.

48
00:03:45,116 --> 00:03:49,731
The second argument to text is the actual text we want to respond with.

49
00:03:49,732 --> 00:03:55,833
In this example, Hello from VideoController.

50
00:03:55,834 --> 00:03:59,710
When we run this code and make a request to /videos, we can see

51
00:03:59,711 --> 00:04:05,446
Phoenix properly responds with the text Hello from VideoController.

52
00:04:05,447 --> 00:04:09,321
That's a good first step, but what we want to display is a list of

53
00:04:09,322 --> 00:04:15,225
videos in HTML.  Let's see how we can do that.

54
00:04:15,226 --> 00:04:19,510
We're back to VideoController.  Let's see what we need to add to

55
00:04:19,511 --> 00:04:24,542
change the response from plain text to HTML.

56
00:04:24,543 --> 00:04:30,428
To render HTML with video data from the database, we can use the render function.

57
00:04:30,429 --> 00:04:35,427
This function is made available to us from that same call to use and

58
00:04:35,428 --> 00:04:43,459
expects three arguments, the connection, a template name, and the keyword list.

59
00:04:43,460 --> 00:04:48,424
The template name will be index.html.  The keyword list will include

60
00:04:48,425 --> 00:04:54,423
one key, videos, and we'll assign it to a variable also named videos.

61
00:04:54,424 --> 00:04:57,805
This variable will be populated with a return value from calling

62
00:04:57,806 --> 00:05:03,923
Repo.all, which, as we've learned, returns all records from the videos table.

63
00:05:03,924 --> 00:05:07,142
The data set to the keyword list will be made available to the

64
00:05:07,143 --> 00:05:11,387
template, and we'll use it to create the HTML.

65
00:05:11,388 --> 00:05:16,160
The template is part of the V in MVC.

66
00:05:16,161 --> 00:05:20,301
In Phoenix, controllers use schemas to fetch and set up data from the

67
00:05:20,302 --> 00:05:25,103
database and then send this data to templates.

68
00:05:25,104 --> 00:05:32,602
Now let's see how to read data from inside templates and generate HTML.

69
00:05:32,603 --> 00:05:37,435
Here's an example of a simple template.  Templates receive data from

70
00:05:37,436 --> 00:05:43,390
controllers and render HTML response.  Inside templates, we can write

71
00:05:43,391 --> 00:05:50,738
regular HTML, like we see here, with an h2 header All Videos in the ul tags.

72
00:05:50,739 --> 00:05:57,169
In order to generate li tags with the video titles, we'll write an Elixir expression.

73
00:05:57,170 --> 00:06:02,832
This expression will read the data set by VideoController from @videos

74
00:06:02,833 --> 00:06:08,071
and use a list comprehension to create a list of li tags.

75
00:06:08,072 --> 00:06:13,753
List comprehensions are used to loop through enumerables and return collections.

76
00:06:13,754 --> 00:06:19,149
Here's how this code works.  The for keyword tells the arrow to assign

77
00:06:19,150 --> 00:06:25,349
each one of the elements from @videos to the video variable one at a time.

78
00:06:25,350 --> 00:06:29,867
From inside the do end block, we have access to this variable,

79
00:06:29,868 --> 00:06:35,345
which stores a video struct.  We read the title property from video.

80
00:06:35,346 --> 00:06:39,527
Notice the equal sign next to the percent symbol on the left.

81
00:06:39,528 --> 00:06:43,440
This tells Elixir that we want to print this expression,

82
00:06:43,441 --> 00:06:47,398
which then becomes the content of the li tag.

83
00:06:47,399 --> 00:06:52,356
Although they might look like for loops, they're not actually for loops.

84
00:06:52,357 --> 00:06:56,546
Here's another simpler example of using a list comprehension.

85
00:06:56,547 --> 00:06:59,498
In this code, we're looping through the list on the right of the

86
00:06:59,499 --> 00:07:05,337
arrow, the list of strings, a, b, and c.  On each iteration,

87
00:07:05,338 --> 00:07:09,565
one item from the list is assigned to the variable letter.

88
00:07:09,566 --> 00:07:14,162
Then from inside the block, we can access this variable and return an

89
00:07:14,163 --> 00:07:19,113
item to be added to a new empty list.  The list comprehension will

90
00:07:19,114 --> 00:07:23,039
loop through each item and will keep adding the value returned from

91
00:07:23,040 --> 00:07:26,908
the block to this new list until the end of the original list of

92
00:07:26,909 --> 00:07:31,745
strings is reached.  Once that happens, we return the new list and

93
00:07:31,746 --> 00:07:35,709
assign it to the variable output.  When we print the output to the

94
00:07:35,710 --> 00:07:43,843
console, we can see Letter: a, Letter: b, and Letter: c.

95
00:07:43,844 --> 00:07:47,267
With everything in place, we can now run our code again.

96
00:07:47,268 --> 00:07:52,045
When a client makes a request to the /videos path of our application,

97
00:07:52,046 --> 00:08:00,602
we'll read all videos from the database and respond with a formatted HTML page.

98
00:08:00,603 --> 00:08:02,984
We've reached the end of this first section.

99
00:08:02,985 --> 01:00:00,000
It's your turn to try rendering some HTML in the code challenges.
