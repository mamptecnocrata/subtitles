1
00:00:00,000 --> 00:00:08,440
Yeah, cruise down that strip and take in the neon lights baby,

2
00:00:08,441 --> 00:00:13,618
as we get well equipped to take our apps to new heights, yeah!

3
00:00:13,619 --> 00:00:18,811
We'll create records, take in the view — our route is surely scenic too.

4
00:00:18,812 --> 00:00:22,545
We'll use Elixir as we travel through On Fire With Phoenix,

5
00:00:22,546 --> 00:00:29,045
On Fire With Phoenix, On Fire With Phoenix, yeah!

6
00:00:29,046 --> 00:00:32,237
You're watching On Fire With Phoenix.  I'm Carlos Souza, and in this

7
00:00:32,238 --> 00:00:36,564
first level we'll learn the basics of Phoenix and dive right in on how

8
00:00:36,565 --> 00:00:39,988
to work with a database.

9
00:00:39,989 --> 00:00:43,777
Phoenix is a web development framework written in Elixir.

10
00:00:43,778 --> 00:00:47,580
Like most other web frameworks, it uses the MVC pattern,

11
00:00:47,581 --> 00:00:51,338
which facilitates separating concerns and structuring code files

12
00:00:51,339 --> 00:00:55,020
inside of projects.  It improves developer's productivity by

13
00:00:55,021 --> 00:00:58,365
leveraging conventions from Elixir and Erlang.

14
00:00:58,366 --> 00:01:01,004
By running on top of the Erlang virtual machine,

15
00:01:01,005 --> 00:01:05,844
Phoenix applications run fast, scale well, are fault tolerant,

16
00:01:05,845 --> 00:01:10,728
and offer high availability.  Phoenix is a full stack framework,

17
00:01:10,729 --> 00:01:14,659
meaning it comes with solutions to assist with backend code,

18
00:01:14,660 --> 00:01:19,110
database access, and client-side programming with JavaScript.

19
00:01:19,111 --> 00:01:23,298
Some knowledge of Elixir and SQL is required for this course.

20
00:01:23,299 --> 00:01:26,750
If at any point you see syntax you are not familiar with,

21
00:01:26,751 --> 00:01:32,909
then you should pause and check out our other courses on those topics.

22
00:01:32,910 --> 00:01:36,606
In this course, we'll learn by doing.  Together we'll write features

23
00:01:36,607 --> 00:01:41,226
for a Phoenix web app for watching videos called FireStarter.

24
00:01:41,227 --> 00:01:44,936
Some of the things we'll learn include using the Ecto library to work

25
00:01:44,937 --> 00:01:51,089
with the database, creating new HTTP routes, working with forms,

26
00:01:51,090 --> 00:01:55,278
and validating user input.

27
00:01:55,279 --> 00:02:00,345
Before we start coding, let's see what MVC in Phoenix looks like.

28
00:02:00,346 --> 00:02:05,375
This is the big picture, and it's okay if this doesn't make sense yet.

29
00:02:05,376 --> 00:02:10,111
Throughout the course, we'll touch on each and every one of these parts.

30
00:02:10,112 --> 00:02:14,979
In this level, we'll start with the M of MVC, the model part,

31
00:02:14,980 --> 00:02:19,270
looking at schema modules.  We'll do that by implementing the first

32
00:02:19,271 --> 00:02:25,489
feature of our web app, listing records from an existing database.

33
00:02:25,490 --> 00:02:31,332
The first thing we'll learn in Phoenix is how to read data from a database table.

34
00:02:31,333 --> 00:02:34,732
For this course, we're going to assume there's a Postgres database

35
00:02:34,733 --> 00:02:38,629
behind our app.  This is the default database used by Phoenix,

36
00:02:38,630 --> 00:02:42,324
but others are supported as well.  In this section, we'll see how to

37
00:02:42,325 --> 00:02:47,529
map Elixir code to a database table and then how to list all records

38
00:02:47,530 --> 00:02:51,748
from this table.  Let's get to it.

39
00:02:51,749 --> 00:02:55,375
Here's a simple database table called videos.

40
00:02:55,376 --> 00:02:58,567
This table is where we'll fetch our data from.

41
00:02:58,568 --> 00:03:05,988
It has four columns, id, title, url, and duration, and two records,

42
00:03:05,989 --> 00:03:11,479
one for Elixir and one for JavaScript.  Now let's see how we can work

43
00:03:11,480 --> 00:03:15,602
with this data from Phoenix.

44
00:03:15,603 --> 00:03:21,663
In order to promote better code design, Phoenix adopts a particular folder structure.

45
00:03:21,664 --> 00:03:26,044
Starting from the root folder named after our app, FireStarter,

46
00:03:26,045 --> 00:03:31,814
most of the code we write will live in one of two folders inside lib.

47
00:03:31,815 --> 00:03:39,863
The first folder is lib/name_of_our_app.  In this example, lib/fire_starter.

48
00:03:39,864 --> 00:03:44,299
This folder is for the core business logic of our application.

49
00:03:44,300 --> 00:03:47,732
Things that relate to core business logic include, for example,

50
00:03:47,733 --> 00:03:52,515
calculating sales tax in a shopping cart or validations like enforcing

51
00:03:52,516 --> 00:04:01,954
a max number of users in a chat room.  The second folder is lib/name_of_our_app_web.

52
00:04:01,955 --> 00:04:06,160
This is for logic related to the web presentation of our app.

53
00:04:06,161 --> 00:04:10,375
Examples of this type of logic include max number of records displayed

54
00:04:10,376 --> 00:04:15,128
on a page and error messages displayed in form submissions.

55
00:04:15,129 --> 00:04:18,521
In a Phoenix app, there are more folders than just these two for

56
00:04:18,522 --> 00:04:22,845
things like configuration, library dependencies, tests, and whatnot,

57
00:04:22,846 --> 00:04:25,941
but we won't have to worry about them for this course.

58
00:04:25,942 --> 00:04:31,137
Now on to writing our very first Phoenix code.

59
00:04:31,138 --> 00:04:34,710
Phoenix ships with a database library called Ecto, which uses the

60
00:04:34,711 --> 00:04:39,575
concept of Schema module in order to communicate with database tables.

61
00:04:39,576 --> 00:04:43,094
Schema modules are Elixir modules responsible for mapping data

62
00:04:43,095 --> 00:04:47,191
sources, usually databases, to Elixir code.

63
00:04:47,192 --> 00:04:51,174
Here's the Ecto schema that creates a mapping to the videos table.

64
00:04:51,175 --> 00:04:58,601
This file lives under the lib/fire_starter folder, and it's named video.ex.

65
00:04:58,602 --> 00:05:02,803
The top-level module must be named after our app name.

66
00:05:02,804 --> 00:05:07,379
In this example, FireStarter.  The module itself can be named

67
00:05:07,380 --> 00:05:11,351
anything, but it's a convention to use the singular version of the

68
00:05:11,352 --> 00:05:17,188
database table, so we'll call it Video.

69
00:05:17,189 --> 00:05:21,104
The first line after the module definition brings functions from the

70
00:05:21,105 --> 00:05:26,567
Ecto.Schema module included in Phoenix into our FireStarter.Video

71
00:05:26,568 --> 00:05:29,875
module so we can use them to define the mapping.

72
00:05:29,876 --> 00:05:33,837
One of these functions is the schema function, which takes the name of

73
00:05:33,838 --> 00:05:40,668
the database table as its argument and a block of code.

74
00:05:40,669 --> 00:05:44,758
Inside the schema block, we use the field function, which takes the

75
00:05:44,759 --> 00:05:49,291
name of a column of the database followed by the data type in Elixir

76
00:05:49,292 --> 00:05:54,682
we want to use to store its data.  In this example, we're mapping the

77
00:05:54,683 --> 00:05:59,218
title column and storing the data on a field of type string,

78
00:05:59,219 --> 00:06:04,342
then mapping the url column to a field also of type string and a

79
00:06:04,343 --> 00:06:08,274
duration column to a field of type integer.

80
00:06:08,275 --> 00:06:12,165
Notice in our Schema module there's no explicit reference to the id

81
00:06:12,166 --> 00:06:17,427
column in the database table.  The default behavior of Ecto expects a

82
00:06:17,428 --> 00:06:22,631
column named id to exist on each table it maps to and automatically

83
00:06:22,632 --> 00:06:27,282
uses that as the primary key.

84
00:06:27,283 --> 00:06:32,846
One more thing that's commonly used in Ecto schemas is the timestamps function.

85
00:06:32,847 --> 00:06:37,601
This function creates fields that help keep track of any record was

86
00:06:37,602 --> 00:06:41,662
initially created and when he was last updated.

87
00:06:41,663 --> 00:06:45,818
It does so by mapping Elixir code to the inserted_at and updated_at

88
00:06:45,819 --> 00:06:50,423
columns in the database table.  Ecto automatically populates these

89
00:06:50,424 --> 00:06:56,123
columns for us when a new record is created and every time it's updated.

90
00:06:56,124 --> 00:06:59,932
Calling the timestamps function is a shorthand for these two calls to

91
00:06:59,933 --> 00:07:04,606
field, one for the inserted_at column and one for the updated_at

92
00:07:04,607 --> 00:07:12,091
column, both using the naive_datetime data type from Elixir.

93
00:07:12,092 --> 00:07:15,349
With the mapping in place, now let's see how we can issue commands to

94
00:07:15,350 --> 00:07:20,942
the database and list video records.  In Phoenix, all communication with

95
00:07:20,943 --> 00:07:25,816
the database is done through the Repo module, a submodule of the

96
00:07:25,817 --> 00:07:33,101
top-level FireStarter module.  Repo is a wrapper around the database.

97
00:07:33,102 --> 00:07:37,151
It has access to the necessary credentials, and it's responsible for

98
00:07:37,152 --> 00:07:39,939
establishing a connection with the database.

99
00:07:39,940 --> 00:07:44,818
To list all records from the database, we use the all function from Repo.

100
00:07:44,819 --> 00:07:48,658
This function takes a schema as argument, like the one we've just

101
00:07:48,659 --> 00:07:53,142
created for Video, and returns all records from the table referenced

102
00:07:53,143 --> 00:07:58,470
by the schema.  In this example, calling the all function will execute

103
00:07:58,471 --> 00:08:06,099
a SQL statement similar to this one, SELECT * FROM "videos".

104
00:08:06,100 --> 00:08:09,905
Now topping the FireStarter module every time you want to reference

105
00:08:09,906 --> 00:08:15,252
Repo or Schema modules like Video can feel quite repetitive.

106
00:08:15,253 --> 00:08:18,766
A technique commonly found in Phoenix apps which can address this

107
00:08:18,767 --> 00:08:24,604
issue is using the alias directive.  In this example, we type alias

108
00:08:24,605 --> 00:08:31,646
followed by FireStarter.Repo and then alias followed by FireStarter.Video.

109
00:08:31,647 --> 00:08:35,861
Each one of these calls creates an alias named after the last part of

110
00:08:35,862 --> 00:08:40,126
the module name.  Now, instead of having to reference the FireStarter

111
00:08:40,127 --> 00:08:48,705
top-level module in all operations, we can simply use Repo and Video.

112
00:08:48,706 --> 00:08:52,611
That's it for this section.  Now it's your turn to write Phoenix code

113
00:08:52,612 --> 01:00:00,000
that lists records from the database in the challenges.
