1
00:00:02,040 --> 00:00:03,410
Добро пожаловать снова
на курс Try SQL.

2
00:00:03,410 --> 00:00:05,332
Надеюсь, вам
понравились упражнения.

3
00:00:05,332 --> 00:00:07,790
В этой части мы получим
первый опыт использования

4
00:00:07,790 --> 00:00:10,240
языка программирования SQL.

5
00:00:10,240 --> 00:00:12,330
Теперь мы знаем
о базах данных, таблицах,

6
00:00:12,330 --> 00:00:14,360
и как они используются
каждый день.

7
00:00:14,360 --> 00:00:17,370
Но как мы на самом деле
общаемся с базой данных?

8
00:00:17,370 --> 00:00:19,220
Ответ простой.

9
00:00:19,220 --> 00:00:20,390
Три буквы.

10
00:00:20,390 --> 00:00:22,800
S-Q-L, более известный как SQL.

11
00:00:22,800 --> 00:00:25,110
SQL - язык программирования,
который позволяет нам

12
00:00:25,110 --> 00:00:27,480
взаимодействовать с базой данных.

13
00:00:27,480 --> 00:00:30,670
Мы предоставляем
базе данных код SQL

14
00:00:30,670 --> 00:00:32,200
и она отдает результат.

15
00:00:32,200 --> 00:00:34,000
Но действительно ли
это так просто?

16
00:00:34,000 --> 00:00:36,220
Давайте взглянем поближе.

17
00:00:36,220 --> 00:00:39,610
При работе с базой данных
язык или код SQL записываются

18
00:00:39,610 --> 00:00:42,360
в выражения (запросы), которые
просят базу данных выполнять

19
00:00:42,360 --> 00:00:44,220
множество разных команд.

20
00:00:44,220 --> 00:00:47,000
Сначала пишется некоторый код.

21
00:00:47,000 --> 00:00:49,890
База данных получает этот код
и обрабатывает его.

22
00:00:49,890 --> 00:00:52,990
И, наконец, данные достигают
места назначения

23
00:00:52,990 --> 00:00:54,470
и выдаются результаты.

24
00:00:54,470 --> 00:00:55,260
Просто, не так ли?

25
00:00:58,560 --> 00:01:01,050
Давайте взглянем на наш
пример из первой части.

26
00:01:01,050 --> 00:01:05,069
Браузер отправляет запрос
в виде кода SQL,

27
00:01:05,069 --> 00:01:07,320
и он идет в базу данных.

28
00:01:07,320 --> 00:01:10,500
База данных возвращает результат,
и обновленное расписание фильмов

29
00:01:10,500 --> 00:01:12,870
становится доступно на сайте.

30
00:01:12,870 --> 00:01:14,290
Здесь мы видим,
что браузер использует

31
00:01:14,290 --> 00:01:16,560
тот же самый процесс,
который мы обсуждали ранее,

32
00:01:16,560 --> 00:01:19,080
чтобы получить эти результаты.

33
00:01:19,080 --> 00:01:21,760
Итак, теперь мы готовы
сделать несколько вещей с SQL.

34
00:01:21,760 --> 00:01:23,780
У нас есть первоначальная
проблема поиска

35
00:01:23,780 --> 00:01:27,690
всех названий фильмов, которые
показываются в Gatsby Theaters.

36
00:01:27,690 --> 00:01:30,760
Но давайте добавим еще несколько
задач, чтобы показать,

37
00:01:30,760 --> 00:01:33,300
насколько действительно
полезным может быть SQL.

38
00:01:33,300 --> 00:01:36,790
Сперва мы хотим получить
список всех фильмов

39
00:01:36,790 --> 00:01:38,980
и всю информацию о них.

40
00:01:38,980 --> 00:01:41,360
Затем мы хотим найти
только название фильма

41
00:01:41,360 --> 00:01:43,660
у которого ID равно 2.

42
00:01:43,660 --> 00:01:46,160
И, наконец, мы хотим
получить все фильмы

43
00:01:46,160 --> 00:01:48,860
с названием «The Kid».

44
00:01:48,860 --> 00:01:50,800
Давайте взглянем
на SQL рецепт,


45
00:01:50,800 --> 00:01:53,810
который вернет точные
результаты, которые мы ищем.

46
00:01:53,810 --> 00:01:57,080
Для этого мы собираемся
использовать запрос SELECT.

47
00:01:57,080 --> 00:02:03,036
В рецепте SELECT мы имеем:
SELECT (пропуск) FROM (пропуск).

48
00:02:03,036 --> 00:02:04,410
Первый (пропуск) -

49
00:02:04,410 --> 00:02:06,750
это где мы будем вводить
имя столбца, из которого

50
00:02:06,750 --> 00:02:08,820
мы хотим получить
некоторые данные.

51
00:02:08,820 --> 00:02:09,820
И второй (пропуск) -

52
00:02:09,820 --> 00:02:12,120
название таблицы, в которой
эти данные расположены.

53
00:02:12,120 --> 00:02:16,380
Кроме того, все SQL запросы
должны иметь точку с запятой

54
00:02:16,380 --> 00:02:20,410
в конце для завершения запроса.

55
00:02:20,410 --> 00:02:21,970
Давайте разберемся с
первоначальным вопросом

56
00:02:21,970 --> 00:02:24,520
извлечения всех
названий фильмов

57
00:02:24,520 --> 00:02:25,540
Gatsby Theaters.

58
00:02:25,540 --> 00:02:29,920
Здесь у нас - таблица Movies
и все ее содержимое.

59
00:02:29,920 --> 00:02:32,790
Мы хотим написать SQL SELECT
запрос, который вернет

60
00:02:32,790 --> 00:02:35,220
список всех названий фильмов.

61
00:02:35,220 --> 00:02:37,810
Для этого мы будем
использовать рецепт SELECT.

62
00:02:37,810 --> 00:02:41,930
И напишем SELECT title (название
столбца, который нас интересует),

63
00:02:41,930 --> 00:02:46,240
и затем FROM movies
(название таблицы, в которой

64
00:02:46,240 --> 00:02:47,980
столбец title находится).

65
00:02:47,980 --> 00:02:49,930
Только один столбец был выбран,

66
00:02:49,930 --> 00:02:51,910
чтобы получить некоторые данные.

67
00:02:51,910 --> 00:02:54,950
Таким образом, результат будет
содержать данные только этого

68
00:02:54,950 --> 00:02:56,700
столбца для любых
совпадающих строк.

69
00:02:56,700 --> 00:02:59,180
Итак, если мы теперь запустим
этот удивительный SQL код,

70
00:02:59,180 --> 00:03:01,440
мы увидим, что база данных
Gatsby Theater возвращает

71
00:03:01,440 --> 00:03:03,420
все запрошенные названия.

72
00:03:03,420 --> 00:03:06,780
Поскольку мы не задавали
базе данных больше никаких

73
00:03:06,780 --> 00:03:10,010
конкретных требований,
она возвращает все названия.

74
00:03:10,010 --> 00:03:11,940
Смотрим на нашу
следующую задачу,

75
00:03:11,940 --> 00:03:14,120
мы хотим составить
список всех фильмов

76
00:03:14,120 --> 00:03:15,550
с информацией о них.

77
00:03:15,550 --> 00:03:17,950
Проверьте первый блок кода.

78
00:03:17,950 --> 00:03:19,560
Здесь вы можете видеть,
что мы можем на самом деле

79
00:03:19,560 --> 00:03:21,930
выбрать более одного столбца.

80
00:03:21,930 --> 00:03:24,060
Эта инструкция вернет
все названия фильмов,

81
00:03:24,060 --> 00:03:27,730
как и раньше,
а также жанры фильмов.

82
00:03:27,730 --> 00:03:31,220
Таким образом, можно
добавить все наши столбцы

83
00:03:31,220 --> 00:03:34,890
в SELECT запрос, как
показано во втором примере.

84
00:03:34,890 --> 00:03:38,100
Это вернет все данные
из всех столбцов.

85
00:03:38,100 --> 00:03:40,680
Но что, если у вас
100 000 столбцов?

86
00:03:40,680 --> 00:03:43,690
Вы не хотели бы перечислять
их все, не так ли?

87
00:03:43,690 --> 00:03:45,530
Оказывается, у нас есть
альтернативный способ

88
00:03:45,530 --> 00:03:47,690
обозначения всех столбцов.

89
00:03:47,690 --> 00:03:50,480
Если бы мы выполнили запрос
SELECT со звездочкой,

90
00:03:50,480 --> 00:03:53,490
мы бы получили все фильмы
со всей информацией о них,

91
00:03:53,490 --> 00:03:56,070
как если бы мы
указали все столбцы.

92
00:03:56,070 --> 00:03:56,950
Довольно круто, правда?

93
00:03:59,790 --> 00:04:00,700
Хорошо.

94
00:04:00,700 --> 00:04:02,560
Итак, теперь мы знаем, что
можем пойти в базу данных

95
00:04:02,560 --> 00:04:06,037
и получить все наши данные,
что, конечно, полезно.

96
00:04:06,037 --> 00:04:07,620
Но что, если мы хотим получить

97
00:04:07,620 --> 00:04:10,400
только небольшую часть
тех данных?

98
00:04:10,400 --> 00:04:12,870
Мы можем фильтровать или
точно определять данные,

99
00:04:12,870 --> 00:04:16,890
которые мы хотим найти,
используя условие WHERE

100
00:04:16,890 --> 00:04:18,790
в конце нашего
SELECT запроса.

101
00:04:18,790 --> 00:04:22,089
Если мы взглянем
на наш WHERE рецепт,

102
00:04:22,089 --> 00:04:25,220
мы можем увидеть
условие WHERE в конце.

103
00:04:25,220 --> 00:04:27,170
Давайте покажем эффективность
добавления этого условия,

104
00:04:27,170 --> 00:04:30,430
запросив название фильма,
у которого ID равно 2.

105
00:04:34,020 --> 00:04:37,860
Чтобы получить название фильма,
ID которого равно 2,

106
00:04:37,860 --> 00:04:40,670
мы добавим
WHERE ID равно 2

107
00:04:40,670 --> 00:04:43,110
в конце этого SELECT запроса.

108
00:04:43,110 --> 00:04:46,700
Это позволит нам вернуть более
четко определенный набор данных,

109
00:04:46,700 --> 00:04:49,850
а именно все заголовки
для всех фильмов,

110
00:04:49,850 --> 00:04:51,840
у которых ID равно 2.

111
00:04:51,840 --> 00:04:55,920
Этот запрос SQL сначала выберет
все столбцы с именем title

112
00:04:55,920 --> 00:04:58,060
из таблицы movies.

113
00:04:58,060 --> 00:05:01,260
Затем база данных
находит столбец ID

114
00:05:01,260 --> 00:05:04,940
и ищет тот фильм,
где ID равен 2.

115
00:05:04,940 --> 00:05:06,160
Посмотрите на это первое поле.

116
00:05:06,160 --> 00:05:08,060
Этот ID правильный?

117
00:05:08,060 --> 00:05:09,650
Нет, конечно, нет.

118
00:05:09,650 --> 00:05:11,940
Итак, теперь давайте посмотрим
дальше вниз по столбцу.

119
00:05:11,940 --> 00:05:15,750
С еще одним шагом -
ага, мы нашли совпадение,

120
00:05:15,750 --> 00:05:19,080
где ID, на самом деле, 2.

121
00:05:19,080 --> 00:05:21,420
Если мы найдем строку, которая
удовлетворяет всем требованиям

122
00:05:21,420 --> 00:05:24,410
нашего условия WHERE, база данных
будет выхватывать эту строку

123
00:05:24,410 --> 00:05:26,500
и готовить ее к возврату.

124
00:05:26,500 --> 00:05:28,570
Но поиск еще не закончен.

125
00:05:28,570 --> 00:05:31,900
Итак, мы нашли одну правильную
строку, но база данных

126
00:05:31,900 --> 00:05:35,420
не знает, есть ли другие
строки с таким ID.

127
00:05:35,420 --> 00:05:38,130
Таким образом, последние две
строки также проверяются

128
00:05:38,130 --> 00:05:39,870
на соответствие условиям.

129
00:05:39,870 --> 00:05:42,260
Оказывается, однако,
что их больше нет.

130
00:05:42,260 --> 00:05:44,610
Итак, теперь,
когда поиск завершен,

131
00:05:44,610 --> 00:05:48,170
мы обнаруживаем, что ячейка,
которая содержит «Nosferatu»,

132
00:05:48,170 --> 00:05:50,570
и есть те данные,
которые мы ищем.

133
00:05:50,570 --> 00:05:52,800
И поскольку мы выбираем
только один столбец,

134
00:05:52,800 --> 00:05:57,005
который называется title,
то возвращаются только

135
00:05:57,005 --> 00:05:59,910
данные из этого столбца.

136
00:05:59,910 --> 00:06:02,560
Что делать, если вместо этого
мы хотели найти строку данных,

137
00:06:02,560 --> 00:06:04,850
например, слово или фразу?

138
00:06:04,850 --> 00:06:07,300
SQL также позволит
нам это сделать.

139
00:06:07,300 --> 00:06:09,140
Мы можем использовать
настоящие слова,

140
00:06:09,140 --> 00:06:11,690
которые могут выглядеть
как строки букв или символов,

141
00:06:11,690 --> 00:06:14,680
для поиска совпадений
слов внутри таблицы.

142
00:06:14,680 --> 00:06:16,750
Здесь мы ищем все столбцы,

143
00:06:16,750 --> 00:06:20,470
используя звездочку
в таблице movies, где

144
00:06:20,470 --> 00:06:23,720
внутри столбца title
есть запись, которая

145
00:06:23,720 --> 00:06:27,420
точно соответствует
«The Kid».

146
00:06:27,420 --> 00:06:29,740
Поскольку мы выбираем все
данные из таблицы movies,

147
00:06:29,740 --> 00:06:31,250
мы знаем,
что все записи сначала

148
00:06:31,250 --> 00:06:33,020
рассматриваются для поиска.

149
00:06:33,020 --> 00:06:36,240
Условие WHERE позволяет
нам сосредоточиться

150
00:06:36,240 --> 00:06:37,890
на столбце title
в качестве первого фильтра.

151
00:06:37,890 --> 00:06:40,140
И в этом столбце мы находим
запись соответствия

152
00:06:40,140 --> 00:06:43,820
для «The Kid»,
которую мы ищем.

153
00:06:43,820 --> 00:06:46,320
Кое-что нужно знать
при выполнении поиска

154
00:06:46,320 --> 00:06:49,740
этого типа - проверьте,
что у нас одинарные кавычки

155
00:06:49,740 --> 00:06:51,420
вокруг строкового значения.

156
00:06:51,420 --> 00:06:53,200
Мы используем их
при выборе точных

157
00:06:53,200 --> 00:06:57,150
последовательностей символов,
которые мы хотим сопоставить.

158
00:06:57,150 --> 00:06:59,840
Другими словами, вам нужно будет
использовать одинарные кавычки

159
00:06:59,840 --> 00:07:03,200
при выполнении поиска этого типа.

160
00:07:03,200 --> 00:07:04,880
На этом вторая часть закончена.

161
00:07:04,880 --> 00:07:06,710
Теперь пришло время
для новых испытаний.

162
00:07:06,710 --> 00:07:09,020
Увидимся в следующей части.
