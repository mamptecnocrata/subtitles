1
00:00:02,040 --> 00:00:03,220
Добро пожаловать
снова в Try SQL.

2
00:00:03,220 --> 00:00:05,080
Надеюсь, вы получаете
удовольствие, как и я.

3
00:00:05,080 --> 00:00:06,540
Давайте продолжим.

4
00:00:06,540 --> 00:00:10,209
В третьей части мы познакомимся
с критериями данных.

5
00:00:10,209 --> 00:00:11,750
В предыдущей части
мы узнали, как выделить

6
00:00:11,750 --> 00:00:14,590
и отфильтровать данные,
которые мы хотим найти.

7
00:00:14,590 --> 00:00:17,320
Но что, если мы хотим сортировать
эти данные особым образом?

8
00:00:17,320 --> 00:00:20,810
Например, если мы хотим
найти все названия фильмов

9
00:00:20,810 --> 00:00:25,140
и отсортировать их по длине
или продолжительности фильма?

10
00:00:25,140 --> 00:00:27,810
Для достижения этой цели мы
используем новый SQL рецепт.

11
00:00:27,810 --> 00:00:29,700
Назовем его ORDER BY рецепт.

12
00:00:29,700 --> 00:00:30,680
Давайте взглянем!

13
00:00:30,680 --> 00:00:34,310
Мы используем такие же условия
SELECT и FROM, как обычно,

14
00:00:34,310 --> 00:00:37,860
но после условия FROM
добавляем условие ORDER BY.

15
00:00:37,860 --> 00:00:40,860
Это позволит нам сортировать
данные по столбцам так,

16
00:00:40,860 --> 00:00:44,010
как мы хотим их увидеть.

17
00:00:44,010 --> 00:00:45,740
Вернемся к нашему вопросу.

18
00:00:45,740 --> 00:00:47,520
Мы хотим получить
все названия фильмов

19
00:00:47,520 --> 00:00:49,780
и отсортировать их
по продолжительности.

20
00:00:49,780 --> 00:00:53,490
Для начала, мы должны
выбрать их из столбца title.

21
00:00:53,490 --> 00:00:55,700
При использовании
условия ORDER BY

22
00:00:55,700 --> 00:00:57,330
мы также можем выбирать
способ просмотра данных -

23
00:00:57,330 --> 00:01:00,430
в порядке возрастания
или убывания.

24
00:01:00,430 --> 00:01:02,150
Поэтому, учитывая,
что мы ищем

25
00:01:02,150 --> 00:01:05,430
результаты из столбца title,

26
00:01:05,430 --> 00:01:07,680
мы также должны помнить,
что мы сортируем столбец

27
00:01:07,680 --> 00:01:10,750
title по наименьшей
продолжительности.

28
00:01:10,750 --> 00:01:13,355
Это одно из преимуществ
условия ORDER BY.

29
00:01:17,690 --> 00:01:19,810
Теперь, если мы выполним
запрос SELECT, мы можем

30
00:01:19,810 --> 00:01:22,640
увидеть, что названия фильмов
возвращаются в порядке

31
00:01:22,640 --> 00:01:25,110
возрастания, или от меньшей
продолжительности к большей.

32
00:01:25,110 --> 00:01:27,610
Это значит, что заголовки сначала
сортируются по наименьшей

33
00:01:27,610 --> 00:01:30,400
продолжительности, но заголовок
с наивысшей продолжительностью

34
00:01:30,400 --> 00:01:33,220
должен быть последним, потому что
продолжительность увеличивается

35
00:01:33,220 --> 00:01:34,970
с увеличением количества результатов.

36
00:01:34,970 --> 00:01:37,880
Обратите внимание, что мы
не возвращаем в результатах

37
00:01:37,880 --> 00:01:39,905
продолжительность фильмов, а
только организованные заголовки.

38
00:01:42,470 --> 00:01:44,290
Но можно сделать по другому,

39
00:01:44,290 --> 00:01:46,850
возвращая названия фильмов

40
00:01:46,850 --> 00:01:48,680
в порядке убывания.

41
00:01:48,680 --> 00:01:51,280
Это значит, что первым
возвращается заголовок

42
00:01:51,280 --> 00:01:54,490
фильма с максимальной
продолжительностью,

43
00:01:54,490 --> 00:01:57,790
а последним - с наименьшей.

44
00:01:57,790 --> 00:02:01,540
Обратите внимание, что DESC
используется для обозначения,

45
00:02:01,540 --> 00:02:03,750
когда условие ORDER BY
выполняется таким образом.

46
00:02:03,750 --> 00:02:06,900
SQL автоматически предполагает,
что если DESC не указывается,

47
00:02:06,900 --> 00:02:09,229
то результат будет возвращен
в порядке возрастания,

48
00:02:09,229 --> 00:02:12,400
как мы видели ранее.

49
00:02:12,400 --> 00:02:14,040
Итак, теперь мы нашли
несколько разных способов

50
00:02:14,040 --> 00:02:17,520
улучшения поиска SQL, включая
некоторые критерии поиска.

51
00:02:17,520 --> 00:02:21,100
Но что, если мы хотим вернуть
определенные диапазоны данных

52
00:02:21,100 --> 00:02:24,980
на основе сравнения, включая
какое-то граничное значение?

53
00:02:24,980 --> 00:02:28,370
В качестве примера давайте
используя SQL получим все

54
00:02:28,370 --> 00:02:31,799
фильмы продолжительностью
более 100 минут.

55
00:02:31,799 --> 00:02:33,340
Мы не ищем фильмы,
с продолжительностью

56
00:02:33,340 --> 00:02:36,840
ровно 100 минут, а только
те фильмы, длина которых

57
00:02:36,840 --> 00:02:38,290
больше 100 минут.

58
00:02:38,290 --> 00:02:40,590
Мы будем использовать рецепт
SELECT ... FROM ... WHERE ...

59
00:02:40,590 --> 00:02:44,220
и включим оператор сравнения
между двумя объектами.

60
00:02:44,220 --> 00:02:47,820
Здесь вы можете видеть
оператор сравнения.

61
00:02:47,820 --> 00:02:51,210
Знак «больше», обычно
используемый в математике,

62
00:02:51,210 --> 00:02:53,740
обозначает, что все элементы
в этом столбце должны быть

63
00:02:53,740 --> 00:02:58,070
больше значения, указанного
справа от знака.

64
00:02:58,070 --> 00:02:58,920
Но знаете что?

65
00:02:58,920 --> 00:03:01,910
Мы уже знакомы
с оператором сравнения.

66
00:03:01,910 --> 00:03:02,490
Верно.

67
00:03:02,490 --> 00:03:04,860
Знак «равно» - это
тоже тип сравнения.

68
00:03:04,860 --> 00:03:06,980
Этот запрос не возвращает
записей, соответствующих

69
00:03:06,980 --> 00:03:09,610
условиям сравнения,
потому что нет фильмов

70
00:03:09,610 --> 00:03:15,520
продолжительностью
ровно 100 минут.

71
00:03:15,520 --> 00:03:19,480
Но если мы используем знак
«больше» в условии WHERE,

72
00:03:19,480 --> 00:03:21,530
мы получим эту запись.

73
00:03:21,530 --> 00:03:23,270
Так как «Metropolis» -

74
00:03:23,270 --> 00:03:26,900
это единственный
фильм в таблице,

75
00:03:26,900 --> 00:03:28,780
соответствующий
условиям запроса,

76
00:03:28,780 --> 00:03:31,200
продолжительностью

77
00:03:31,200 --> 00:03:33,820
более 100 минут.

78
00:03:33,820 --> 00:03:35,410
Существуют и другие
операторы сравнения

79
00:03:35,410 --> 00:03:38,040
используемые в SQL, которые
мы хотим показать вам.

80
00:03:38,040 --> 00:03:40,660
Во-первых, при добавлении
оператора «меньше»,

81
00:03:40,660 --> 00:03:42,770
запрос вернет все записи

82
00:03:42,770 --> 00:03:46,000
с продолжительностью
менее 100 минут.

83
00:03:46,000 --> 00:03:49,470
Если мы поменяем его
на знак «больше или равно»,

84
00:03:49,470 --> 00:03:51,540
запрос будет извлекать
все записи, где

85
00:03:51,540 --> 00:03:55,310
продолжительность больше
или равна 94 минутам.

86
00:03:55,310 --> 00:03:57,460
И, наконец,
если мы поменяем его

87
00:03:57,460 --> 00:04:00,320
на знак «меньше или равно»,

88
00:04:00,320 --> 00:04:02,510
запрос будет извлекать
все записи, где

89
00:04:02,510 --> 00:04:08,570
продолжительность меньше
или равна 95 минутам.

90
00:04:08,570 --> 00:04:10,520
У нас есть последний
оператор сравнения,

91
00:04:10,520 --> 00:04:12,990
который выглядит
странной штукой

92
00:04:12,990 --> 00:04:14,260
«меньше - больше».

93
00:04:14,260 --> 00:04:15,720
Что это???

94
00:04:15,720 --> 00:04:18,500
Этот оператор находит
все записи, которые

95
00:04:18,500 --> 00:04:22,340
не совпадают
с указанным значением.

96
00:04:22,340 --> 00:04:25,050
Это знак «не равно».

97
00:04:25,050 --> 00:04:27,850
Скажем, например, вы хотите
посмотреть все фильмы,

98
00:04:27,850 --> 00:04:30,250
кроме жанра «horror».

99
00:04:30,250 --> 00:04:33,180
Вы можете использовать знак
«не равно» для получения

100
00:04:33,180 --> 00:04:37,110
всех записей, которые не имеют
жанра «horror», как показано.

101
00:04:37,110 --> 00:04:40,030
«Metropolis», «The Kid»
и «The Gold Rush»

102
00:04:40,030 --> 00:04:43,100
не имеют жанра «horror».

103
00:04:43,100 --> 00:04:45,460
Далее, что бы мы делали,
если хотим найти

104
00:04:45,460 --> 00:04:49,300
данные, соответствующие
нескольким условиям?

105
00:04:49,300 --> 00:04:51,110
Как бы мы это сделали?

106
00:04:51,110 --> 00:04:53,400
Скажем, например, что мы

107
00:04:53,400 --> 00:04:57,140
хотим получить все записи,
где одновременно id равно 1,

108
00:04:57,140 --> 00:04:59,380
а genre равно «comedy» .

109
00:04:59,380 --> 00:05:01,410
Как мы можем
это сделать с SQL?

110
00:05:01,410 --> 00:05:05,070
Представляем новый
оператор - AND.

111
00:05:05,070 --> 00:05:07,900
И новый SQL рецепт.

112
00:05:07,900 --> 00:05:11,380
Мы можем использовать условия
SELECT ... FROM ... WHERE ...

113
00:05:11,380 --> 00:05:14,010
В конце запроса
добавляется оператор AND,

114
00:05:14,010 --> 00:05:16,460
чтобы определить
дополнительный

115
00:05:16,460 --> 00:05:18,160
критерий для поиска.

116
00:05:20,800 --> 00:05:22,860
Взглянем снова
на таблицу Movies.

117
00:05:22,860 --> 00:05:27,460
В SQL, когда используется
оператор AND,

118
00:05:27,460 --> 00:05:30,110
SQL возвращает результат
только при выполнении

119
00:05:30,110 --> 00:05:31,720
всех условий.

120
00:05:31,720 --> 00:05:36,040
Когда мы пытаемся выполнить
этот запрос SELECT,

121
00:05:36,040 --> 00:05:38,280
мы видим, что в таблице
Movies нет записей,

122
00:05:38,280 --> 00:05:41,800
соответствующих
всем критериям,

123
00:05:41,800 --> 00:05:43,500
которые мы ищем.

124
00:05:43,500 --> 00:05:46,950
Но если мы изменим жанр
фильма «Metropolis»

125
00:05:46,950 --> 00:05:51,590
на «comedy» вместо «sci-fi»,
то получим результат.

126
00:05:51,590 --> 00:05:55,910
Итак, учитывая, что
оба условия WHERE и AND

127
00:05:55,910 --> 00:06:00,440
должны быть выполнены,
мы видим, что сначала

128
00:06:00,440 --> 00:06:02,760
определяются все данные,
где id равно 1.

129
00:06:02,760 --> 00:06:05,420
Затем полученные данные
исследуются на совпадение

130
00:06:05,420 --> 00:06:07,240
с условием «comedy».

131
00:06:07,240 --> 00:06:10,500
Мы видим, что только
заголовок «Metropolis»

132
00:06:10,500 --> 00:06:13,640
отвечает всем
условиям поиска.

133
00:06:16,590 --> 00:06:19,230
Давайте рассмотрим другой
способ возвращения данных

134
00:06:19,230 --> 00:06:21,160
на основе критериев
соответствия.

135
00:06:21,160 --> 00:06:24,470
Что, если вместо того, чтобы
искать все названия фильмов,

136
00:06:24,470 --> 00:06:29,020
которые имеют id равно 1,
_И_ genre равно «comedy»,

137
00:06:29,020 --> 00:06:32,690
мы будем искать все
названия фильмов,

138
00:06:32,690 --> 00:06:35,120
где ID равно 1, _ИЛИ_
genre равно «comedy».

139
00:06:35,120 --> 00:06:37,950
SQL предлагает нам
новый синтаксис

140
00:06:37,950 --> 00:06:39,820
для обработки
этого сценария:

141
00:06:39,820 --> 00:06:43,800
ключевое слово OR,
а также новый рецепт SQL.

142
00:06:43,800 --> 00:06:48,890
Сначала мы используем условия
SELECT ... FROM ... WHERE ...

143
00:06:48,890 --> 00:06:51,170
В конце запроса
мы добавляем

144
00:06:51,170 --> 00:06:55,460
оператор OR для
поиска соответствий.

145
00:06:55,460 --> 00:06:58,320
При использовании
оператора OR с указанием

146
00:06:58,320 --> 00:07:02,360
двух или более критериев

147
00:07:02,360 --> 00:07:04,600
SQL возвращает результат
при выполнении хотя бы

148
00:07:04,600 --> 00:07:05,895
одного из условий.

149
00:07:10,960 --> 00:07:13,330
В показанном здесь
запросе SELECT,

150
00:07:13,330 --> 00:07:16,910
мы просто ищем запись,
где либо ID равно 1,

151
00:07:16,910 --> 00:07:19,620
либо genre содержит «comedy».

152
00:07:19,620 --> 00:07:22,890
Оказывается, в таблице
есть две записи,

153
00:07:22,890 --> 00:07:25,330
которые соответствуют
критериям поиска.

154
00:07:25,330 --> 00:07:28,270
Как мы видим, «Metropolis»
имеет id равный 1,

155
00:07:28,270 --> 00:07:30,770
а также genre равный «comedy»,

156
00:07:30,770 --> 00:07:33,520
в то время как «The Kid»
только genre равный «comedy».

157
00:07:33,520 --> 00:07:35,390
И поскольку у каждого
из них выполняется

158
00:07:35,390 --> 00:07:37,660
одно из приемлемых условий

159
00:07:37,660 --> 00:07:41,490
они оба возвращаются
в нашем результате.

160
00:07:41,490 --> 00:07:44,890
На этом все для третьй части
первого уровня.

161
00:07:44,890 --> 00:07:47,469
Пришло время для еще более
интересных задач с SQL.

162
00:07:47,469 --> 00:07:49,010
Увидимся на следующем уровне.

163
00:07:51,950 --> 00:07:53,620
It's time to suck less at SQL.

164
00:07:53,620 --> 00:07:54,980
We can reinforce these issues.

165
00:07:57,570 --> 00:07:58,830
Say.

166
00:07:58,830 --> 00:08:00,410
Something to be aware —

167
00:08:00,410 --> 00:08:01,250
A werewolf?

168
00:08:01,250 --> 00:08:03,128
A werewolf, yeah.
