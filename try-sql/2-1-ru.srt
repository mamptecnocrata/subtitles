1
00:00:00,275 --> 00:00:01,750
[SINGING] Deep in
your app, there's

2
00:00:01,750 --> 00:00:04,230
a space filled up
by a great database.

3
00:00:04,230 --> 00:00:06,780
Its tables are where
information goes, made up of

4
00:00:06,780 --> 00:00:08,390
cells inside columns and rows.

5
00:00:08,390 --> 00:00:10,880
To speak to it, we can
connect using INSERT,

6
00:00:10,880 --> 00:00:12,250
UPDATE, and SELECT.

7
00:00:12,250 --> 00:00:14,130
With a language
that has no equal,

8
00:00:14,130 --> 00:00:18,750
we need more people to Try SQL.

9
00:00:19,341 --> 00:00:21,040
SQL.

10
00:00:24,530 --> 00:00:26,965
Добро пожаловать
на второй уровень Try SQL.

11
00:00:26,965 --> 00:00:28,340
В предыдущих лекциях
мы рассмотрели

12
00:00:28,340 --> 00:00:30,900
способы получения
данных из таблиц.

13
00:00:30,900 --> 00:00:32,640
На этом уровне
мы рассмотрим

14
00:00:32,640 --> 00:00:35,880
способы добавления
данных в таблицы.

15
00:00:35,880 --> 00:00:36,800
Окей, отлично.

16
00:00:36,800 --> 00:00:39,500
Теперь мы знаем, как получить
доступ к данным в таблице Movies,

17
00:00:39,500 --> 00:00:41,940
но что делать, если бы мы
хотели добавить больше

18
00:00:41,940 --> 00:00:43,690
данных к тем, что мы уже имеем?

19
00:00:43,690 --> 00:00:46,390
Скажем, у нас есть новый фильм
«The Circus», который мы хотим

20
00:00:46,390 --> 00:00:48,690
добавить в таблицу Movies.

21
00:00:48,690 --> 00:00:51,580
Это комедия,
длительностью 71 минута.

22
00:00:51,580 --> 00:00:53,570
Давайте добавим его в таблицу.

23
00:00:53,570 --> 00:00:56,840
Чтобы добавить новую запись
в существующую таблицу в SQL,

24
00:00:56,840 --> 00:01:00,800
мы будем использовать
запрос INSERT.

25
00:01:00,800 --> 00:01:02,720
Здесь у нас рецепт INSERT,

26
00:01:02,720 --> 00:01:05,470
в котором есть нечто новое,
что мы должны рассмотреть.

27
00:01:05,470 --> 00:01:08,290
Запрос SQL начинается
с INSERT INTO,

28
00:01:08,290 --> 00:01:11,490
который указывает SQL, что мы
хотим добавить новые данные.

29
00:01:11,490 --> 00:01:14,730
Далее следует название таблицы,
в которую мы хотим добавить данные.

30
00:01:14,730 --> 00:01:17,060
Затем следует выражение
в круглых скобках

31
00:01:17,060 --> 00:01:19,310
которое указывают на
столбец или столбцы,

32
00:01:19,310 --> 00:01:20,840
в которые мы хотим
добавить данные.

33
00:01:20,840 --> 00:01:23,210
Следующим идет
ключевое слово VALUES.

34
00:01:23,210 --> 00:01:26,780
И наконец, фактические
значения данных,

35
00:01:26,780 --> 00:01:30,650
которые будут
добавлены в таблицу.

36
00:01:30,650 --> 00:01:33,990
Глядя на таблицу Movies, мы
знаем, что у нас есть четыре записи.

37
00:01:33,990 --> 00:01:37,770
Но теперь мы хотим
добавить пятую запись,

38
00:01:37,770 --> 00:01:39,560
вставив фильм с названием

39
00:01:39,560 --> 00:01:42,880
«The Circus», жанром «comedy»

40
00:01:42,880 --> 00:01:44,780
и продолжительностью
71 минута.

41
00:01:48,000 --> 00:01:51,950
Итак, сначала добавим
условие INSERT INTO,

42
00:01:51,950 --> 00:01:54,820
таблицу, в которую мы
будем вставлять данные

43
00:01:54,820 --> 00:01:57,520
(в данном случае — movies)

44
00:01:57,520 --> 00:01:59,940
и столбцы, куда пойдут данные.

45
00:01:59,940 --> 00:02:01,550
Мы указываем имена столбцов,

46
00:02:01,550 --> 00:02:03,670
чтобы база данных знала,
в какой столбец будет

47
00:02:03,670 --> 00:02:05,140
добавлено каждое значение.

48
00:02:05,140 --> 00:02:07,190
Порядок этих столбцов
не имеет значения,

49
00:02:07,190 --> 00:02:09,732
но он должен соответствовать
порядку вставляемых данных,

50
00:02:09,732 --> 00:02:11,690
если вы хотите, чтобы данные
попадали на свои места.

51
00:02:14,780 --> 00:02:17,614
Наконец, вводятся
фактические значения.

52
00:02:17,614 --> 00:02:19,030
Обратите внимание на кавычки,

53
00:02:19,030 --> 00:02:20,230
окружающие строки символов.

54
00:02:20,230 --> 00:02:21,450
Помните?

55
00:02:21,450 --> 00:02:24,490
Очень важно.

56
00:02:24,490 --> 00:02:27,420
Итак мы выполняем
запрос INSERT INTO

57
00:02:27,420 --> 00:02:30,370
и видим, что в таблице Movies,
которая содержала четыре строки,

58
00:02:30,370 --> 00:02:32,680
появляется пятая строка.

59
00:02:36,100 --> 00:02:37,990
Как и во многих вещах в SQL,

60
00:02:37,990 --> 00:02:40,020
существуютразные способы
добавления данных в таблицу,

61
00:02:40,020 --> 00:02:41,510
некоторые лучше других.

62
00:02:41,510 --> 00:02:44,450
Здесь мы видим, что мы
могли бы сделать то же самое,

63
00:02:44,450 --> 00:02:47,290
опуская столбцы в запросе SQL.

64
00:02:47,290 --> 00:02:49,790
Это работает, так как
мы вставляем данные

65
00:02:49,790 --> 00:02:52,070
во все столбцы.

66
00:02:52,070 --> 00:02:54,150
Оба запроса
делают одно и то же,

67
00:02:54,150 --> 00:02:56,230
но нижний запрос показывает
более быстрый способ

68
00:02:56,230 --> 00:02:59,220
написания кода, что экономит
время разработчика.

69
00:02:59,220 --> 00:03:01,389
Здесь порядок значений
определенно необходим

70
00:03:01,389 --> 00:03:02,805
для соответствия
порядку столбцов.

71
00:03:05,880 --> 00:03:08,425
Теперь, должны ли мы добавлять
данные в каждый столбец

72
00:03:08,425 --> 00:03:10,130
чтобы добавить
данные в таблицу?

73
00:03:10,130 --> 00:03:11,460
Вовсе нет.

74
00:03:11,460 --> 00:03:13,100
На самом деле, вот
несколько примеров,

75
00:03:13,100 --> 00:03:15,530
чтобы показать вам,
как это сделать с SQL.

76
00:03:15,530 --> 00:03:19,220
Мы могли бы добавить строку,
которая имеет только ID и title.

77
00:03:19,220 --> 00:03:21,700
Вы можете видеть, что
заполняются только ID и title

78
00:03:21,700 --> 00:03:22,930
для этой новой записи.

79
00:03:22,930 --> 00:03:24,800
Или мы могли бы просто
добавить строку, которая

80
00:03:24,800 --> 00:03:27,410
включает только title и duration.

81
00:03:27,410 --> 00:03:29,490
Кое-что важное.

82
00:03:29,490 --> 00:03:33,060
Вы уловили, как был установлен
ID, хотя мы его не задавали?

83
00:03:33,060 --> 00:03:34,410
Как это произошло?

84
00:03:34,410 --> 00:03:35,160
Давайте взглянем!

85
00:03:38,270 --> 00:03:40,930
Столбец ID здесь служит тем,

86
00:03:40,930 --> 00:03:43,280
что называется
первичный ключ.

87
00:03:43,280 --> 00:03:46,180
В основном первичный ключ -
это уникальный столбец,

88
00:03:46,180 --> 00:03:48,680
что означает, что каждая
запись в этом столбце

89
00:03:48,680 --> 00:03:52,030
имеет значение отличное
от всех других значений.

90
00:03:52,030 --> 00:03:54,305
Это поле никогда не будет
свободным или пустым.

91
00:03:54,305 --> 00:03:58,670
В нашей таблице Movies используется
числовой первичный ключ.

92
00:03:58,670 --> 00:04:01,310
Но как столбец ID
получил значение 6

93
00:04:01,310 --> 00:04:04,520
для новой строки?

94
00:04:04,520 --> 00:04:07,920
SQL может автоматически
увеличивать первичный ключ

95
00:04:07,920 --> 00:04:09,770
для таблицы, позволяя
генерировать большее число,

96
00:04:09,770 --> 00:04:13,130
когда новая запись
добавляется в таблицу.

97
00:04:13,130 --> 00:04:15,840
Поскольку наш первичный
ключ - это ID, то он будет

98
00:04:15,840 --> 00:04:17,300
автоматически увеличиваться
базой данных

99
00:04:17,300 --> 00:04:21,300
каждый раз, когда строка
добавляется в таблицу.

100
00:04:21,300 --> 00:04:24,190
Теперь это новая строка
с ID равным 6.

101
00:04:27,110 --> 00:04:30,270
Кроме того, вам может быть
интересно, какое значение

102
00:04:30,270 --> 00:04:31,990
имеет колонка genre
в нашей новой строке.

103
00:04:31,990 --> 00:04:35,290
Верите или нет, SQL
использует уникальное

104
00:04:35,290 --> 00:04:37,410
значение для хранения
данных в этом месте.

105
00:04:37,410 --> 00:04:41,160
Данные в этом поле рассматриваются
как нулевые данные или значение NULL.

106
00:04:41,160 --> 00:04:42,910
Значение NULL используется
для представления поля

107
00:04:42,910 --> 00:04:44,620
с отсутствующими данными.

108
00:04:44,620 --> 00:04:47,380
Поле со значением NULL
может оказаться пустым,

109
00:04:47,380 --> 00:04:49,930
но это связано только с тем,
что данные для этого столбца

110
00:04:49,930 --> 00:04:51,410
не являются обязательными.

111
00:04:51,410 --> 00:04:53,730
Поэтому значение NULL можно
увидеть также как местозаполнитель

112
00:04:53,730 --> 00:04:59,010
для неизвестных или
недоступных данных.

113
00:04:59,010 --> 00:05:02,010
На этом все для первой части
второго уровня.

114
00:05:02,010 --> 00:05:04,080
Пришло время для упражнений.

115
00:05:04,080 --> 00:05:06,550
Увидимся в следующей части.
