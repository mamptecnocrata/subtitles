1
00:00:00,000 --> 00:00:07,953
Lettuce head to the farm

2
00:00:07,954 --> 00:00:10,804
and get deep into the CRUD

3
00:00:10,805 --> 00:00:13,242
No need to be alarmed—

4
00:00:13,243 --> 00:00:15,890
our data's cleaner than the mud.

5
00:00:15,891 --> 00:00:19,642
We'll pep up our app, yes we will, it's gonna be real swell.

6
00:00:19,643 --> 00:00:21,212
So swell, so swell.

7
00:00:21,213 --> 00:00:32,174
Learning MVC is a snap when you're using Laravel.

8
00:00:32,175 --> 00:00:39,090
Welcome back!  In this level, we're going to talk about relationships.

9
00:00:39,091 --> 00:00:43,021
Now that we have our Market system mostly build out, let's take a look

10
00:00:43,022 --> 00:00:48,987
at adding some farms.  We'll need to do a few things to add farms to our markets.

11
00:00:48,988 --> 00:00:53,853
We'll need to look at creating farms in the same kind of CRUD that we

12
00:00:53,854 --> 00:00:57,912
did for markets.  We need to establish relationships between the farms

13
00:00:57,913 --> 00:01:01,296
and the markets.  Then we'll want to create a pivot table in the

14
00:01:01,297 --> 00:01:07,402
database to create associations between each of the tables.

15
00:01:07,403 --> 00:01:12,347
Let's start by building out the Farm.  We need to create a Farm model using Artisan.

16
00:01:12,348 --> 00:01:17,050
We want to create the migration with the same fields as our Market.

17
00:01:17,051 --> 00:01:20,552
We want to create a Farm controller, and we want to create the index,

18
00:01:20,553 --> 00:01:25,408
show, create, and save methods on the controller.

19
00:01:25,409 --> 00:01:30,526
Once you create the Farm, it should have the following methods--index,

20
00:01:30,527 --> 00:01:35,274
show, create, and save.

21
00:01:35,275 --> 00:01:39,341
In Laravel, there are several different types of relationships.

22
00:01:39,342 --> 00:01:44,469
The most simple is the one to one, like an employee should have one job title.

23
00:01:44,470 --> 00:01:50,028
Another is the one to many, such as a blog post will have many comments.

24
00:01:50,029 --> 00:01:56,130
Our relationship is very bidirectional.  Markets can have many farms,

25
00:01:56,131 --> 00:01:58,987
and farms can belong to many different markets.

26
00:01:58,988 --> 00:02:05,354
This is called a many to many relationship.

27
00:02:05,355 --> 00:02:09,490
In a many to many relationship, we'll have to use a pivot table.

28
00:02:09,491 --> 00:02:14,103
A pivot table keeps track of the farm_id and its related market_id,

29
00:02:14,104 --> 00:02:17,210
and it works to help us in both directions.

30
00:02:17,211 --> 00:02:22,041
As you can see in this example, Thomas Farms has an ID of 1.

31
00:02:22,042 --> 00:02:28,406
And in the farm_market table, the ID 1 is associated to a market_id of 4.

32
00:02:28,407 --> 00:02:33,628
So that way the Farm with an ID of 1, Thomas Farms, is related to the

33
00:02:33,629 --> 00:02:38,164
market_id 4 or the Cair Paravel Market.

34
00:02:38,165 --> 00:02:43,067
In order to create a pivot table, we'll need to create another migration file.

35
00:02:43,068 --> 00:02:48,708
This time using Artisan, we'll run the command make:migration and give

36
00:02:48,709 --> 00:02:53,687
it a very descriptive name.  Then using the option --create,

37
00:02:53,688 --> 00:02:58,879
we can pass the name of our pivot table, which is farm_market.

38
00:02:58,880 --> 00:03:04,049
This will create our migration file with a couple of fields.

39
00:03:04,050 --> 00:03:08,308
Next, we're going to open the file and add some more columns.

40
00:03:08,309 --> 00:03:12,918
Notice here that the table name must be a combination of both tables

41
00:03:12,919 --> 00:03:17,792
in alphabetical order, which means it's farm_market.

42
00:03:17,793 --> 00:03:21,793
If you name this market_farm, it would not work.

43
00:03:21,794 --> 00:03:27,121
Also, this code for timestamps is pre-generated by Artisan.

44
00:03:27,122 --> 00:03:31,906
We'll need to open this file and add some more.

45
00:03:31,907 --> 00:03:36,063
We will need a column for farm_id and for market_id.

46
00:03:36,064 --> 00:03:41,822
These will both be unsigned integers and will be used as indexes for queries.

47
00:03:41,823 --> 00:03:46,882
Then we'll need to create a foreign key for the farm_id referencing

48
00:03:46,883 --> 00:03:51,782
the ID field on the farms table.  So that way on delete of that entry,

49
00:03:51,783 --> 00:03:54,922
it will cascade and delete the pivot table entries.

50
00:03:54,923 --> 00:03:59,729
We'll repeat this process for market_id and the markets table,

51
00:03:59,730 --> 00:04:03,456
and we're ready to run our migration.

52
00:04:03,457 --> 00:04:08,069
Once the migration is run, we need to now extend our Farm and Market

53
00:04:08,070 --> 00:04:11,297
models to include a reference to the other.

54
00:04:11,298 --> 00:04:15,707
Looking at Market, it will now have a method called farms.

55
00:04:15,708 --> 00:04:20,472
This will return a belongsToMany relationship with the App\Farm model.

56
00:04:20,473 --> 00:04:24,324
And then we'll also want to keep track of timestamps.

57
00:04:24,325 --> 00:04:27,756
Though this is not required, it can be nice to have and does not cause

58
00:04:27,757 --> 00:04:31,314
much of a performance load.

59
00:04:31,315 --> 00:04:37,038
Let's jump back into Artisan Tinker and learn how to use our newfound relationships.

60
00:04:37,039 --> 00:04:41,179
To start, we'll need a market.  Let's use Eloquent to grab the first

61
00:04:41,180 --> 00:04:46,541
market in the database table.  We do this with a call to the first

62
00:04:46,542 --> 00:04:49,577
method on the Market class and then store it for later in the object

63
00:04:49,578 --> 00:04:55,832
variable $market.  We can immediately call $market with an object

64
00:04:55,833 --> 00:04:59,493
operator to the farms method to see what we get.

65
00:04:59,494 --> 00:05:07,031
A call to $market farms will return as we might expect a BelongsToMany relationship.

66
00:05:07,032 --> 00:05:11,996
If we try and get the first object in that collection, it will return null.

67
00:05:11,997 --> 00:05:15,021
Looks like we need to grow this relationship.

68
00:05:15,022 --> 00:05:17,652
To start, we'll grab a farm.  Let's query again for the first and

69
00:05:17,653 --> 00:05:23,685
store it in the $farm object variable.

70
00:05:23,686 --> 00:05:28,519
Now to store the farm in the market, we run the following--$market

71
00:05:28,520 --> 00:05:32,783
object operator calls to the farms method, and then object operator

72
00:05:32,784 --> 00:05:37,799
to save, but then pass the $farm object as the argument.

73
00:05:37,800 --> 00:05:43,735
Now if we run $market farms and count, we'll get a value of 1.

74
00:05:43,736 --> 00:05:49,114
If we do the other direction, $farm markets count, we should get the same.

75
00:05:49,115 --> 00:05:54,292
Now we have a farm associated with a market.

76
00:05:54,293 --> 00:05:57,829
Let's take a look back at this section.  We've created a Farm model

77
00:05:57,830 --> 00:06:02,394
and some generic CRUD methods.  We've established a relationship

78
00:06:02,395 --> 00:06:05,577
between farms and markets.  We've created a pivot table for database

79
00:06:05,578 --> 00:06:11,125
associations, and we used Tinker to search and associate a farm to

80
00:06:11,126 --> 00:06:14,035
a market in both directions.

81
00:06:14,036 --> 01:00:00,000
Now it's time to work on some challenges, and I'll see you in the next section.
