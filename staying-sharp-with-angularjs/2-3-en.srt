1
00:00:02,080 --> 00:00:03,120
Howdy, howdy.

2
00:00:03,120 --> 00:00:07,350
In this section, we're
going to be covering link.

3
00:00:07,350 --> 00:00:09,854
Here we have our application
in its current state.

4
00:00:09,854 --> 00:00:12,020
But wouldn't it be nice if
we could add a little bit

5
00:00:12,020 --> 00:00:14,380
more information for each note?

6
00:00:14,380 --> 00:00:16,329
What if we clicked
on each note card

7
00:00:16,329 --> 00:00:20,280
and it could display
the note description?

8
00:00:20,280 --> 00:00:22,530
Inside the card
template, we have

9
00:00:22,530 --> 00:00:25,830
a description being displayed,
but it has a class of hidden.

10
00:00:25,830 --> 00:00:27,600
We're going to add
some CSS that will

11
00:00:27,600 --> 00:00:30,140
make that class of
hidden display none.

12
00:00:30,140 --> 00:00:31,640
And when someone
clicks on it, we

13
00:00:31,640 --> 00:00:34,160
want to toggle this
hidden class on and off.

14
00:00:39,060 --> 00:00:42,290
To add this click behavior,
we'll use some jQuery.

15
00:00:42,290 --> 00:00:45,440
We're going to listen for the
click on event on the div,

16
00:00:45,440 --> 00:00:50,310
and then toggle the display
class on the paragraph.

17
00:00:50,310 --> 00:00:54,310
But where does this
functionality go?

18
00:00:54,310 --> 00:00:57,260
One place we can put this
jQuery is inside the controller,

19
00:00:57,260 --> 00:00:59,360
but this isn't a best practice.

20
00:00:59,360 --> 00:01:02,160
The jQuery selector is
searching the entire DOM.

21
00:01:02,160 --> 00:01:06,400
And the controller may run
before the HTML is even

22
00:01:06,400 --> 00:01:08,050
rendered.

23
00:01:08,050 --> 00:01:10,940
If we're not going to put this
in the controller, where then?

24
00:01:10,940 --> 00:01:15,320
Well, it turns out that each
directive has a link function.

25
00:01:15,320 --> 00:01:18,110
The link function runs
after the directive has

26
00:01:18,110 --> 00:01:21,590
been compiled and linked up.

27
00:01:21,590 --> 00:01:24,610
This is the best spot to do
any DOM manipulation or logic

28
00:01:24,610 --> 00:01:26,469
functionality.

29
00:01:26,469 --> 00:01:28,010
If you'll notice,
though, we're still

30
00:01:28,010 --> 00:01:30,750
searching the entire
DOM, which is bad.

31
00:01:30,750 --> 00:01:33,200
It's not the best
for performance.

32
00:01:33,200 --> 00:01:35,215
Luckily, link has an
element parameter.

33
00:01:39,920 --> 00:01:41,930
The first parameter
for link is scope

34
00:01:41,930 --> 00:01:44,710
and the second is the element.

35
00:01:44,710 --> 00:01:47,490
The element refers to
the outermost element

36
00:01:47,490 --> 00:01:49,830
for the directive,
which in this case

37
00:01:49,830 --> 00:01:51,720
is the div with
the class of card.

38
00:01:55,830 --> 00:01:58,530
Here's what our jQuery looks
like now using the element

39
00:01:58,530 --> 00:02:00,480
selector from the link function.

40
00:02:00,480 --> 00:02:02,350
We're no longer
searching the entire DOM.

41
00:02:07,880 --> 00:02:09,990
Link has an additional
attrs parameter,

42
00:02:09,990 --> 00:02:12,640
which allows us to access any
of the attributes that are

43
00:02:12,640 --> 00:02:14,810
set on the directive's element.

44
00:02:14,810 --> 00:02:17,100
So here, in our nw-card directive,

45
00:02:17,100 --> 00:02:19,200
we have header and description that we

46
00:02:19,200 --> 00:02:21,330
can pull out from attrs.

47
00:02:21,330 --> 00:02:23,010
If we wanted to do a little debugging,

48
00:02:23,010 --> 00:02:25,604
we could log header with console.log,

49
00:02:25,604 --> 00:02:26,520
and then attrs.header.

50
00:02:30,980 --> 00:02:33,480
If we look at our cards
now, we are successfully

51
00:02:33,480 --> 00:02:35,750
displaying the description
when they're clicked,

52
00:02:35,750 --> 00:02:36,640
which is awesome.

53
00:02:36,640 --> 00:02:37,680
It's what we wanted.

54
00:02:37,680 --> 00:02:41,300
But if you notice the
markdown, it's not quite parsed

55
00:02:41,300 --> 00:02:42,970
how we expected.

56
00:02:42,970 --> 00:02:46,910
So if you see, it says markers
on an asterisk asterisk DOM

57
00:02:46,910 --> 00:02:50,860
element asterisk asterisk, which
in all reality that should just

58
00:02:50,860 --> 00:02:53,180
be bolded and the asterisk
should not be showing.

59
00:02:56,260 --> 00:02:59,450
One way we can do this is to
download an external JavaScript

60
00:02:59,450 --> 00:03:00,450
library.

61
00:03:00,450 --> 00:03:04,020
We found markdown.js out there
on the interwebs, moved it

62
00:03:04,020 --> 00:03:06,236
into our Vendors
folder, and then we

63
00:03:06,236 --> 00:03:08,236
included it with a script
tag in our index.html.

64
00:03:11,610 --> 00:03:13,550
A good place to use
this external library

65
00:03:13,550 --> 00:03:15,130
is inside our Link function.

66
00:03:15,130 --> 00:03:17,710
As we just learned
earlier, the link function

67
00:03:17,710 --> 00:03:21,280
is the perfect place to
manipulate DOM elements.

68
00:03:21,280 --> 00:03:23,370
So as you see here
in our link function,

69
00:03:23,370 --> 00:03:26,030
we're going to access
the body through scope.

70
00:03:26,030 --> 00:03:29,800
So we'll say scope.body equals,
and we'll call our markdown

71
00:03:29,800 --> 00:03:30,995
library method.

72
00:03:30,995 --> 00:03:31,995
So it's markdown.toHTML.

73
00:03:34,597 --> 00:03:36,180
And then we'll pass
it the scope.body.

74
00:03:39,860 --> 00:03:41,930
If we look back at
our note cards now,

75
00:03:41,930 --> 00:03:43,250
we see that it's working.

76
00:03:43,250 --> 00:03:46,270
It's translating the
markdown to HTML,

77
00:03:46,270 --> 00:03:49,300
but it's not actually
rendering it on the screen.

78
00:03:49,300 --> 00:03:51,600
It's just printing out the tags.

79
00:03:51,600 --> 00:03:53,170
Why is this happening?

80
00:03:53,170 --> 00:03:55,830
Well, it turns out you
have to tell AngularJS

81
00:03:55,830 --> 00:03:58,020
that it can trust
this and actually

82
00:03:58,020 --> 00:03:59,660
render it to the screen.

83
00:03:59,660 --> 00:04:02,140
We need to tell
AngularJS it's safe HTML.

84
00:04:02,140 --> 00:04:04,450
And we'll use two
things to do this.

85
00:04:04,450 --> 00:04:07,780
One, ngBindHtml and two, $sce.

86
00:04:10,620 --> 00:04:14,190
If you ever try to insert HTML
with an AngularJS expression,

87
00:04:14,190 --> 00:04:17,230
you'll notice that it doesn't
work, like we just saw.

88
00:04:17,230 --> 00:04:19,360
In order to render
HTML onto the page,

89
00:04:19,360 --> 00:04:21,850
we need to pass it into the
element with ngBindHtml.

90
00:04:27,930 --> 00:04:30,250
Now we need to tell
AngularJS the HTML

91
00:04:30,250 --> 00:04:35,620
we're about to pass to it
is safe and okay to render.

92
00:04:35,620 --> 00:04:37,940
We'll use $sce to do that.

93
00:04:37,940 --> 00:04:41,740
$sce is a Strict Contextual
Escaping service.

94
00:04:41,740 --> 00:04:45,440
It's saying, "I
trust this as HTML.

95
00:04:45,440 --> 00:04:47,090
Don't worry about escaping this.

96
00:04:47,090 --> 00:04:50,280
Go ahead and render it."

97
00:04:50,280 --> 00:04:51,980
If we head on over
back to the browser,

98
00:04:51,980 --> 00:04:54,680
you can see that each
note card, when clicked,

99
00:04:54,680 --> 00:04:58,190
displays their description
without all of those HTML tags

100
00:04:58,190 --> 00:05:00,370
flying around.

101
00:05:00,370 --> 00:05:02,170
As you can see,
the link function

102
00:05:02,170 --> 00:05:05,400
is a perfect place to do DOM
manipulation and any logic

103
00:05:05,400 --> 00:05:07,740
functionality you might
need in your directive.

104
00:05:07,740 --> 00:05:09,360
So go practice it
in the challenges,

105
00:05:09,360 --> 00:05:12,731
and I'll see you
back in Level 3.

106
00:05:12,731 --> 00:05:13,230
—this array.

107
00:05:16,700 --> 00:05:19,240
Has allowed us.

108
00:05:19,240 --> 00:05:20,690
I don't know how
to go into link.

109
00:05:20,690 --> 00:05:22,940
You might not know
this, but this-- yeah,

110
00:05:22,940 --> 00:05:25,390
he may not know this, but this.
