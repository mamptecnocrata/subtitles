1
00:00:00,000 --> 00:00:05,000
[No captions yet for intro., about the first 26 seconds.  Hope to have a fix later on!]

2
00:00:26,400 --> 00:00:30,380
[SINGING] 4:30 in the morning,
coding front-end on your site.

3
00:00:30,380 --> 00:00:33,600
Console errors warning —
you don't know how to fight.

4
00:00:33,600 --> 00:00:37,750
Reusable and flexible
directives are what you need.

5
00:00:37,750 --> 00:00:41,130
Link and scope are sensible
in reliant apps with speed.

6
00:00:41,130 --> 00:00:43,430
Services will be okay
to craft your own Note Wrangler.

7
00:00:43,430 --> 00:00:47,480
You are on your way to
Staying Sharp with Angular.

8
00:00:52,330 --> 00:00:52,870
Welcome.

9
00:00:52,870 --> 00:00:54,700
My name is Alyssa Nicoll
and you're watching

10
00:00:54,700 --> 00:00:56,760
Staying Sharp with Angular.js.

11
00:00:56,760 --> 00:01:01,030
In this course, we'll be
furthering our AngularJS skills.

12
00:01:01,030 --> 00:01:03,540
The app we're going to build
is called Note Wrangler,

13
00:01:03,540 --> 00:01:06,220
and it uses AngularJS to
create and manage notes.

14
00:01:06,220 --> 00:01:07,970
We'll be learning about
the route provider

15
00:01:07,970 --> 00:01:10,630
and how to create flexible
directives and services

16
00:01:10,630 --> 00:01:14,700
that will be reusable across
our Note Wrangler application.

17
00:01:14,700 --> 00:01:16,220
Let's get started with routes.

18
00:01:16,220 --> 00:01:18,560
In this first section, we're
going to be wiring together

19
00:01:18,560 --> 00:01:21,400
our views.

20
00:01:21,400 --> 00:01:23,870
We want to start this
AngularJS app from ground zero

21
00:01:23,870 --> 00:01:27,410
so that you guys can see the
process as we go through it.

22
00:01:27,410 --> 00:01:30,850
Here you can see we have all of
these static HTML and CSS files

23
00:01:30,850 --> 00:01:32,610
from our designer.

24
00:01:32,610 --> 00:01:36,060
Our goal now is to take this
and build it into a living

25
00:01:36,060 --> 00:01:39,070
and breathing AngularJS app.

26
00:01:39,070 --> 00:01:41,530
To get started, we're going to
create a few new directories

27
00:01:41,530 --> 00:01:43,260
to organize our code.

28
00:01:43,260 --> 00:01:45,600
Out in the wild, you might
see some applications

29
00:01:45,600 --> 00:01:48,030
that put all of their
controllers and services

30
00:01:48,030 --> 00:01:49,790
in one massive file.

31
00:01:49,790 --> 00:01:53,100
We think it's best to
encapsulate each controller,

32
00:01:53,100 --> 00:01:56,340
service, filter, or
directive into their own file

33
00:01:56,340 --> 00:01:57,760
and give them their
own directory.

34
00:02:00,770 --> 00:02:02,850
Inside our controllers
directory you'll

35
00:02:02,850 --> 00:02:05,910
see that we have a separate
file for each controller.

36
00:02:05,910 --> 00:02:09,680
So for notes index,
edit, show, et cetera,

37
00:02:09,680 --> 00:02:13,470
each one gets their own file.

38
00:02:13,470 --> 00:02:15,640
Now let's look at the HTML.

39
00:02:15,640 --> 00:02:19,070
In the notes-index.html
and users-index.html,

40
00:02:19,070 --> 00:02:20,670
there's a lot of redundancy.

41
00:02:20,670 --> 00:02:24,320
They both start with the HTML
tag and end with HTML tag.

42
00:02:24,320 --> 00:02:25,820
Let's take a look
inside those files

43
00:02:25,820 --> 00:02:28,490
and see what's
actually repeated.

44
00:02:28,490 --> 00:02:30,320
Here's the notes index.

45
00:02:30,320 --> 00:02:34,780
As you can see, there's quite a
bit of code that's duplicated.

46
00:02:34,780 --> 00:02:38,500
The only unique code
that exists is inside

47
00:02:38,500 --> 00:02:42,430
the div that has the
class of main-wrapper.

48
00:02:42,430 --> 00:02:46,020
If we go ahead and bring our
users index onto the screen,

49
00:02:46,020 --> 00:02:48,180
you can see that
inside of that div,

50
00:02:48,180 --> 00:02:50,880
called main-wrapper
as well, is the only

51
00:02:50,880 --> 00:02:53,490
unique chunk of code for users.

52
00:02:53,490 --> 00:02:56,190
So what we're going to do
is take those two pieces

53
00:02:56,190 --> 00:02:58,830
of unique code and
separate them out

54
00:02:58,830 --> 00:03:00,380
into their own template files.

55
00:03:03,120 --> 00:03:06,580
We're going to place these
files into their own templates

56
00:03:06,580 --> 00:03:10,190
directory with a pages
directory inside of that

57
00:03:10,190 --> 00:03:14,000
and then a notes or users
directory inside of that.

58
00:03:14,000 --> 00:03:15,580
But you might
notice there's still

59
00:03:15,580 --> 00:03:17,710
some duplication going on.

60
00:03:17,710 --> 00:03:21,340
Having a notes index file
inside a notes directory

61
00:03:21,340 --> 00:03:25,000
is a little redundant, so we can
go ahead and remove the notes

62
00:03:25,000 --> 00:03:27,810
or users prefix
off of those files

63
00:03:27,810 --> 00:03:29,880
since they live inside
of their own directory

64
00:03:29,880 --> 00:03:31,220
that tells you that information.

65
00:03:34,260 --> 00:03:36,550
Remember all of that
duplicate HTML code

66
00:03:36,550 --> 00:03:38,590
that we just pushed
to the side earlier?

67
00:03:38,590 --> 00:03:41,670
Well, now we're going to take
it and just have one copy of it

68
00:03:41,670 --> 00:03:44,010
in our main index file.

69
00:03:44,010 --> 00:03:47,150
And then at the very top in
the HTML tag, you guessed it,

70
00:03:47,150 --> 00:03:49,990
we're going to have an
ng-app attribute that labels

71
00:03:49,990 --> 00:03:52,750
our application Note Wrangler.

72
00:03:52,750 --> 00:03:54,800
Inside of our main-wrapper
you can also

73
00:03:54,800 --> 00:03:56,640
see that it's empty
because that's

74
00:03:56,640 --> 00:03:58,990
where our unique content
was removed from.

75
00:04:01,780 --> 00:04:04,140
If we open our application
in the web browser,

76
00:04:04,140 --> 00:04:07,180
you can see that our main
layout from the index file

77
00:04:07,180 --> 00:04:09,370
is being loaded in,
which is awesome,

78
00:04:09,370 --> 00:04:12,030
but nothing else is displaying.

79
00:04:12,030 --> 00:04:16,070
So if we go to the URL
with /notes at the end,

80
00:04:16,070 --> 00:04:17,560
what do we expect to happen?

81
00:04:17,560 --> 00:04:20,170
Well, I would anticipate
a list of notes

82
00:04:20,170 --> 00:04:22,430
being shown, the note index.

83
00:04:22,430 --> 00:04:27,220
But how do we include that
template in this spot?

84
00:04:27,220 --> 00:04:30,330
We can include that template
by simply defining an AngularJS

85
00:04:30,330 --> 00:04:31,290
route.

86
00:04:31,290 --> 00:04:35,110
AngularJS is going to
look at the /notes URL,

87
00:04:35,110 --> 00:04:40,310
look into the routes.js file,
and find what template it needs

88
00:04:40,310 --> 00:04:41,340
to include.

89
00:04:41,340 --> 00:04:43,160
In this case, that's
the notes index.

90
00:04:46,150 --> 00:04:48,760
There are four steps to
using routing in any AngularJS

91
00:04:48,760 --> 00:04:49,780
application.

92
00:04:49,780 --> 00:04:51,420
Let's go ahead and
list them out now.

93
00:04:51,420 --> 00:04:53,850
First you're going
to use ngView.

94
00:04:53,850 --> 00:04:57,060
Then you'll load
the ngRoute library.

95
00:04:57,060 --> 00:04:59,960
Third, you're going to
import ngRoute module.

96
00:04:59,960 --> 00:05:03,820
And then last, you get to
define the actual route itself.

97
00:05:03,820 --> 00:05:08,390
Let's go ahead and implement
each of these steps together.

98
00:05:08,390 --> 00:05:12,560
So the first step to routing happiness: ngView.

99
00:05:12,560 --> 00:05:14,680
You need to use the ngView attribute

100
00:05:14,680 --> 00:05:18,720
where you want to tell AngularJS, "Load in the template here."

101
00:05:18,720 --> 00:05:22,180
In our case, that would be inside the div main-wrapper

102
00:05:22,180 --> 00:05:23,960
where we took out the unique code.

103
00:05:29,600 --> 00:05:32,690
The next step, loading
the ngRoute library,

104
00:05:32,690 --> 00:05:35,600
used to not always be required.

105
00:05:35,600 --> 00:05:38,070
The route library used to be
a part of the AngularJS core.

106
00:05:38,070 --> 00:05:41,550
But in order to slim down, they
stripped that out and now we

107
00:05:41,550 --> 00:05:44,730
have to include it in our app
if we want to use routes.

108
00:05:44,730 --> 00:05:47,110
So here, in our main
index file, we're

109
00:05:47,110 --> 00:05:51,490
going to include the script to
our js/vendor/angular-route

110
00:05:51,490 --> 00:05:51,990
file.

111
00:05:54,720 --> 00:05:56,130
Now that we've
loaded ngRoute, we

112
00:05:56,130 --> 00:05:58,540
can include it in our
main application module.

113
00:05:58,540 --> 00:06:02,530
We'll create an app.js
file, declare angular.module

114
00:06:02,530 --> 00:06:05,260
name it NoteWrangler,
and go ahead and include

115
00:06:05,260 --> 00:06:07,670
our ngRoute dependency here.

116
00:06:07,670 --> 00:06:11,490
Now we can start declaring our
routes in a routes.js file.

117
00:06:11,490 --> 00:06:14,040
We'll say angular.module
NoteWrangler again

118
00:06:14,040 --> 00:06:16,640
at the top of the file,
and then in the application's

119
00:06:16,640 --> 00:06:20,730
config function, we'll
include route provider.

120
00:06:20,730 --> 00:06:22,710
This will allow us to
specify our routes.

121
00:06:26,230 --> 00:06:27,730
You might be wondering
why we're not

122
00:06:27,730 --> 00:06:32,110
creating an app variable like we
did in Shaping up with AngularJS.

123
00:06:32,110 --> 00:06:35,830
We said var app
equals angular.module,

124
00:06:35,830 --> 00:06:38,510
and then we reused that
application variable

125
00:06:38,510 --> 00:06:41,650
over and over again any time
we wanted to attach something

126
00:06:41,650 --> 00:06:43,510
to our application module.

127
00:06:43,510 --> 00:06:45,300
This is a bad
practice for reasons

128
00:06:45,300 --> 00:06:47,610
that we're not going to
get into in this course,

129
00:06:47,610 --> 00:06:51,590
but just note that re-declaring
angular.module each time is

130
00:06:51,590 --> 00:06:53,300
better.

131
00:06:53,300 --> 00:06:55,910
Finally, the moment you've
all been waiting for.

132
00:06:55,910 --> 00:06:58,340
We actually get
to define a route.

133
00:06:58,340 --> 00:07:01,550
So with that route provider
that we just got access to

134
00:07:01,550 --> 00:07:04,440
we have a couple of methods
that we're going to use.

135
00:07:04,440 --> 00:07:08,090
There is .when, which will
allow you to add a new route

136
00:07:08,090 --> 00:07:10,380
definition to the route service.

137
00:07:10,380 --> 00:07:13,050
And there's .otherwise.

138
00:07:13,050 --> 00:07:15,640
This method will allow
us to define a route

139
00:07:15,640 --> 00:07:19,370
when no other route is matched.

140
00:07:19,370 --> 00:07:21,840
Now we get to define
our first route.

141
00:07:21,840 --> 00:07:24,780
We're going to say
routeProvider.when,

142
00:07:24,780 --> 00:07:29,160
and then pass in the path,
which, in this case, is /notes.

143
00:07:29,160 --> 00:07:31,060
Next, we specify
the template that we

144
00:07:31,060 --> 00:07:34,250
want to load in by
passing in an object

145
00:07:34,250 --> 00:07:37,850
with a template URL
property and the path

146
00:07:37,850 --> 00:07:41,400
to the template as the value.

147
00:07:41,400 --> 00:07:45,250
Now when we go back to
our application to /notes,

148
00:07:45,250 --> 00:07:47,710
you can see that all the
notes are being loaded in with

149
00:07:47,710 --> 00:07:51,330
the notes index template.

150
00:07:51,330 --> 00:07:53,900
Next, we're going to
define our users route.

151
00:07:53,900 --> 00:07:59,160
So when /users is visited, we
want the users index template

152
00:07:59,160 --> 00:08:00,380
to be loaded in.

153
00:08:00,380 --> 00:08:03,130
Notice we're not re-declaring
route provider each time.

154
00:08:03,130 --> 00:08:05,500
We're just chaining on
the when methods as we go.

155
00:08:08,060 --> 00:08:10,930
If we go /users in
our Note Wrangler app,

156
00:08:10,930 --> 00:08:15,830
you can see now that all of
the users are being loaded in.

157
00:08:15,830 --> 00:08:19,150
When you go to the root of
our application, simply /,

158
00:08:19,150 --> 00:08:20,870
you'll see that it's just our layout.

159
00:08:20,870 --> 00:08:22,210
Nothing else is being displayed.

160
00:08:25,670 --> 00:08:29,050
So we can go ahead and declare
another .when method and say

161
00:08:29,050 --> 00:08:33,040
when / load in the template
URL for the notes index.

162
00:08:35,810 --> 00:08:38,700
The last route that we're going
to declare in this section

163
00:08:38,700 --> 00:08:40,310
is a catch-all route.

164
00:08:40,310 --> 00:08:45,040
It's basically saying,
"If nothing else matches, do this."

165
00:08:45,040 --> 00:08:48,170
So we're going to use
our .otherwise method

166
00:08:48,170 --> 00:08:49,710
that we talked about earlier.

167
00:08:49,710 --> 00:08:52,690
We'll simply say .otherwise.

168
00:08:52,690 --> 00:08:56,960
And then we'll
redirect to the root.

169
00:08:56,960 --> 00:08:58,860
If we head on back
over to the browser,

170
00:08:58,860 --> 00:09:02,130
you can see that our templates
are wired up now and working

171
00:09:02,130 --> 00:09:03,440
with the navigation.

172
00:09:03,440 --> 00:09:06,750
If we click on Users,
the Users page loads in

173
00:09:06,750 --> 00:09:07,980
and they're all listed out.

174
00:09:07,980 --> 00:09:09,300
Click on Notes.

175
00:09:09,300 --> 00:09:11,810
The notes index
template comes in.

176
00:09:11,810 --> 00:09:13,970
And then if we go
to the root, you

177
00:09:13,970 --> 00:09:18,860
can see that also the notes
are being loaded in there.

178
00:09:18,860 --> 00:09:21,160
If you look closely
at the URL, you

179
00:09:21,160 --> 00:09:25,410
might be wondering why I have
app-level-1 in my path.

180
00:09:25,410 --> 00:09:28,770
Well, you can't just
open an index file

181
00:09:28,770 --> 00:09:32,110
for an AngularJS application and
expect it to work statically.

182
00:09:32,110 --> 00:09:34,800
You need something on the
back-end to serve it up.

183
00:09:34,800 --> 00:09:37,420
Sometimes people will use
Brackets, an application

184
00:09:37,420 --> 00:09:38,920
that does this for you.

185
00:09:38,920 --> 00:09:40,740
Other people will use Node.

186
00:09:40,740 --> 00:09:44,360
I personally used Rails here
and put all of the levels

187
00:09:44,360 --> 00:09:46,860
inside of one public folder.

188
00:09:46,860 --> 00:09:49,870
So now if I change to
Level 2, 3, 4,

189
00:09:49,870 --> 00:09:53,790
you can see the app in
its different states.

190
00:09:53,790 --> 00:09:55,920
I'll provide you the link
at the end of the course

191
00:09:55,920 --> 00:09:59,250
so that you can go and download
all of those if you would like.

192
00:09:59,250 --> 00:10:01,560
Let's get started on challenges.

