1
00:00:02,790 --> 00:00:06,970
Git это распределенный источник
контроля хранения.

2
00:00:06,970 --> 00:00:09,400
Я пытался представить движение
кластеров информации

3
00:00:09,400 --> 00:00:12,700
через файловую систему.

4
00:00:12,700 --> 00:00:13,820
Где сообщения коммитов,
как книга истории?

5
00:00:13,820 --> 00:00:16,750
Я продолжал мечтать о
репозитории,

6
00:00:16,750 --> 00:00:18,210
я думал, что никогда не увижу.

7
00:00:18,210 --> 00:00:22,205
И потом, однажды: Git Real.
(появился git)

8
00:00:22,205 --> 00:00:27,110
[ИГРАЕТ МУЗЫКА]

9
00:00:27,110 --> 00:00:28,300
Вы смотрите Git Real.

10
00:00:28,300 --> 00:00:30,470
И это Уровень Четыре, где мы собираемся рассмотреть

11
00:00:30,470 --> 00:00:32,560
некоторые сценарии совместной работы.

12
00:00:32,560 --> 00:00:35,440
Что происходит, когда дела идут не так гладко, как Оливер

13
00:00:35,440 --> 00:00:38,550
показывал вам на предыдущем уровне.

14
00:00:38,550 --> 00:00:39,970
Итак, у нас есть Грегг, он отправляет свой

15
00:00:39,970 --> 00:00:41,230
исходный код на GitHub.

16
00:00:41,230 --> 00:00:42,930
И Джейн, конечно же, хочет получить копию.

17
00:00:42,930 --> 00:00:47,430
Как мы видели, Джейн собирается клонировать репозиторий с GitHub'а

18
00:00:47,430 --> 00:00:49,580
и затем она хочет
добавить каких-нибудь изменений.

19
00:00:49,580 --> 00:00:52,010
Итак, давайте продолжим
эту линию времени.

20
00:00:52,010 --> 00:00:53,510
И, она добавляет изменения.

21
00:00:53,510 --> 00:00:55,990
Как вы можете видеть
тут два новых файла.

22
00:00:55,990 --> 00:00:59,630
Мы запускаем git add --all, чтобы добавить файлы.

23
00:00:59,630 --> 00:01:01,640
Это добавит модели магазина и продукта.

24
00:01:04,349 --> 00:01:05,960
Затем она отправляет изменения в GitHub, когда она

25
00:01:05,960 --> 00:01:07,250
закончила с редактированием файлов.

26
00:01:07,250 --> 00:01:10,510
Представим, что её commit представлен этой маленькой розовой

27
00:01:10,510 --> 00:01:13,350
розовый точкой вон там.

28
00:01:13,350 --> 00:01:14,690
Теперь вернемся к Грегу.

29
00:01:14,690 --> 00:01:18,780
Видите, Грег также работает
в то же самое время, что и Джейн, и

30
00:01:18,780 --> 00:01:22,770
Грег делает commit в основном
добавляя изменения в файл readme.

31
00:01:22,770 --> 00:01:27,040
Итак, у нас теперь есть commit Джейн,
который уже лежит на GitHub

32
00:01:27,040 --> 00:01:29,770
и локальный commit Грега,
который находится в его локальном

33
00:01:29,770 --> 00:01:32,770
репозитории, и они разные.

34
00:01:32,770 --> 00:01:36,000
Итак, что мы будем в этот момент делать?

35
00:01:36,000 --> 00:01:39,090
Если сейчас Грег попытается
отправить изменения на GitHub, но

36
00:01:39,090 --> 00:01:42,970
это действие будет отклонено (rejected)
потому что как вы можете видеть,

37
00:01:42,970 --> 00:01:47,520
окончание его текущей ветки
находиться за окончанием
удалённой ветки.

38
00:01:47,520 --> 00:01:50,420
Итак, что нам нужно сделать тут,
так это просто можно сделать pull

39
00:01:50,420 --> 00:01:54,110
сначала, а затем push,
и это сработает.

40
00:01:54,110 --> 00:01:56,490
Важно, чтобы мы знали, что происходит под капотом

41
00:01:56,490 --> 00:01:58,390
когда мы запускаем команду pull.

42
00:01:58,390 --> 00:02:01,640
Итак, первое, что делает pull, это получение изменений с сервера или синхронизация

43
00:02:01,640 --> 00:02:04,630
нашего локального репозитория с
удалённым.

44
00:02:04,630 --> 00:02:07,910
Это то же самое, что выполняет команда git fetch.

45
00:02:07,910 --> 00:02:11,800
Таким образом, он собирается скопировать commit Джейн в

46
00:02:11,800 --> 00:02:12,820
наш локальный репозиторий.

47
00:02:12,820 --> 00:02:15,550
Однако на самом деле он не собирается
обновлять ни один из наших

48
00:02:15,550 --> 00:02:16,250
локальных файлов.

49
00:02:16,250 --> 00:02:18,920
Если приоткрыть завесу тайны
то тут мы увидим, что в нашем

50
00:02:18,920 --> 00:02:23,810
локальном репозитории
на самом деле есть ветка
под названием origin master.

51
00:02:23,810 --> 00:02:25,680
Это наша удаленная ветка.

52
00:02:25,680 --> 00:02:28,720
И теперь второй шаг команды pull
состоит в том, чтобы объединить

53
00:02:28,720 --> 00:02:31,190
origin master с master.

54
00:02:31,190 --> 00:02:35,200
Это то же самое, что и запустить git merge origin master.

55
00:02:35,200 --> 00:02:37,490
Так как вы видели на предыдущем уровне, когда мы пытаемся

56
00:02:37,490 --> 00:02:39,970
сделать слияние для двух разных веток, у есть различия

57
00:02:39,970 --> 00:02:43,590
в commits, это приведет нас к текстовому редактору, где

58
00:02:43,590 --> 00:02:45,890
мы должны создать соединительный commit.

59
00:02:45,890 --> 00:02:48,430
В этом случае в нашем сообщении говорится,
что наша ветка соединяется (merge) с веткой

60
00:02:48,430 --> 00:02:51,510
master из удалённого
репозитория.

61
00:02:51,510 --> 00:02:54,120
Как только мы сохраним сообщение, мы получим немного

62
00:02:54,120 --> 00:02:56,770
выходной информации из команды pull,
которая скажет что было сделано

63
00:02:56,770 --> 00:02:59,130
рекурсивное слияние (recursive merge).

64
00:02:59,130 --> 00:03:01,760
Если мы посмотрим на нашу линию времени (time line)
мы увидим, что

65
00:03:01,760 --> 00:03:06,220
у нас было две ветки, которые соединились в этом
соединительном commit.

66
00:03:06,220 --> 00:03:09,590
Вы можете заметить, что в локальной ветке

67
00:03:09,590 --> 00:03:13,270
этот соединительный commit есть, но origin master

68
00:03:13,270 --> 00:03:18,090
пока ещё не знает об изменениях,
которые сделал Грег и о
соединительном commit.

69
00:03:18,090 --> 00:03:22,130
И никогда не узнают
пока мы не сделаем git push.

70
00:03:22,130 --> 00:03:25,600
В этот момент, origin master установлен в той же точке что и

71
00:03:25,600 --> 00:03:29,470
master ветка и
всё стало обновлено.

72
00:03:29,470 --> 00:03:31,100
И теперь, если заглянуть в log
мы увидим

73
00:03:31,100 --> 00:03:33,140
наш соединительный commit.

74
00:03:33,140 --> 00:03:36,870
Однако некоторые люди небольшие поклонники таких слияний.

75
00:03:36,870 --> 00:03:40,780
Некоторые считают, что загрязняют
репозиторий, загрязняют историю,

76
00:03:40,780 --> 00:03:43,170
потому что если у вас много
сотрудников, то у вас

77
00:03:43,170 --> 00:03:46,100
может быть 10 изменений
и может 3 или 4

78
00:03:46,100 --> 00:03:48,490
из них будут соединительными commit.

79
00:03:48,490 --> 00:03:50,200
Это может стать очень неряшливым.

80
00:03:50,200 --> 00:03:52,760
И на следующих уровнях
мы будем говорить о

81
00:03:52,760 --> 00:03:54,950
реорганизации (rebase), что является одним из способов обойти

82
00:03:54,950 --> 00:03:56,250
соединительные commit.

83
00:03:56,250 --> 00:03:58,900
Но пока перейдем к другому сценарию.

84
00:04:01,770 --> 00:04:05,000
Итак, Грегг и Джейн снова работают над одним и тем же файлом

85
00:04:05,000 --> 00:04:08,380
одновременно. И в одно и то же время

86
00:04:08,380 --> 00:04:11,040
над одним и тем же readme файлом.

87
00:04:11,040 --> 00:04:14,330
Грегг считает, что торт — ложь, а Джейн думает, что

88
00:04:14,330 --> 00:04:15,550
торт — истина.

89
00:04:15,550 --> 00:04:17,620
И вот они оба редактируют
один и тот же файл.

90
00:04:17,620 --> 00:04:22,550
Джейн делает commit для своих изменений
и делает push на GitHub, а Грег

91
00:04:22,550 --> 00:04:23,780
делает свой commit локально.

92
00:04:23,780 --> 00:04:26,700
Итак, теперь вы можете видеть, что у нас все еще есть два разных

93
00:04:26,700 --> 00:04:29,030
commit, одного и того же файла.

94
00:04:29,030 --> 00:04:30,640
Что же теперь должно произойти?

95
00:04:30,640 --> 00:04:32,360
Когда Грег сделает pull
произойдут две вещи.

96
00:04:32,360 --> 00:04:35,270
Помните, эта команда синхронизирует, забирает

97
00:04:35,270 --> 00:04:38,280
изменения с репозитория, получает commit Джейн и

98
00:04:38,280 --> 00:04:39,810
затем пытается всё это дело (merge) соединить.

99
00:04:39,810 --> 00:04:42,610
Но слияние не увенчалось успехом.

100
00:04:42,610 --> 00:04:44,480
У нас есть конфликт.

101
00:04:44,480 --> 00:04:46,990
Вот тут сказано, что
конфликт в readme файле.

102
00:04:46,990 --> 00:04:50,260
Поэтому нам придется отредактировать этот readme, так как он  принуждает нас

103
00:04:50,260 --> 00:04:51,630
вернуться в командной строке.

104
00:04:51,630 --> 00:04:55,650
Если мы выполняем status, то увидим, что мы должны отредактировать

105
00:04:55,650 --> 00:04:58,720
этот файл, а только потом соединить commit'ы.

106
00:04:58,720 --> 00:05:01,410
Итак, если мы перейдем в readme
на данном этапе мы

107
00:05:01,410 --> 00:05:03,340
сможем увидеть различия.

108
00:05:03,340 --> 00:05:06,110
Внутри этого diff, у нас есть локальная

109
00:05:06,110 --> 00:05:08,740
версия и мы видим версию Джейн.

110
00:05:08,740 --> 00:05:12,130
Нам нужно будет отредактировать этот файл вручную,  чтобы всё исправить.

111
00:05:12,130 --> 00:05:15,660
Поэтому мы собираемся удалить весь лишний текст и сделать так, чтобы

112
00:05:15,660 --> 00:05:18,770
торт стал ложным, ну вы понимаете,

113
00:05:18,770 --> 00:05:20,000
на самом деле нет никакого торта.

114
00:05:20,000 --> 00:05:23,740
Затем мы сделаем так
git commit -a.

115
00:05:23,740 --> 00:05:25,490
Мы собираемся избавиться
от ненужных сообщений потому что иначе

116
00:05:25,490 --> 00:05:26,855
нас опять выкинет в текстовый редактор.

117
00:05:26,855 --> 00:05:30,240
Нам покажут нормальный commit
комментарий, и даже покажут

118
00:05:30,240 --> 00:05:32,640
список конфликтов
которые мы исправили.

119
00:05:32,640 --> 00:05:35,170
Как только мы сохранили это, наше дерево снова выглядит примерно так

120
00:05:35,170 --> 00:05:36,860
с нашим соединительным commit.
(merge commit)

121
00:05:36,860 --> 00:05:40,900
И когда мы сделаем push,
origin master ещё раз синхронизируется

122
00:05:40,900 --> 00:05:44,540
с нашим локальным репозиторием.

123
00:05:44,540 --> 00:05:46,200
Итак, мы достигли конца
Четвертого Уровня и теперь вы знаете

124
00:05:46,200 --> 00:05:51,020
немного больше о слиянии commit'ов и конфликтах.

125
00:05:51,020 --> 00:05:53,160
И теперь самое время самостоятельно
разрешить пару собственных

126
00:05:53,160 --> 00:05:54,540
конфликтов в упражнениях.
