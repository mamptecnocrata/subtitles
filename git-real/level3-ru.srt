1
00:00:02,790 --> 00:00:06,970
Git это распределенный источник
контроля хранения.

2
00:00:06,970 --> 00:00:09,400
Я пытался представить движение
кластеров информации

3
00:00:09,400 --> 00:00:12,700
через файловую систему. Где сообщения коммитов,

4
00:00:12,700 --> 00:00:13,820
как книга истории?

5
00:00:13,820 --> 00:00:16,535
Я продолжал мечтать о
репозитории,

6
00:00:16,535 --> 00:00:17,476
я думал, что никогда не увижу.

7
00:00:17,476 --> 00:00:22,205
И потом, однажды: Git Real.
(появился git)

8
00:00:22,205 --> 00:00:26,680
[ИГРАЕТ МУЗЫКА]

9
00:00:26,680 --> 00:00:28,230
Вы смотрите Git Real.

10
00:00:28,230 --> 00:00:29,190
Меня зовут Оливер Лакан.
(Olivier Lacan)

11
00:00:29,190 --> 00:00:30,360
И это Уровень 3.

12
00:00:30,360 --> 00:00:33,610
Мы поговорим с вами о
Клонировании и Ветвлении.

13
00:00:33,610 --> 00:00:35,810
Итак, на уровне 2, мы наблюдали, как
Грег отправлял

14
00:00:35,810 --> 00:00:37,110
репозиторий на GitHub.

15
00:00:37,110 --> 00:00:39,910
И теперь новому сотруднику по
имени Джейн понадобились эти файлы.

16
00:00:39,910 --> 00:00:42,970
Она спросит, что-то вроде,
"Где мне взять эти файлы"?

17
00:00:42,970 --> 00:00:45,760
А Грег ответит ей
"просто клонируй

18
00:00:45,760 --> 00:00:46,540
репозиторий".

19
00:00:46,540 --> 00:00:48,270
Так как же это сделать?

20
00:00:48,270 --> 00:00:50,620
Если вы используете, скажем
GitHub, вы пойдёте в

21
00:00:50,620 --> 00:00:54,750
репозиторий, получите URL адрес
этого репозитория.

22
00:00:54,750 --> 00:00:57,930
Вернётесь к командной строке
напишите в ней git clone потом

23
00:00:57,930 --> 00:01:01,710
наш URL, и Git создаст локальную
директорию

24
00:01:01,710 --> 00:01:02,840
с этим репозиторием.

25
00:01:02,840 --> 00:01:04,739
У неё будет то же имя

26
00:01:04,739 --> 00:01:05,990
что и у репозитория, с которым мы имеем дело.

27
00:01:05,990 --> 00:01:08,050
Если вы хотите поменять имя
на другое, вы

28
00:01:08,050 --> 00:01:11,110
можете просто повторить, git clone URL
и задать имя,

29
00:01:11,110 --> 00:01:12,360
например, git demo.

30
00:01:15,330 --> 00:01:17,320
Первое, что делает git clone, - это загрузит

31
00:01:17,320 --> 00:01:18,090
репозиторий.

32
00:01:18,090 --> 00:01:21,950
Второе, создаст remote в origin

33
00:01:21,950 --> 00:01:23,990
и поместит его в URL ссылку
по которой надо пройти.

34
00:01:23,990 --> 00:01:27,630
Мы можем проверить это просто запустив
git remote -v. И это

35
00:01:27,630 --> 00:01:30,490
выдаст список всех remotes, поэтому
вы увидите origin и любой

36
00:01:30,490 --> 00:01:31,930
URL, по которому мы прошли.

37
00:01:31,930 --> 00:01:34,600
И наконец, будет проверена
первоначальная ветка

38
00:01:34,600 --> 00:01:40,070
скорее всего master
и здесь будет установлен HEAD.

39
00:01:40,070 --> 00:01:42,160
Итак, Джейн всё настроила, но
она же захочет

40
00:01:42,160 --> 00:01:42,990
работая над функцией.

41
00:01:42,990 --> 00:01:45,650
Для этого, лучше всего
создать новую ветку.

42
00:01:45,650 --> 00:01:47,570
Итак, мы собираемся создать ветку под названием "cat".

43
00:01:47,570 --> 00:01:50,030
git branch cat
создаст эту ветку.

44
00:01:55,440 --> 00:01:57,930
Но если мы проверим git branch,
мы увидим, что до сих пор

45
00:01:57,930 --> 00:01:59,180
находимся на ветке master.

46
00:02:01,710 --> 00:02:04,250
Чтобы перейти к ветке cat, нам понадобится напечатать

47
00:02:04,250 --> 00:02:05,860
git checkout cat.

48
00:02:05,860 --> 00:02:08,430
Когда вы так делаете,
на самом деле просто

49
00:02:08,430 --> 00:02:10,009
переключаются временны́е линии.

50
00:02:10,009 --> 00:02:12,900
Мы больше не на временно́й
линии master.

51
00:02:12,900 --> 00:02:14,080
У нас другая линия времени.

52
00:02:14,080 --> 00:02:17,110
Мы можем делать всё что захотим,
а потом вернуться в master

53
00:02:17,110 --> 00:02:19,690
когда это понадобится.

54
00:02:19,690 --> 00:02:21,900
Мы запустим вот эту команду сейчас

55
00:02:21,900 --> 00:02:25,150
и она создаст файл cat.txt,
и внутри его поместит слово

56
00:02:25,150 --> 00:02:26,190
Шрёдингер
(Schrodinger)

57
00:02:26,190 --> 00:02:29,430
Затем мы собираемся добавить его в промежуточную зону, сделать commit и

58
00:02:29,430 --> 00:02:32,150
добавить комментарий: "Создаётся
квантовый котик." И этот commit

59
00:02:32,150 --> 00:02:35,150
добавится к нашей линии времени "cat",
не в master,

60
00:02:35,150 --> 00:02:38,940
а в ветку сat.

61
00:02:38,940 --> 00:02:42,110
Если мы напишем команду "ls", чтобы
вывести все файлы в текущей

62
00:02:42,110 --> 00:02:44,560
директории, то вы увидите
что у нас есть readme.txt файл

63
00:02:44,560 --> 00:02:47,205
который создал Грег,
и наш файл cat.txt

64
00:02:47,205 --> 00:02:48,490
который мы только что создали.

65
00:02:48,490 --> 00:02:52,170
Теперь, если мы вернёмся к ветке master,
используя git checkout master и

66
00:02:52,170 --> 00:02:56,080
и введём ту же команду, мы не увидим
никакого cat.txt файла.

67
00:02:56,080 --> 00:02:59,190
Его там нет, он не существует
в этой линии времени.

68
00:02:59,190 --> 00:03:01,960
Теперь, если мы запустим git log, то же
самое, никакого commit.

69
00:03:01,960 --> 00:03:06,300
Нашего "Создаётся квантовый котик."
commit тут нет.

70
00:03:06,300 --> 00:03:08,710
Просто, чтобы убедиться что мы сошли с ума
если мы переключимся обратно на

71
00:03:08,710 --> 00:03:11,980
ветку cat и снова выполните команду ls, cat.txt

72
00:03:11,980 --> 00:03:15,230
всё ещё тут, мы не сумасшедшие.

73
00:03:15,230 --> 00:03:17,340
Итак, давайте предположим, что мы закончили

74
00:03:17,340 --> 00:03:18,340
с веткой "cat".

75
00:03:18,340 --> 00:03:21,300
Мы собираемся вернуться к ветке master
сделаем git checkout master.

76
00:03:21,300 --> 00:03:24,330
И сейчас самое время соединить
эти две линии времени.

77
00:03:24,330 --> 00:03:26,930
Это, должно быть, необычно звучит,
но вообще-то это довольно просто.

78
00:03:26,930 --> 00:03:28,770
git merge cat.

79
00:03:28,770 --> 00:03:32,730
Теперь, когда мы в ветке master, git объединит ветку cat в

80
00:03:32,730 --> 00:03:36,300
master и выведет нам, что
всё сделано.

81
00:03:36,300 --> 00:03:37,720
Он выведет "fast forward".

82
00:03:37,720 --> 00:03:39,650
Что это значит?

83
00:03:39,650 --> 00:03:43,410
Что ж, когда мы создаём ветку и
делаем один или несколько commit

84
00:03:43,410 --> 00:03:46,890
и ничего не делаем с остальными ветками
то это очень легко для Git

85
00:03:46,890 --> 00:03:50,390
объединить ветку "cat" в ветку master, потому что ничего

86
00:03:50,390 --> 00:03:53,140
в ветке master не было изменено на тот момент.

87
00:03:53,140 --> 00:03:55,370
И теперь, когда мы закончили, мы можем безопасно удалить ветку "cat",

88
00:03:55,370 --> 00:03:58,950
запустив git branch -d cat

89
00:03:58,950 --> 00:04:02,140
И Git покажет, что он
в общем-то сделал это.

90
00:04:02,140 --> 00:04:05,110
Следующее задание - поработать над администраторскими задачами для

91
00:04:05,110 --> 00:04:06,160
нашего приложения.

92
00:04:06,160 --> 00:04:08,510
И нам нужно создать новую ветку
чтобы над ней поработать.

93
00:04:08,510 --> 00:04:12,000
Для этого мы будем использовать простую команду сделав git

94
00:04:12,000 --> 00:04:14,210
checkout -b admin.

95
00:04:14,210 --> 00:04:18,180
-b создавая новую ветку,
затем проверяет её.

96
00:04:18,180 --> 00:04:20,620
Теперь мы сделаем кучу изменений, например, создадим

97
00:04:20,620 --> 00:04:25,630
dashboard.html, добавим его в подготовительную зону
и сделаем commit.

98
00:04:25,630 --> 00:04:28,500
Добавим файл users.html и сделаем commit.

99
00:04:28,500 --> 00:04:31,340
И как вы можете видеть
на вот этом вот графике, каждый раз

100
00:04:31,340 --> 00:04:33,680
делая commit, наш HEAD движется вместе с ним.

101
00:04:33,680 --> 00:04:36,330
Итак, мы работаем над веткой администратора, и тут

102
00:04:36,330 --> 00:04:39,080
поздней ночью приходит сообщение от босса
в котором говорится: "О, вот тут вот баг есть

103
00:04:39,080 --> 00:04:40,910
в master ветке, тебе нужно
его исправить."

104
00:04:40,910 --> 00:04:44,220
Поэтому мы должны остановить то, что делаем, git checkout master.

105
00:04:44,220 --> 00:04:45,910
Мы можем запустить git branch
чтобы убедиться

106
00:04:45,910 --> 00:04:47,470
что мы находимся на master ветке.

107
00:04:47,470 --> 00:04:50,350
И затем мы сделаем pull
удалённого репозитория,

108
00:04:50,350 --> 00:04:52,740
чтобы убедиться, что у нас есть
самые последние изменения.

109
00:04:52,740 --> 00:04:56,800
Затем мы будем исправлять
файл store.rb

110
00:04:56,800 --> 00:04:59,130
и product.rb.

111
00:04:59,130 --> 00:05:01,690
И наконец, мы собираемся залить (сделать push)
с этими изменениями

112
00:05:01,690 --> 00:05:04,490
в master remote.

113
00:05:04,490 --> 00:05:06,850
Теперь когда мы исправили все файлы,
самое время

114
00:05:06,850 --> 00:05:08,110
опять заняться нашей веткой.

115
00:05:08,110 --> 00:05:12,230
Поэтому мы делаем
git checkout admin

116
00:05:12,230 --> 00:05:14,070
Итак, мы закончили делать наши изменения.

117
00:05:14,070 --> 00:05:16,700
делаем git checkout master
теперь мы готовы к слиянию ветки

118
00:05:16,700 --> 00:05:19,600
admin в master ветку.

119
00:05:19,600 --> 00:05:21,980
Внезапно, вы в
чудно́м редакторе.

120
00:05:21,980 --> 00:05:23,890
Без паники, это Vi.

121
00:05:23,890 --> 00:05:27,040
Вы могли видеть такое раньше,
но чисто на всякий случай, вот вам

122
00:05:27,040 --> 00:05:29,720
команды внизу экрана
чтобы использовать Vi.

123
00:05:29,720 --> 00:05:33,960
Тут Git просто спрашивает вас "Oк,
я тут сделал commit сообщение

124
00:05:33,960 --> 00:05:35,990
для тебя потому, что я наблюдал
за тем как ты пытался

125
00:05:35,990 --> 00:05:37,640
соединить вот эти две ветки.

126
00:05:37,640 --> 00:05:40,260
Но, чтобы выражаться яснее
добавь пожалуйста

127
00:05:40,260 --> 00:05:41,200
сообщение вверху.

128
00:05:41,200 --> 00:05:44,300
Как можно заметить, оно выдало
merge branch admin.

129
00:05:44,300 --> 00:05:46,390
Вы можете изменить это сообщение, если хотите.

130
00:05:46,390 --> 00:05:50,790
Затем, когда вы закончили, нажмите
клавишу ":" и "w" для записи, и q

131
00:05:50,790 --> 00:05:55,890
для выхода из командной строки.

132
00:05:55,890 --> 00:05:59,100
Как только мы соединили две ветки
с двумя наборами изменений

133
00:05:59,100 --> 00:06:01,290
Git сделал рекурсивное слияние.

134
00:06:01,290 --> 00:06:05,440
Когда так происходит Git создаёт
commit прямо тут,

135
00:06:05,440 --> 00:06:08,500
где ветки были соединены вместе.

136
00:06:08,500 --> 00:06:11,370
Если вы заглянете в ваш log,
вы увидите, что эти

137
00:06:11,370 --> 00:06:13,950
commit были на самом деле созданы
и записаны в log.

138
00:06:13,950 --> 00:06:17,780
Он не содержит никаких файлов, он просто сообщает нам

139
00:06:17,780 --> 00:06:22,720
что в этой точке, master и admin
стали одной веткой.

140
00:06:22,720 --> 00:06:24,160
Спасибо за просмотр
Уровня Три.

141
00:06:24,160 --> 00:06:26,630
Настало время вам поиграться
с ветками и слияниями

142
00:06:26,630 --> 00:06:27,880
в упражнениях.
