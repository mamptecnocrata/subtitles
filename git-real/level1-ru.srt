1
00:00:03,255 --> 00:00:06,970
Git это распределенный источник
контроля хранения.

2
00:00:06,970 --> 00:00:09,400
Я пытался представить движение
кластеров информации

3
00:00:09,400 --> 00:00:11,210
через файловую систему.

4
00:00:11,210 --> 00:00:13,820
Где сообщения коммитов,
как книга истории?

5
00:00:13,820 --> 00:00:16,172
Я продолжал мечтать о
репозитории,

6
00:00:16,172 --> 00:00:18,210
я думал, что никогда не увижу.

7
00:00:18,210 --> 00:00:22,205
И потом, однажды: Git Real.
(появился git)

8
00:00:22,205 --> 00:00:27,750
[ИГРАЕТ МУЗЫКА]

9
00:00:27,750 --> 00:00:28,940
Вы смотрите первый
уровень Git Real.

10
00:00:28,940 --> 00:00:31,550
Я Грег Полак, и это
уровень, через который мы пройдём

11
00:00:31,550 --> 00:00:34,200
немного самых основ
использования Git.

12
00:00:34,200 --> 00:00:36,500
Поэтому, если вы уже знакомы
с этими основами, может вы

13
00:00:36,500 --> 00:00:39,350
уже пробовали Git, можете пропустить
видео и двигаться дальше

14
00:00:39,350 --> 00:00:40,690
к заданиям.

15
00:00:40,690 --> 00:00:43,340
В первый раз мне снесло крышу
работая с веб

16
00:00:43,340 --> 00:00:44,400
довольно типично.

17
00:00:44,400 --> 00:00:46,030
Итак, это был мой первый
на работе и мне

18
00:00:46,030 --> 00:00:47,880
понадобилось отредактировать веб-сайт.

19
00:00:47,880 --> 00:00:51,830
Я скачивал файлы по FTP
и вносил изменения уже локально,

20
00:00:51,830 --> 00:00:55,860
и закидывал их по FTP обратно
и это будет работать нормально
пока не выяснится

21
00:00:55,860 --> 00:00:58,670
что есть кто-то ещё, кто
также работает над проектом.

22
00:00:58,670 --> 00:01:01,060
И одновременно они вытягивают
тот же файл и

23
00:01:01,060 --> 00:01:04,290
делают изменения и вы оба можете
загрузить и перезаписать

24
00:01:04,290 --> 00:01:05,510
изменения друг друга.

25
00:01:05,510 --> 00:01:07,540
И это просто хаос.

26
00:01:07,540 --> 00:01:10,620
Вот тут то вам и может понадобиться
система контроля версий.

27
00:01:10,620 --> 00:01:12,530
Итак, что же это такое
контролируемое хранение источника

28
00:01:12,530 --> 00:01:13,450
и что для вас означает?

29
00:01:13,450 --> 00:01:15,670
Ну, во первых
это решает такого рода проблемы

30
00:01:15,670 --> 00:01:18,170
когда у вас два разных
человека работают над

31
00:01:18,170 --> 00:01:21,650
одним и тем же файлом, и вы оба
вносите изменения в этот файл

32
00:01:21,650 --> 00:01:24,080
система попытается объеденить
изменения в файле.

33
00:01:24,080 --> 00:01:26,350
Второе и более важное
что это всё работает

34
00:01:26,350 --> 00:01:27,480
как машина времени.

35
00:01:27,480 --> 00:01:31,010
Со временем вы вносите изменения
в файл и проверяете

36
00:01:31,010 --> 00:01:35,330
его в системе управления,
он хранит логи для этого

37
00:01:35,330 --> 00:01:37,450
у вас появляется полная история
всех файлов, которые

38
00:01:37,450 --> 00:01:39,970
изменились и даже
почему они изменились.

39
00:01:39,970 --> 00:01:41,270
Вы можете видеть здесь
все различия

40
00:01:41,270 --> 00:01:44,610
между версиями в системе контроля версий.

41
00:01:44,610 --> 00:01:47,040
Прежде, большинство систем
контроля версий использовали

42
00:01:47,040 --> 00:01:48,700
централизованное хранилище.

43
00:01:48,700 --> 00:01:51,320
Это значит что у вас
много людей и когда они

44
00:01:51,320 --> 00:01:54,230
делают изменения и фиксируют их
и хранят историю

45
00:01:54,230 --> 00:01:56,660
это всё отправляется в центральное хранилище

46
00:01:56,660 --> 00:01:58,790
на один сервер.

47
00:01:58,790 --> 00:02:02,230
Некоторые системы контроля версий
как Git распределённые.

48
00:02:02,230 --> 00:02:06,020
Это означает, что каждый
имеет полную копию репозитория.

49
00:02:06,020 --> 00:02:08,430
Классная вещь в том
что вы можете делать фиксации

50
00:02:08,430 --> 00:02:09,900
очень быстро.

51
00:02:09,900 --> 00:02:13,000
Вы можете работать над ними в офлайне,
и каждый

52
00:02:13,000 --> 00:02:14,190
будет иметь полную копию.

53
00:02:14,190 --> 00:02:16,630
В таком случае если одна будет уничтожена,
то у каждого

54
00:02:16,630 --> 00:02:17,810
будет копия репозитория.

55
00:02:17,810 --> 00:02:21,300
В отличие от работы с
центральным репозиторием, если вы

56
00:02:21,300 --> 00:02:23,590
теряете резервные копии
и ваш сервер падает,

57
00:02:23,590 --> 00:02:26,610
вам не повезло.

58
00:02:26,610 --> 00:02:29,560
И так, что мы понимаем, когда говорим
что Git распределенная

59
00:02:29,560 --> 00:02:31,650
система контроля версий,
или DVCS.

60
00:02:34,950 --> 00:02:37,780
Git был создан Линусом
Торвальдсом, когда он работал

61
00:02:37,780 --> 00:02:41,130
над операционной системой Linux
и он потерял доступ к

62
00:02:41,130 --> 00:02:43,770
проприетарной системе контроля версий
которую он использовал.

63
00:02:43,770 --> 00:02:46,710
Он захотел создать что-то новое
что-то, что было бы быстрым

64
00:02:46,710 --> 00:02:49,230
таким же распределенным и хорошо работающим
с большими кусками кода

65
00:02:49,230 --> 00:02:53,480
как у Linux.

66
00:02:53,480 --> 00:02:55,020
Многие люди работают с Git
из командной строки.

67
00:02:55,020 --> 00:02:57,140
Поэтому в этом курсе мы собираемся
научить всем необходимым

68
00:02:57,140 --> 00:02:58,540
для работы с командной строкой.

69
00:02:58,540 --> 00:03:00,770
Но существует так же
много пользователей которые

70
00:03:00,770 --> 00:03:02,520
которые пользуются графическими
интерфейсами

71
00:03:02,520 --> 00:03:05,360
И если вы хотите установить Git
или скачать

72
00:03:05,360 --> 00:03:07,150
GUI, вы можете зайти на
git-scm.com.

73
00:03:11,030 --> 00:03:13,630
Как и многие инструменты командной строки,
Git имеет справочник.

74
00:03:13,630 --> 00:03:16,120
И если вы где-то застряли,
вы можете запустить git help.

75
00:03:16,120 --> 00:03:18,390
И выведутся все
имеющиеся команды.

76
00:03:18,390 --> 00:03:21,010
И если вам нужна какая-то более конкретная
команда, вы можете написать

77
00:03:21,010 --> 00:03:23,270
git help и имя команды по которой
вам нужно больше информации

78
00:03:23,270 --> 00:03:27,360
и у вас будет довольно
неплохая документация.

79
00:03:27,360 --> 00:03:29,230
Ваш первый шаг, когда вы
устанавливаете Git

80
00:03:29,230 --> 00:03:30,640
это сделать базовую настройку.

81
00:03:30,640 --> 00:03:33,760
Вы захотите установить
имя пользователя и ваш email.

82
00:03:33,760 --> 00:03:37,130
Потому, что, хорошо ощущать себя
при фиксации хорошего кода,

83
00:03:37,130 --> 00:03:39,520
что именно вы приложили к этому руку, так?

84
00:03:39,520 --> 00:03:41,380
И мы собираемся запустить одну из
наших последних команд

85
00:03:41,380 --> 00:03:44,730
чтобы то что выводит командная строка
было цветным.

86
00:03:44,730 --> 00:03:46,530
Итак, вы установили Git
и вы готовы поработать с вашим

87
00:03:46,530 --> 00:03:48,500
первый репозиторий.

88
00:03:48,500 --> 00:03:50,090
Нам понадобится какая-нибудь папка,
так давайте создадим её

89
00:03:50,090 --> 00:03:51,080
если она не была создана.

90
00:03:51,080 --> 00:03:52,820
Мы собираемся зайти в
эту папку.

91
00:03:52,820 --> 00:03:55,000
На этом этапе мы уже можем работать
над какими-нибудь файлами
и мы готовы

92
00:03:55,000 --> 00:03:58,980
создать репозиторий, просто напечатаем git init.

93
00:03:58,980 --> 00:04:02,490
Эта команда создаст нам
локальный Git репозиторий.

94
00:04:02,490 --> 00:04:04,990
Не на сервере, а именно локально
у нас на компьютере.

95
00:04:04,990 --> 00:04:08,800
На самом деле всё это дело
хранится в скрытой папке ".git".

96
00:04:08,800 --> 00:04:11,140
Вам никогда не понадобится
лезть в эту папку

97
00:04:11,140 --> 00:04:13,770
просто будьте в курсе
что всё это хранится
именно там.

98
00:04:13,770 --> 00:04:15,050
Давайте начнём работу с Git.

99
00:04:15,050 --> 00:04:17,149
И мы собираемся поговорить
немного о нашем рабочем процессе, прежде чем

100
00:04:17,149 --> 00:04:18,180
перейдём к командам.

101
00:04:18,180 --> 00:04:21,820
Итак, Джейн, наш пользователь, собирается
создать файл readme.

102
00:04:21,820 --> 00:04:24,300
Этот readme файл поначалу
не отслеживается.

103
00:04:24,300 --> 00:04:26,630
Когда мы будем готовы отслеживать
этот файл, для начала

104
00:04:26,630 --> 00:04:28,600
нам нужно будет положить его
в промежуточную часть.

105
00:04:28,600 --> 00:04:31,450
Мы готовимся сделать snapshot
(если дословно "снимок" или "отпечаток").

106
00:04:31,450 --> 00:04:34,360
Затем мы собираемся сделать
нашу первую фиксацию (commit).

107
00:04:34,360 --> 00:04:38,000
И commit это как сделать снимок
тех файлов, которые

108
00:04:38,000 --> 00:04:40,260
мы собираемся выложить.

109
00:04:40,260 --> 00:04:42,510
Мы и дальше можем работать
над проектом. Возможно модифицировать

110
00:04:42,510 --> 00:04:44,500
readme файл или добавить лицензию.

111
00:04:44,500 --> 00:04:46,670
Мы собираемся добавить эти файлы
в промежуточную область и сделать

112
00:04:46,670 --> 00:04:47,810
еще одну фиксацию

113
00:04:47,810 --> 00:04:49,610
И вот это и есть рабочий процесс
для Git.

114
00:04:49,610 --> 00:04:51,540
Вы делаете немного вашей работы, заносите в промежуточную область

115
00:04:51,540 --> 00:04:52,960
и делаете commit.
(фиксируете)

116
00:04:52,960 --> 00:04:54,920
Давайте перейдем к командам.

117
00:04:54,920 --> 00:04:57,220
Одна из самых важных команд
для Git это

118
00:04:57,220 --> 00:04:58,680
команда git status.

119
00:04:58,680 --> 00:05:00,690
Она показывает вам
какие изменения производились

120
00:05:00,690 --> 00:05:02,340
с момента вашего последнего commit.

121
00:05:02,340 --> 00:05:05,020
Итак, мы набрали git status и
мы пока не делали ни одного commit.

122
00:05:05,020 --> 00:05:08,300
Вам сообщится, что
есть один новый, созданный файл

123
00:05:08,300 --> 00:05:10,300
который, не отслеживается.

124
00:05:10,300 --> 00:05:12,240
Чтобы начать отслеживать его
сперва мы должны добавить его в

125
00:05:12,240 --> 00:05:13,340
Промежуточную зону
(далее "staging area")

126
00:05:13,340 --> 00:05:17,520
Делаем это используя команду git add
выглядит это так
git add README.

127
00:05:17,520 --> 00:05:19,730
И если мы сейчас сделаем git status
мы

128
00:05:19,730 --> 00:05:22,850
увидим что этот файл готов
к commit,

129
00:05:22,850 --> 00:05:25,430
Сейчас он в промежуточной зоне.

130
00:05:25,430 --> 00:05:27,300
Теперь мы готовы сделать наш
первый commit.

131
00:05:27,300 --> 00:05:31,580
Делаем это командой git
commit -m, потом мы должны

132
00:05:31,580 --> 00:05:34,210
описать изменения
которые мы вносим.

133
00:05:34,210 --> 00:05:36,580
И вот он весь цикл. Создаётся
readme.

134
00:05:36,580 --> 00:05:39,980
Когда мы запускаем эту команду, это
создаёт наш первый commit который

135
00:05:39,980 --> 00:05:42,280
делает снимок нашей промежуточной зоны (the stage).

136
00:05:42,280 --> 00:05:44,490
И добавляет его
в линию времени.

137
00:05:44,490 --> 00:05:46,970
Если мы запустим git status на
данный момент, мы увидим, что

138
00:05:46,970 --> 00:05:50,170
тут не для чего делать commit.
Нет других изменений или

139
00:05:50,170 --> 00:05:53,420
других файлов, которые
были бы не зафиксированы.

140
00:05:53,420 --> 00:05:57,060
Git status также говорит нам
что мы находимся на ветке master

141
00:05:57,060 --> 00:05:59,530
Всё что вам нужно тут понять,
что у нас есть основная

142
00:05:59,530 --> 00:06:01,410
линия времени на данный момент

143
00:06:01,410 --> 00:06:02,610
и мы называем её "мастер веткой"

144
00:06:02,610 --> 00:06:05,490
В общем мы будем разбираться
с ветками на уровне три.

145
00:06:05,490 --> 00:06:07,550
Сейчас мы собираемся кое-что сделать
с некоторыми файлами.

146
00:06:07,550 --> 00:06:11,370
Мы собираемся изменить файл readme
и добавить лицензию.

147
00:06:11,370 --> 00:06:13,230
Теперь если мы наберем git status, мы
увидим, что наш

148
00:06:13,230 --> 00:06:16,340
отслеживаемый файл readme,
был изменен.

149
00:06:16,340 --> 00:06:18,070
Он постоянно следит за этим файлом
и поэтому

150
00:06:18,070 --> 00:06:19,570
знает, что он был изменен.

151
00:06:19,570 --> 00:06:22,860
И у нас есть ещё один файл
который не отслеживается

152
00:06:22,860 --> 00:06:24,800
называющийся licence (лицензия).

153
00:06:24,800 --> 00:06:27,060
Мы хотим сделать commit обоих
этих файлов и поэтому мы должны

154
00:06:27,060 --> 00:06:28,600
добавить их в зону подготовки (stage area).

155
00:06:28,600 --> 00:06:30,930
Мы можем сделать это просто написав
git add, и

156
00:06:30,930 --> 00:06:32,370
перечислить оба этих файла.

157
00:06:32,370 --> 00:06:36,150
Или мы можем написать
git add --all
и это добавит туда всё, что не добавлено

158
00:06:36,150 --> 00:06:39,190
изменено, или удалит
файлы с нашей подготовительной зоны.

159
00:06:39,190 --> 00:06:41,150
Теперь, если мы наберем git status опять,
мы увидим что

160
00:06:41,150 --> 00:06:43,780
у нас два файла готовы к commit.

161
00:06:43,780 --> 00:06:47,280
И теперь отсюда, нам нужно вернуться
и сделать commit.

162
00:06:47,280 --> 00:06:50,230
Итак, как вы можете видеть
мы делаем
git commit -m.

163
00:06:50,230 --> 00:06:53,810
Теперь мы можем сделать commit для
наших изменений
из нашей подготовительной зоны

164
00:06:53,810 --> 00:06:55,640
и описать что мы сделали при этой фиксации (commit)
В этом случае, мы добавили

165
00:06:55,640 --> 00:06:57,570
лицензию и дописали файл readme.

166
00:06:57,570 --> 00:07:00,450
Это создаст
снимок и добавит нашу фиксацию

167
00:07:00,450 --> 00:07:03,600
в начало нашей временно́й линии.

168
00:07:03,600 --> 00:07:05,540
Теперь у нас есть два commit, но
как мы перечислим

169
00:07:05,540 --> 00:07:07,340
их из командной строки и поймём что из них что?

170
00:07:07,340 --> 00:07:08,960
И как мы можем посмотреть историю?

171
00:07:08,960 --> 00:07:10,970
И тут в дело вступает команда
git log.

172
00:07:10,970 --> 00:07:13,400
Итак, если мы запустим это дело
мы сможем увидеть, что
у нас два commit

173
00:07:13,400 --> 00:07:16,840
список авторов, дата,
и наше пояснение к commit (commit message).

174
00:07:16,840 --> 00:07:19,090
Как вы можете себе представить,
работая над большим проектом,

175
00:07:19,090 --> 00:07:22,480
commit messages (пояснения к commit)
это очень-очень важный момент.

176
00:07:22,480 --> 00:07:25,240
И вам нужно стараться быть настолько
информативными, насколько это возможно

177
00:07:25,240 --> 00:07:26,790
в описании того, что было сделано в commit.

178
00:07:26,790 --> 00:07:29,080
Плюс полезно при этом
выражаться в настоящем времени,

179
00:07:29,080 --> 00:07:30,090
а не в прошедшем.

180
00:07:30,090 --> 00:07:32,950
Я мог бы сказать, что создал файл readme.

181
00:07:32,950 --> 00:07:35,820
Поступить так, весьма заманчиво,
но то, что вы должны на самом деле делать

182
00:07:35,820 --> 00:07:38,280
это думать о том,
что делает commit.

183
00:07:38,280 --> 00:07:41,460
В нашем случае, создаёт readme.

184
00:07:41,460 --> 00:07:43,540
Сейчас мы собираемся пройти через разные
пути, использования

185
00:07:43,540 --> 00:07:44,710
команды add.

186
00:07:44,710 --> 00:07:47,390
Как вы видите, можно просто
перечислять файлы.

187
00:07:47,390 --> 00:07:50,270
Вы можете использовать git add --all.

188
00:07:50,270 --> 00:07:52,890
git add * .txt добавит все текстовые файлы

189
00:07:52,890 --> 00:07:54,160
в текущей папке.

190
00:07:54,160 --> 00:07:56,550
Если мы захотим, мы можем указать
конкретную папку

191
00:07:56,550 --> 00:07:58,990
например docs / *. txt.

192
00:07:58,990 --> 00:08:01,840
И также мы можем добавить все файлы
в указанной папке и

193
00:08:01,840 --> 00:08:05,410
во всех папках, которые
содержатся в ней командой
git add docs

194
00:08:05,410 --> 00:08:08,940
И наконец если вы добавите кавычки
вокруг *.txt

195
00:08:08,940 --> 00:08:13,270
то добавятся все txt файлы
во всём проекте.

196
00:08:13,270 --> 00:08:15,180
Вы добрались до конца Первого Уровня.

197
00:08:15,180 --> 00:08:16,330
Пришло время запускать
ваши собственные

198
00:08:16,330 --> 00:08:17,580
команды и
Git Real
(это игра слов).
